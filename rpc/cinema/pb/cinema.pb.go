// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.12.4
// source: cinema.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type LocationCinemaReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LocationId int64 `protobuf:"varint,1,opt,name=locationId,proto3" json:"locationId,omitempty"` // 地点id
}

func (x *LocationCinemaReq) Reset() {
	*x = LocationCinemaReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cinema_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LocationCinemaReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocationCinemaReq) ProtoMessage() {}

func (x *LocationCinemaReq) ProtoReflect() protoreflect.Message {
	mi := &file_cinema_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocationCinemaReq.ProtoReflect.Descriptor instead.
func (*LocationCinemaReq) Descriptor() ([]byte, []int) {
	return file_cinema_proto_rawDescGZIP(), []int{0}
}

func (x *LocationCinemaReq) GetLocationId() int64 {
	if x != nil {
		return x.LocationId
	}
	return 0
}

type LocationCinemaRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cinemas []*Cinema `protobuf:"bytes,1,rep,name=cinemas,proto3" json:"cinemas,omitempty"`
}

func (x *LocationCinemaRsp) Reset() {
	*x = LocationCinemaRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cinema_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LocationCinemaRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocationCinemaRsp) ProtoMessage() {}

func (x *LocationCinemaRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cinema_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocationCinemaRsp.ProtoReflect.Descriptor instead.
func (*LocationCinemaRsp) Descriptor() ([]byte, []int) {
	return file_cinema_proto_rawDescGZIP(), []int{1}
}

func (x *LocationCinemaRsp) GetCinemas() []*Cinema {
	if x != nil {
		return x.Cinemas
	}
	return nil
}

type Cinema struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CinemaName     string `protobuf:"bytes,1,opt,name=cinemaName,proto3" json:"cinemaName,omitempty"`          // 影院名字
	CinemaAddress  string `protobuf:"bytes,2,opt,name=cinemaAddress,proto3" json:"cinemaAddress,omitempty"`    // 影院位置
	CinemaSupport  string `protobuf:"bytes,3,opt,name=cinemaSupport,proto3" json:"cinemaSupport,omitempty"`    // 影院支持的功能比如改签，用|隔开
	CinemaCard     int64  `protobuf:"varint,4,opt,name=cinemaCard,proto3" json:"cinemaCard,omitempty"`         // 是否支持影城卡
	CinemaMinPrice int64  `protobuf:"varint,5,opt,name=cinemaMinPrice,proto3" json:"cinemaMinPrice,omitempty"` // 几元起
	CinemaDiscount int64  `protobuf:"varint,6,opt,name=cinemaDiscount,proto3" json:"cinemaDiscount,omitempty"` // 最低减价多少
	CinemaId       int64  `protobuf:"varint,7,opt,name=cinemaId,proto3" json:"cinemaId,omitempty"`             // 影院id
}

func (x *Cinema) Reset() {
	*x = Cinema{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cinema_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cinema) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cinema) ProtoMessage() {}

func (x *Cinema) ProtoReflect() protoreflect.Message {
	mi := &file_cinema_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cinema.ProtoReflect.Descriptor instead.
func (*Cinema) Descriptor() ([]byte, []int) {
	return file_cinema_proto_rawDescGZIP(), []int{2}
}

func (x *Cinema) GetCinemaName() string {
	if x != nil {
		return x.CinemaName
	}
	return ""
}

func (x *Cinema) GetCinemaAddress() string {
	if x != nil {
		return x.CinemaAddress
	}
	return ""
}

func (x *Cinema) GetCinemaSupport() string {
	if x != nil {
		return x.CinemaSupport
	}
	return ""
}

func (x *Cinema) GetCinemaCard() int64 {
	if x != nil {
		return x.CinemaCard
	}
	return 0
}

func (x *Cinema) GetCinemaMinPrice() int64 {
	if x != nil {
		return x.CinemaMinPrice
	}
	return 0
}

func (x *Cinema) GetCinemaDiscount() int64 {
	if x != nil {
		return x.CinemaDiscount
	}
	return 0
}

func (x *Cinema) GetCinemaId() int64 {
	if x != nil {
		return x.CinemaId
	}
	return 0
}

type GetCinemaMessageReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MovieId    int64  `protobuf:"varint,1,opt,name=movieId,proto3" json:"movieId,omitempty"`       // 影片id
	LocationId int64  `protobuf:"varint,2,opt,name=locationId,proto3" json:"locationId,omitempty"` // 地点id
	Day        string `protobuf:"bytes,3,opt,name=day,proto3" json:"day,omitempty"`                // 查询时间,今天明天后天
}

func (x *GetCinemaMessageReq) Reset() {
	*x = GetCinemaMessageReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cinema_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCinemaMessageReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCinemaMessageReq) ProtoMessage() {}

func (x *GetCinemaMessageReq) ProtoReflect() protoreflect.Message {
	mi := &file_cinema_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCinemaMessageReq.ProtoReflect.Descriptor instead.
func (*GetCinemaMessageReq) Descriptor() ([]byte, []int) {
	return file_cinema_proto_rawDescGZIP(), []int{3}
}

func (x *GetCinemaMessageReq) GetMovieId() int64 {
	if x != nil {
		return x.MovieId
	}
	return 0
}

func (x *GetCinemaMessageReq) GetLocationId() int64 {
	if x != nil {
		return x.LocationId
	}
	return 0
}

func (x *GetCinemaMessageReq) GetDay() string {
	if x != nil {
		return x.Day
	}
	return ""
}

type GetCinemaMessageRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CinemaName     string `protobuf:"bytes,1,opt,name=cinemaName,proto3" json:"cinemaName,omitempty"`          // 影院名字
	CinemaAddress  string `protobuf:"bytes,2,opt,name=cinemaAddress,proto3" json:"cinemaAddress,omitempty"`    // 影院位置
	CinemaSupport  string `protobuf:"bytes,3,opt,name=cinemaSupport,proto3" json:"cinemaSupport,omitempty"`    // 影院支持的功能比如改签，用|隔开
	CinemaCard     int64  `protobuf:"varint,4,opt,name=cinemaCard,proto3" json:"cinemaCard,omitempty"`         // 是否支持影城卡
	CinemaMinPrice int64  `protobuf:"varint,5,opt,name=cinemaMinPrice,proto3" json:"cinemaMinPrice,omitempty"` // 几元起
	CinemaDiscount int64  `protobuf:"varint,6,opt,name=cinemaDiscount,proto3" json:"cinemaDiscount,omitempty"` // 最低减价多少
}

func (x *GetCinemaMessageRsp) Reset() {
	*x = GetCinemaMessageRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cinema_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCinemaMessageRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCinemaMessageRsp) ProtoMessage() {}

func (x *GetCinemaMessageRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cinema_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCinemaMessageRsp.ProtoReflect.Descriptor instead.
func (*GetCinemaMessageRsp) Descriptor() ([]byte, []int) {
	return file_cinema_proto_rawDescGZIP(), []int{4}
}

func (x *GetCinemaMessageRsp) GetCinemaName() string {
	if x != nil {
		return x.CinemaName
	}
	return ""
}

func (x *GetCinemaMessageRsp) GetCinemaAddress() string {
	if x != nil {
		return x.CinemaAddress
	}
	return ""
}

func (x *GetCinemaMessageRsp) GetCinemaSupport() string {
	if x != nil {
		return x.CinemaSupport
	}
	return ""
}

func (x *GetCinemaMessageRsp) GetCinemaCard() int64 {
	if x != nil {
		return x.CinemaCard
	}
	return 0
}

func (x *GetCinemaMessageRsp) GetCinemaMinPrice() int64 {
	if x != nil {
		return x.CinemaMinPrice
	}
	return 0
}

func (x *GetCinemaMessageRsp) GetCinemaDiscount() int64 {
	if x != nil {
		return x.CinemaDiscount
	}
	return 0
}

type GetCinemaMessageByCidReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CinemaId int64 `protobuf:"varint,1,opt,name=cinemaId,proto3" json:"cinemaId,omitempty"`
}

func (x *GetCinemaMessageByCidReq) Reset() {
	*x = GetCinemaMessageByCidReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cinema_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCinemaMessageByCidReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCinemaMessageByCidReq) ProtoMessage() {}

func (x *GetCinemaMessageByCidReq) ProtoReflect() protoreflect.Message {
	mi := &file_cinema_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCinemaMessageByCidReq.ProtoReflect.Descriptor instead.
func (*GetCinemaMessageByCidReq) Descriptor() ([]byte, []int) {
	return file_cinema_proto_rawDescGZIP(), []int{5}
}

func (x *GetCinemaMessageByCidReq) GetCinemaId() int64 {
	if x != nil {
		return x.CinemaId
	}
	return 0
}

type FilmMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FilmName    string   `protobuf:"bytes,1,opt,name=filmName,proto3" json:"filmName,omitempty"`
	RatingFinal float32  `protobuf:"fixed32,2,opt,name=ratingFinal,proto3" json:"ratingFinal,omitempty"`
	Length      int64    `protobuf:"varint,3,opt,name=length,proto3" json:"length,omitempty"`
	Type        string   `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`           // 类型，如剧情
	ActorName   []string `protobuf:"bytes,5,rep,name=actorName,proto3" json:"actorName,omitempty"` // 主演名字
	MovieId     int64    `protobuf:"varint,6,opt,name=movieId,proto3" json:"movieId,omitempty"`    // 影片id
	Img         string   `protobuf:"bytes,7,opt,name=img,proto3" json:"img,omitempty"`             // 影片logo
}

func (x *FilmMessage) Reset() {
	*x = FilmMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cinema_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilmMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilmMessage) ProtoMessage() {}

func (x *FilmMessage) ProtoReflect() protoreflect.Message {
	mi := &file_cinema_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilmMessage.ProtoReflect.Descriptor instead.
func (*FilmMessage) Descriptor() ([]byte, []int) {
	return file_cinema_proto_rawDescGZIP(), []int{6}
}

func (x *FilmMessage) GetFilmName() string {
	if x != nil {
		return x.FilmName
	}
	return ""
}

func (x *FilmMessage) GetRatingFinal() float32 {
	if x != nil {
		return x.RatingFinal
	}
	return 0
}

func (x *FilmMessage) GetLength() int64 {
	if x != nil {
		return x.Length
	}
	return 0
}

func (x *FilmMessage) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *FilmMessage) GetActorName() []string {
	if x != nil {
		return x.ActorName
	}
	return nil
}

func (x *FilmMessage) GetMovieId() int64 {
	if x != nil {
		return x.MovieId
	}
	return 0
}

func (x *FilmMessage) GetImg() string {
	if x != nil {
		return x.Img
	}
	return ""
}

type GetCinemaMessageByCidRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cinema      *Cinema        `protobuf:"bytes,1,opt,name=cinema,proto3" json:"cinema,omitempty"`
	FilmMessage []*FilmMessage `protobuf:"bytes,2,rep,name=filmMessage,proto3" json:"filmMessage,omitempty"` // 影片信息
}

func (x *GetCinemaMessageByCidRsp) Reset() {
	*x = GetCinemaMessageByCidRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cinema_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCinemaMessageByCidRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCinemaMessageByCidRsp) ProtoMessage() {}

func (x *GetCinemaMessageByCidRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cinema_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCinemaMessageByCidRsp.ProtoReflect.Descriptor instead.
func (*GetCinemaMessageByCidRsp) Descriptor() ([]byte, []int) {
	return file_cinema_proto_rawDescGZIP(), []int{7}
}

func (x *GetCinemaMessageByCidRsp) GetCinema() *Cinema {
	if x != nil {
		return x.Cinema
	}
	return nil
}

func (x *GetCinemaMessageByCidRsp) GetFilmMessage() []*FilmMessage {
	if x != nil {
		return x.FilmMessage
	}
	return nil
}

type GetMovieHallByMHIdReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MhId int64 `protobuf:"varint,1,opt,name=mhId,proto3" json:"mhId,omitempty"`
}

func (x *GetMovieHallByMHIdReq) Reset() {
	*x = GetMovieHallByMHIdReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cinema_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMovieHallByMHIdReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMovieHallByMHIdReq) ProtoMessage() {}

func (x *GetMovieHallByMHIdReq) ProtoReflect() protoreflect.Message {
	mi := &file_cinema_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMovieHallByMHIdReq.ProtoReflect.Descriptor instead.
func (*GetMovieHallByMHIdReq) Descriptor() ([]byte, []int) {
	return file_cinema_proto_rawDescGZIP(), []int{8}
}

func (x *GetMovieHallByMHIdReq) GetMhId() int64 {
	if x != nil {
		return x.MhId
	}
	return 0
}

type GetMovieHallByMHIdRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MhAddress string `protobuf:"bytes,1,opt,name=mhAddress,proto3" json:"mhAddress,omitempty"`
}

func (x *GetMovieHallByMHIdRsp) Reset() {
	*x = GetMovieHallByMHIdRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cinema_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMovieHallByMHIdRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMovieHallByMHIdRsp) ProtoMessage() {}

func (x *GetMovieHallByMHIdRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cinema_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMovieHallByMHIdRsp.ProtoReflect.Descriptor instead.
func (*GetMovieHallByMHIdRsp) Descriptor() ([]byte, []int) {
	return file_cinema_proto_rawDescGZIP(), []int{9}
}

func (x *GetMovieHallByMHIdRsp) GetMhAddress() string {
	if x != nil {
		return x.MhAddress
	}
	return ""
}

type Movie struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Img               string  `protobuf:"bytes,1,opt,name=img,proto3" json:"img,omitempty"`
	MovieId           int64   `protobuf:"varint,2,opt,name=movieId,proto3" json:"movieId,omitempty"`
	TitleCn           string  `protobuf:"bytes,3,opt,name=titleCn,proto3" json:"titleCn,omitempty"`
	MoviesSupportType string  `protobuf:"bytes,4,opt,name=moviesSupportType,proto3" json:"moviesSupportType,omitempty"`
	FilmDirector      string  `protobuf:"bytes,5,opt,name=filmDirector,proto3" json:"filmDirector,omitempty"`
	Actors            string  `protobuf:"bytes,6,opt,name=actors,proto3" json:"actors,omitempty"`
	FilmDrama         string  `protobuf:"bytes,7,opt,name=filmDrama,proto3" json:"filmDrama,omitempty"`
	RatingFinal       float32 `protobuf:"fixed32,8,opt,name=ratingFinal,proto3" json:"ratingFinal,omitempty"`
}

func (x *Movie) Reset() {
	*x = Movie{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cinema_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Movie) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Movie) ProtoMessage() {}

func (x *Movie) ProtoReflect() protoreflect.Message {
	mi := &file_cinema_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Movie.ProtoReflect.Descriptor instead.
func (*Movie) Descriptor() ([]byte, []int) {
	return file_cinema_proto_rawDescGZIP(), []int{10}
}

func (x *Movie) GetImg() string {
	if x != nil {
		return x.Img
	}
	return ""
}

func (x *Movie) GetMovieId() int64 {
	if x != nil {
		return x.MovieId
	}
	return 0
}

func (x *Movie) GetTitleCn() string {
	if x != nil {
		return x.TitleCn
	}
	return ""
}

func (x *Movie) GetMoviesSupportType() string {
	if x != nil {
		return x.MoviesSupportType
	}
	return ""
}

func (x *Movie) GetFilmDirector() string {
	if x != nil {
		return x.FilmDirector
	}
	return ""
}

func (x *Movie) GetActors() string {
	if x != nil {
		return x.Actors
	}
	return ""
}

func (x *Movie) GetFilmDrama() string {
	if x != nil {
		return x.FilmDrama
	}
	return ""
}

func (x *Movie) GetRatingFinal() float32 {
	if x != nil {
		return x.RatingFinal
	}
	return 0
}

type HotMovie struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActorName     []string `protobuf:"bytes,1,rep,name=actorName,proto3" json:"actorName,omitempty"`         // 演员名字
	CommonSpecial string   `protobuf:"bytes,2,opt,name=commonSpecial,proto3" json:"commonSpecial,omitempty"` // 影片简介
	DirectorName  string   `protobuf:"bytes,3,opt,name=directorName,proto3" json:"directorName,omitempty"`   // 导演名字
	Img           string   `protobuf:"bytes,4,opt,name=img,proto3" json:"img,omitempty"`                     // 影片logo
	Is3D          int64    `protobuf:"varint,5,opt,name=is3D,proto3" json:"is3D,omitempty"`                  // 是否3D
	IsDMAX        int64    `protobuf:"varint,6,opt,name=isDMAX,proto3" json:"isDMAX,omitempty"`              // 是否DMAX
	IsFilter      int64    `protobuf:"varint,7,opt,name=isFilter,proto3" json:"isFilter,omitempty"`          // 是否过滤
	IsHot         int64    `protobuf:"varint,8,opt,name=isHot,proto3" json:"isHot,omitempty"`                // 是否热映
	IsIMAX        int64    `protobuf:"varint,9,opt,name=isIMAX,proto3" json:"isIMAX,omitempty"`              // 是否IMAX
	IsIMAX3D      int64    `protobuf:"varint,10,opt,name=isIMAX3D,proto3" json:"isIMAX3D,omitempty"`         // 是否IMAX3D
	IsNew         int64    `protobuf:"varint,11,opt,name=isNew,proto3" json:"isNew,omitempty"`               // 是否新上映
	Length        int64    `protobuf:"varint,12,opt,name=length,proto3" json:"length,omitempty"`             // 时长
	MovieId       int64    `protobuf:"varint,13,opt,name=movieId,proto3" json:"movieId,omitempty"`           // 电影时长
	RDay          int64    `protobuf:"varint,14,opt,name=rDay,proto3" json:"rDay,omitempty"`                 // 上映日期
	RMonth        int64    `protobuf:"varint,15,opt,name=rMonth,proto3" json:"rMonth,omitempty"`             // 上映月份
	RYear         int64    `protobuf:"varint,16,opt,name=rYear,proto3" json:"rYear,omitempty"`               // 上映年份
	RatingFinal   float32  `protobuf:"fixed32,17,opt,name=ratingFinal,proto3" json:"ratingFinal,omitempty"`  // 最终评分
	T             string   `protobuf:"bytes,18,opt,name=t,proto3" json:"t,omitempty"`                        // 名字
	TitleCn       string   `protobuf:"bytes,19,opt,name=titleCn,proto3" json:"titleCn,omitempty"`            // 中文名字
	TitleEn       string   `protobuf:"bytes,20,opt,name=titleEn,proto3" json:"titleEn,omitempty"`            // 英文名字
	Type          string   `protobuf:"bytes,21,opt,name=type,proto3" json:"type,omitempty"`                  // 影片类型
	WantedCount   int64    `protobuf:"varint,22,opt,name=wantedCount,proto3" json:"wantedCount,omitempty"`   // 想看的人数
}

func (x *HotMovie) Reset() {
	*x = HotMovie{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cinema_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HotMovie) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HotMovie) ProtoMessage() {}

func (x *HotMovie) ProtoReflect() protoreflect.Message {
	mi := &file_cinema_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HotMovie.ProtoReflect.Descriptor instead.
func (*HotMovie) Descriptor() ([]byte, []int) {
	return file_cinema_proto_rawDescGZIP(), []int{11}
}

func (x *HotMovie) GetActorName() []string {
	if x != nil {
		return x.ActorName
	}
	return nil
}

func (x *HotMovie) GetCommonSpecial() string {
	if x != nil {
		return x.CommonSpecial
	}
	return ""
}

func (x *HotMovie) GetDirectorName() string {
	if x != nil {
		return x.DirectorName
	}
	return ""
}

func (x *HotMovie) GetImg() string {
	if x != nil {
		return x.Img
	}
	return ""
}

func (x *HotMovie) GetIs3D() int64 {
	if x != nil {
		return x.Is3D
	}
	return 0
}

func (x *HotMovie) GetIsDMAX() int64 {
	if x != nil {
		return x.IsDMAX
	}
	return 0
}

func (x *HotMovie) GetIsFilter() int64 {
	if x != nil {
		return x.IsFilter
	}
	return 0
}

func (x *HotMovie) GetIsHot() int64 {
	if x != nil {
		return x.IsHot
	}
	return 0
}

func (x *HotMovie) GetIsIMAX() int64 {
	if x != nil {
		return x.IsIMAX
	}
	return 0
}

func (x *HotMovie) GetIsIMAX3D() int64 {
	if x != nil {
		return x.IsIMAX3D
	}
	return 0
}

func (x *HotMovie) GetIsNew() int64 {
	if x != nil {
		return x.IsNew
	}
	return 0
}

func (x *HotMovie) GetLength() int64 {
	if x != nil {
		return x.Length
	}
	return 0
}

func (x *HotMovie) GetMovieId() int64 {
	if x != nil {
		return x.MovieId
	}
	return 0
}

func (x *HotMovie) GetRDay() int64 {
	if x != nil {
		return x.RDay
	}
	return 0
}

func (x *HotMovie) GetRMonth() int64 {
	if x != nil {
		return x.RMonth
	}
	return 0
}

func (x *HotMovie) GetRYear() int64 {
	if x != nil {
		return x.RYear
	}
	return 0
}

func (x *HotMovie) GetRatingFinal() float32 {
	if x != nil {
		return x.RatingFinal
	}
	return 0
}

func (x *HotMovie) GetT() string {
	if x != nil {
		return x.T
	}
	return ""
}

func (x *HotMovie) GetTitleCn() string {
	if x != nil {
		return x.TitleCn
	}
	return ""
}

func (x *HotMovie) GetTitleEn() string {
	if x != nil {
		return x.TitleEn
	}
	return ""
}

func (x *HotMovie) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *HotMovie) GetWantedCount() int64 {
	if x != nil {
		return x.WantedCount
	}
	return 0
}

var File_cinema_proto protoreflect.FileDescriptor

var file_cinema_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x63, 0x69, 0x6e, 0x65, 0x6d, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06,
	0x63, 0x69, 0x6e, 0x65, 0x6d, 0x61, 0x22, 0x33, 0x0a, 0x11, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x69, 0x6e, 0x65, 0x6d, 0x61, 0x52, 0x65, 0x71, 0x12, 0x1e, 0x0a, 0x0a, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x3d, 0x0a, 0x11, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x69, 0x6e, 0x65, 0x6d, 0x61, 0x52, 0x73, 0x70,
	0x12, 0x28, 0x0a, 0x07, 0x63, 0x69, 0x6e, 0x65, 0x6d, 0x61, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x63, 0x69, 0x6e, 0x65, 0x6d, 0x61, 0x2e, 0x43, 0x69, 0x6e, 0x65, 0x6d,
	0x61, 0x52, 0x07, 0x63, 0x69, 0x6e, 0x65, 0x6d, 0x61, 0x73, 0x22, 0x80, 0x02, 0x0a, 0x06, 0x43,
	0x69, 0x6e, 0x65, 0x6d, 0x61, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x69, 0x6e, 0x65, 0x6d, 0x61, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x69, 0x6e, 0x65, 0x6d,
	0x61, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x69, 0x6e, 0x65, 0x6d, 0x61, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x69,
	0x6e, 0x65, 0x6d, 0x61, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x63,
	0x69, 0x6e, 0x65, 0x6d, 0x61, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x63, 0x69, 0x6e, 0x65, 0x6d, 0x61, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x69, 0x6e, 0x65, 0x6d, 0x61, 0x43, 0x61, 0x72, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x69, 0x6e, 0x65, 0x6d, 0x61, 0x43, 0x61, 0x72,
	0x64, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x69, 0x6e, 0x65, 0x6d, 0x61, 0x4d, 0x69, 0x6e, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x63, 0x69, 0x6e, 0x65, 0x6d,
	0x61, 0x4d, 0x69, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x69, 0x6e,
	0x65, 0x6d, 0x61, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0e, 0x63, 0x69, 0x6e, 0x65, 0x6d, 0x61, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x69, 0x6e, 0x65, 0x6d, 0x61, 0x49, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x69, 0x6e, 0x65, 0x6d, 0x61, 0x49, 0x64, 0x22, 0x61, 0x0a,
	0x13, 0x47, 0x65, 0x74, 0x43, 0x69, 0x6e, 0x65, 0x6d, 0x61, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x49, 0x64, 0x12, 0x1e,
	0x0a, 0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x10,
	0x0a, 0x03, 0x64, 0x61, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x64, 0x61, 0x79,
	0x22, 0xf1, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x43, 0x69, 0x6e, 0x65, 0x6d, 0x61, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x73, 0x70, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x69, 0x6e, 0x65,
	0x6d, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x69,
	0x6e, 0x65, 0x6d, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x69, 0x6e, 0x65,
	0x6d, 0x61, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x63, 0x69, 0x6e, 0x65, 0x6d, 0x61, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x24,
	0x0a, 0x0d, 0x63, 0x69, 0x6e, 0x65, 0x6d, 0x61, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x69, 0x6e, 0x65, 0x6d, 0x61, 0x53, 0x75, 0x70,
	0x70, 0x6f, 0x72, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x69, 0x6e, 0x65, 0x6d, 0x61, 0x43, 0x61,
	0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x69, 0x6e, 0x65, 0x6d, 0x61,
	0x43, 0x61, 0x72, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x69, 0x6e, 0x65, 0x6d, 0x61, 0x4d, 0x69,
	0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x63, 0x69,
	0x6e, 0x65, 0x6d, 0x61, 0x4d, 0x69, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x26, 0x0a, 0x0e,
	0x63, 0x69, 0x6e, 0x65, 0x6d, 0x61, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x63, 0x69, 0x6e, 0x65, 0x6d, 0x61, 0x44, 0x69, 0x73, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x22, 0x36, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x43, 0x69, 0x6e, 0x65, 0x6d,
	0x61, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x79, 0x43, 0x69, 0x64, 0x52, 0x65, 0x71,
	0x12, 0x1a, 0x0a, 0x08, 0x63, 0x69, 0x6e, 0x65, 0x6d, 0x61, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x63, 0x69, 0x6e, 0x65, 0x6d, 0x61, 0x49, 0x64, 0x22, 0xc1, 0x01, 0x0a,
	0x0b, 0x46, 0x69, 0x6c, 0x6d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x66, 0x69, 0x6c, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x66, 0x69, 0x6c, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x72,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x49, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x49, 0x64, 0x12, 0x10,
	0x0a, 0x03, 0x69, 0x6d, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x69, 0x6d, 0x67,
	0x22, 0x79, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x43, 0x69, 0x6e, 0x65, 0x6d, 0x61, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x42, 0x79, 0x43, 0x69, 0x64, 0x52, 0x73, 0x70, 0x12, 0x26, 0x0a, 0x06,
	0x63, 0x69, 0x6e, 0x65, 0x6d, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x63,
	0x69, 0x6e, 0x65, 0x6d, 0x61, 0x2e, 0x43, 0x69, 0x6e, 0x65, 0x6d, 0x61, 0x52, 0x06, 0x63, 0x69,
	0x6e, 0x65, 0x6d, 0x61, 0x12, 0x35, 0x0a, 0x0b, 0x66, 0x69, 0x6c, 0x6d, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x69, 0x6e, 0x65,
	0x6d, 0x61, 0x2e, 0x46, 0x69, 0x6c, 0x6d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0b,
	0x66, 0x69, 0x6c, 0x6d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x2b, 0x0a, 0x15, 0x47,
	0x65, 0x74, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x48, 0x61, 0x6c, 0x6c, 0x42, 0x79, 0x4d, 0x48, 0x49,
	0x64, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x68, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x6d, 0x68, 0x49, 0x64, 0x22, 0x35, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x4d,
	0x6f, 0x76, 0x69, 0x65, 0x48, 0x61, 0x6c, 0x6c, 0x42, 0x79, 0x4d, 0x48, 0x49, 0x64, 0x52, 0x73,
	0x70, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x68, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x68, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22,
	0xf7, 0x01, 0x0a, 0x05, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x6d, 0x67,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x69, 0x6d, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x6f, 0x76, 0x69, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6d, 0x6f,
	0x76, 0x69, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x43, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x43, 0x6e, 0x12,
	0x2c, 0x0a, 0x11, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x73, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6d, 0x6f, 0x76, 0x69,
	0x65, 0x73, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a,
	0x0c, 0x66, 0x69, 0x6c, 0x6d, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x69, 0x6c, 0x6d, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x69, 0x6c,
	0x6d, 0x44, 0x72, 0x61, 0x6d, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69,
	0x6c, 0x6d, 0x44, 0x72, 0x61, 0x6d, 0x61, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x72, 0x61,
	0x74, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x22, 0xba, 0x04, 0x0a, 0x08, 0x48, 0x6f,
	0x74, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x53, 0x70,
	0x65, 0x63, 0x69, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x69, 0x6d, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x69, 0x6d, 0x67,
	0x12, 0x12, 0x0a, 0x04, 0x69, 0x73, 0x33, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04,
	0x69, 0x73, 0x33, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x44, 0x4d, 0x41, 0x58, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x69, 0x73, 0x44, 0x4d, 0x41, 0x58, 0x12, 0x1a, 0x0a, 0x08,
	0x69, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x69, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x73, 0x48, 0x6f,
	0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x69, 0x73, 0x48, 0x6f, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x69, 0x73, 0x49, 0x4d, 0x41, 0x58, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x69, 0x73, 0x49, 0x4d, 0x41, 0x58, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x49, 0x4d, 0x41, 0x58,
	0x33, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x69, 0x73, 0x49, 0x4d, 0x41, 0x58,
	0x33, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x73, 0x4e, 0x65, 0x77, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x69, 0x73, 0x4e, 0x65, 0x77, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x49, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x44,
	0x61, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x72, 0x44, 0x61, 0x79, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x72, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x59, 0x65, 0x61, 0x72, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x72, 0x59, 0x65, 0x61, 0x72, 0x12, 0x20, 0x0a, 0x0b,
	0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x0b, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x12, 0x0c,
	0x0a, 0x01, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x01, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x43, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x43, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x45,
	0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x45, 0x6e,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x77, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x77, 0x61, 0x6e, 0x74, 0x65,
	0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x32, 0x91, 0x02, 0x0a, 0x10, 0x43, 0x69, 0x6e, 0x65, 0x6d,
	0x61, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x45, 0x78, 0x74, 0x12, 0x48, 0x0a, 0x0e, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x69, 0x6e, 0x65, 0x6d, 0x61, 0x12, 0x19, 0x2e,
	0x63, 0x69, 0x6e, 0x65, 0x6d, 0x61, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x69, 0x6e, 0x65, 0x6d, 0x61, 0x52, 0x65, 0x71, 0x1a, 0x19, 0x2e, 0x63, 0x69, 0x6e, 0x65, 0x6d,
	0x61, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x69, 0x6e, 0x65, 0x6d, 0x61,
	0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x5d, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x43, 0x69, 0x6e, 0x65,
	0x6d, 0x61, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x79, 0x43, 0x69, 0x64, 0x12, 0x20,
	0x2e, 0x63, 0x69, 0x6e, 0x65, 0x6d, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x69, 0x6e, 0x65, 0x6d,
	0x61, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x79, 0x43, 0x69, 0x64, 0x52, 0x65, 0x71,
	0x1a, 0x20, 0x2e, 0x63, 0x69, 0x6e, 0x65, 0x6d, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x69, 0x6e,
	0x65, 0x6d, 0x61, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x79, 0x43, 0x69, 0x64, 0x52,
	0x73, 0x70, 0x22, 0x00, 0x12, 0x54, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x76, 0x69, 0x65,
	0x48, 0x61, 0x6c, 0x6c, 0x42, 0x79, 0x4d, 0x48, 0x49, 0x64, 0x12, 0x1d, 0x2e, 0x63, 0x69, 0x6e,
	0x65, 0x6d, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x48, 0x61, 0x6c, 0x6c,
	0x42, 0x79, 0x4d, 0x48, 0x49, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x1d, 0x2e, 0x63, 0x69, 0x6e, 0x65,
	0x6d, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x48, 0x61, 0x6c, 0x6c, 0x42,
	0x79, 0x4d, 0x48, 0x49, 0x64, 0x52, 0x73, 0x70, 0x22, 0x00, 0x42, 0x04, 0x5a, 0x02, 0x70, 0x62,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cinema_proto_rawDescOnce sync.Once
	file_cinema_proto_rawDescData = file_cinema_proto_rawDesc
)

func file_cinema_proto_rawDescGZIP() []byte {
	file_cinema_proto_rawDescOnce.Do(func() {
		file_cinema_proto_rawDescData = protoimpl.X.CompressGZIP(file_cinema_proto_rawDescData)
	})
	return file_cinema_proto_rawDescData
}

var file_cinema_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_cinema_proto_goTypes = []interface{}{
	(*LocationCinemaReq)(nil),        // 0: cinema.LocationCinemaReq
	(*LocationCinemaRsp)(nil),        // 1: cinema.LocationCinemaRsp
	(*Cinema)(nil),                   // 2: cinema.Cinema
	(*GetCinemaMessageReq)(nil),      // 3: cinema.GetCinemaMessageReq
	(*GetCinemaMessageRsp)(nil),      // 4: cinema.GetCinemaMessageRsp
	(*GetCinemaMessageByCidReq)(nil), // 5: cinema.GetCinemaMessageByCidReq
	(*FilmMessage)(nil),              // 6: cinema.FilmMessage
	(*GetCinemaMessageByCidRsp)(nil), // 7: cinema.GetCinemaMessageByCidRsp
	(*GetMovieHallByMHIdReq)(nil),    // 8: cinema.GetMovieHallByMHIdReq
	(*GetMovieHallByMHIdRsp)(nil),    // 9: cinema.GetMovieHallByMHIdRsp
	(*Movie)(nil),                    // 10: cinema.Movie
	(*HotMovie)(nil),                 // 11: cinema.HotMovie
}
var file_cinema_proto_depIdxs = []int32{
	2, // 0: cinema.LocationCinemaRsp.cinemas:type_name -> cinema.Cinema
	2, // 1: cinema.GetCinemaMessageByCidRsp.cinema:type_name -> cinema.Cinema
	6, // 2: cinema.GetCinemaMessageByCidRsp.filmMessage:type_name -> cinema.FilmMessage
	0, // 3: cinema.CinemaServiceExt.LocationCinema:input_type -> cinema.LocationCinemaReq
	5, // 4: cinema.CinemaServiceExt.GetCinemaMessageByCid:input_type -> cinema.GetCinemaMessageByCidReq
	8, // 5: cinema.CinemaServiceExt.GetMovieHallByMHId:input_type -> cinema.GetMovieHallByMHIdReq
	1, // 6: cinema.CinemaServiceExt.LocationCinema:output_type -> cinema.LocationCinemaRsp
	7, // 7: cinema.CinemaServiceExt.GetCinemaMessageByCid:output_type -> cinema.GetCinemaMessageByCidRsp
	9, // 8: cinema.CinemaServiceExt.GetMovieHallByMHId:output_type -> cinema.GetMovieHallByMHIdRsp
	6, // [6:9] is the sub-list for method output_type
	3, // [3:6] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_cinema_proto_init() }
func file_cinema_proto_init() {
	if File_cinema_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cinema_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LocationCinemaReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cinema_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LocationCinemaRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cinema_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Cinema); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cinema_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCinemaMessageReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cinema_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCinemaMessageRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cinema_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCinemaMessageByCidReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cinema_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilmMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cinema_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCinemaMessageByCidRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cinema_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMovieHallByMHIdReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cinema_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMovieHallByMHIdRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cinema_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Movie); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cinema_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HotMovie); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cinema_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_cinema_proto_goTypes,
		DependencyIndexes: file_cinema_proto_depIdxs,
		MessageInfos:      file_cinema_proto_msgTypes,
	}.Build()
	File_cinema_proto = out.File
	file_cinema_proto_rawDesc = nil
	file_cinema_proto_goTypes = nil
	file_cinema_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// CinemaServiceExtClient is the client API for CinemaServiceExt service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CinemaServiceExtClient interface {
	// 地点影城
	LocationCinema(ctx context.Context, in *LocationCinemaReq, opts ...grpc.CallOption) (*LocationCinemaRsp, error)
	// 根据位置查看有销售对应电影的影院信息
	// rpc GetCinemaMessage(GetCinemaMessageReq) returns(GetCinemaMessageRsp) {}
	// 根据id查看影院的信息和即将上映的影片信息
	GetCinemaMessageByCid(ctx context.Context, in *GetCinemaMessageByCidReq, opts ...grpc.CallOption) (*GetCinemaMessageByCidRsp, error)
	// 根据mh_id获取影厅信息
	GetMovieHallByMHId(ctx context.Context, in *GetMovieHallByMHIdReq, opts ...grpc.CallOption) (*GetMovieHallByMHIdRsp, error)
}

type cinemaServiceExtClient struct {
	cc grpc.ClientConnInterface
}

func NewCinemaServiceExtClient(cc grpc.ClientConnInterface) CinemaServiceExtClient {
	return &cinemaServiceExtClient{cc}
}

func (c *cinemaServiceExtClient) LocationCinema(ctx context.Context, in *LocationCinemaReq, opts ...grpc.CallOption) (*LocationCinemaRsp, error) {
	out := new(LocationCinemaRsp)
	err := c.cc.Invoke(ctx, "/cinema.CinemaServiceExt/LocationCinema", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cinemaServiceExtClient) GetCinemaMessageByCid(ctx context.Context, in *GetCinemaMessageByCidReq, opts ...grpc.CallOption) (*GetCinemaMessageByCidRsp, error) {
	out := new(GetCinemaMessageByCidRsp)
	err := c.cc.Invoke(ctx, "/cinema.CinemaServiceExt/GetCinemaMessageByCid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cinemaServiceExtClient) GetMovieHallByMHId(ctx context.Context, in *GetMovieHallByMHIdReq, opts ...grpc.CallOption) (*GetMovieHallByMHIdRsp, error) {
	out := new(GetMovieHallByMHIdRsp)
	err := c.cc.Invoke(ctx, "/cinema.CinemaServiceExt/GetMovieHallByMHId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CinemaServiceExtServer is the server API for CinemaServiceExt service.
type CinemaServiceExtServer interface {
	// 地点影城
	LocationCinema(context.Context, *LocationCinemaReq) (*LocationCinemaRsp, error)
	// 根据位置查看有销售对应电影的影院信息
	// rpc GetCinemaMessage(GetCinemaMessageReq) returns(GetCinemaMessageRsp) {}
	// 根据id查看影院的信息和即将上映的影片信息
	GetCinemaMessageByCid(context.Context, *GetCinemaMessageByCidReq) (*GetCinemaMessageByCidRsp, error)
	// 根据mh_id获取影厅信息
	GetMovieHallByMHId(context.Context, *GetMovieHallByMHIdReq) (*GetMovieHallByMHIdRsp, error)
}

// UnimplementedCinemaServiceExtServer can be embedded to have forward compatible implementations.
type UnimplementedCinemaServiceExtServer struct {
}

func (*UnimplementedCinemaServiceExtServer) LocationCinema(context.Context, *LocationCinemaReq) (*LocationCinemaRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LocationCinema not implemented")
}
func (*UnimplementedCinemaServiceExtServer) GetCinemaMessageByCid(context.Context, *GetCinemaMessageByCidReq) (*GetCinemaMessageByCidRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCinemaMessageByCid not implemented")
}
func (*UnimplementedCinemaServiceExtServer) GetMovieHallByMHId(context.Context, *GetMovieHallByMHIdReq) (*GetMovieHallByMHIdRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMovieHallByMHId not implemented")
}

func RegisterCinemaServiceExtServer(s *grpc.Server, srv CinemaServiceExtServer) {
	s.RegisterService(&_CinemaServiceExt_serviceDesc, srv)
}

func _CinemaServiceExt_LocationCinema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LocationCinemaReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CinemaServiceExtServer).LocationCinema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cinema.CinemaServiceExt/LocationCinema",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CinemaServiceExtServer).LocationCinema(ctx, req.(*LocationCinemaReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CinemaServiceExt_GetCinemaMessageByCid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCinemaMessageByCidReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CinemaServiceExtServer).GetCinemaMessageByCid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cinema.CinemaServiceExt/GetCinemaMessageByCid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CinemaServiceExtServer).GetCinemaMessageByCid(ctx, req.(*GetCinemaMessageByCidReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CinemaServiceExt_GetMovieHallByMHId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMovieHallByMHIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CinemaServiceExtServer).GetMovieHallByMHId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cinema.CinemaServiceExt/GetMovieHallByMHId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CinemaServiceExtServer).GetMovieHallByMHId(ctx, req.(*GetMovieHallByMHIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _CinemaServiceExt_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cinema.CinemaServiceExt",
	HandlerType: (*CinemaServiceExtServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LocationCinema",
			Handler:    _CinemaServiceExt_LocationCinema_Handler,
		},
		{
			MethodName: "GetCinemaMessageByCid",
			Handler:    _CinemaServiceExt_GetCinemaMessageByCid_Handler,
		},
		{
			MethodName: "GetMovieHallByMHId",
			Handler:    _CinemaServiceExt_GetMovieHallByMHId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cinema.proto",
}
