// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.12.4
// source: cms.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type UserLoginReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User     string `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *UserLoginReq) Reset() {
	*x = UserLoginReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cms_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserLoginReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserLoginReq) ProtoMessage() {}

func (x *UserLoginReq) ProtoReflect() protoreflect.Message {
	mi := &file_cms_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserLoginReq.ProtoReflect.Descriptor instead.
func (*UserLoginReq) Descriptor() ([]byte, []int) {
	return file_cms_proto_rawDescGZIP(), []int{0}
}

func (x *UserLoginReq) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *UserLoginReq) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type UserLoginRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CinemaID   int64  `protobuf:"varint,1,opt,name=cinemaID,proto3" json:"cinemaID,omitempty"`
	AdminID    int64  `protobuf:"varint,2,opt,name=adminID,proto3" json:"adminID,omitempty"`
	CinemaName string `protobuf:"bytes,3,opt,name=cinemaName,proto3" json:"cinemaName,omitempty"`
	AdminNum   int64  `protobuf:"varint,4,opt,name=adminNum,proto3" json:"adminNum,omitempty"`
}

func (x *UserLoginRsp) Reset() {
	*x = UserLoginRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cms_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserLoginRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserLoginRsp) ProtoMessage() {}

func (x *UserLoginRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cms_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserLoginRsp.ProtoReflect.Descriptor instead.
func (*UserLoginRsp) Descriptor() ([]byte, []int) {
	return file_cms_proto_rawDescGZIP(), []int{1}
}

func (x *UserLoginRsp) GetCinemaID() int64 {
	if x != nil {
		return x.CinemaID
	}
	return 0
}

func (x *UserLoginRsp) GetAdminID() int64 {
	if x != nil {
		return x.AdminID
	}
	return 0
}

func (x *UserLoginRsp) GetCinemaName() string {
	if x != nil {
		return x.CinemaName
	}
	return ""
}

func (x *UserLoginRsp) GetAdminNum() int64 {
	if x != nil {
		return x.AdminNum
	}
	return 0
}

type UpdateMessageReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Table string `protobuf:"bytes,1,opt,name=table,proto3" json:"table,omitempty"` // 表名
	Json  string `protobuf:"bytes,2,opt,name=json,proto3" json:"json,omitempty"`   // {k:v}
	Num   string `protobuf:"bytes,3,opt,name=num,proto3" json:"num,omitempty"`     //  权限值
}

func (x *UpdateMessageReq) Reset() {
	*x = UpdateMessageReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cms_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateMessageReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMessageReq) ProtoMessage() {}

func (x *UpdateMessageReq) ProtoReflect() protoreflect.Message {
	mi := &file_cms_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMessageReq.ProtoReflect.Descriptor instead.
func (*UpdateMessageReq) Descriptor() ([]byte, []int) {
	return file_cms_proto_rawDescGZIP(), []int{2}
}

func (x *UpdateMessageReq) GetTable() string {
	if x != nil {
		return x.Table
	}
	return ""
}

func (x *UpdateMessageReq) GetJson() string {
	if x != nil {
		return x.Json
	}
	return ""
}

func (x *UpdateMessageReq) GetNum() string {
	if x != nil {
		return x.Num
	}
	return ""
}

type UpdateMessageRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateMessageRsp) Reset() {
	*x = UpdateMessageRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cms_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateMessageRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMessageRsp) ProtoMessage() {}

func (x *UpdateMessageRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cms_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMessageRsp.ProtoReflect.Descriptor instead.
func (*UpdateMessageRsp) Descriptor() ([]byte, []int) {
	return file_cms_proto_rawDescGZIP(), []int{3}
}

type AllFilmsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page    int64 `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	AdminID int64 `protobuf:"varint,2,opt,name=adminID,proto3" json:"adminID,omitempty"`
}

func (x *AllFilmsReq) Reset() {
	*x = AllFilmsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cms_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllFilmsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllFilmsReq) ProtoMessage() {}

func (x *AllFilmsReq) ProtoReflect() protoreflect.Message {
	mi := &file_cms_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllFilmsReq.ProtoReflect.Descriptor instead.
func (*AllFilmsReq) Descriptor() ([]byte, []int) {
	return file_cms_proto_rawDescGZIP(), []int{4}
}

func (x *AllFilmsReq) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *AllFilmsReq) GetAdminID() int64 {
	if x != nil {
		return x.AdminID
	}
	return 0
}

type AllFilmsRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64   `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Films []*Film `protobuf:"bytes,2,rep,name=films,proto3" json:"films,omitempty"`
}

func (x *AllFilmsRsp) Reset() {
	*x = AllFilmsRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cms_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllFilmsRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllFilmsRsp) ProtoMessage() {}

func (x *AllFilmsRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cms_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllFilmsRsp.ProtoReflect.Descriptor instead.
func (*AllFilmsRsp) Descriptor() ([]byte, []int) {
	return file_cms_proto_rawDescGZIP(), []int{5}
}

func (x *AllFilmsRsp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *AllFilmsRsp) GetFilms() []*Film {
	if x != nil {
		return x.Films
	}
	return nil
}

type Film struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MovieID              int64    `protobuf:"varint,1,opt,name=movieID,proto3" json:"movieID,omitempty"`
	Img                  string   `protobuf:"bytes,2,opt,name=img,proto3" json:"img,omitempty"`
	Length               int64    `protobuf:"varint,3,opt,name=length,proto3" json:"length,omitempty"`
	IsSelectSeat         int64    `protobuf:"varint,4,opt,name=isSelectSeat,proto3" json:"isSelectSeat,omitempty"`
	FilmPrice            float32  `protobuf:"fixed32,5,opt,name=filmPrice,proto3" json:"filmPrice,omitempty"`
	FilmScreenwriter     string   `protobuf:"bytes,6,opt,name=filmScreenwriter,proto3" json:"filmScreenwriter,omitempty"`
	FilmDirector         string   `protobuf:"bytes,7,opt,name=filmDirector,proto3" json:"filmDirector,omitempty"`
	CommentNum           int64    `protobuf:"varint,8,opt,name=commentNum,proto3" json:"commentNum,omitempty"`
	TitleCn              string   `protobuf:"bytes,9,opt,name=titleCn,proto3" json:"titleCn,omitempty"`
	TitleEn              string   `protobuf:"bytes,10,opt,name=titleEn,proto3" json:"titleEn,omitempty"`
	IsSupportInlineWatch int64    `protobuf:"varint,11,opt,name=isSupportInlineWatch,proto3" json:"isSupportInlineWatch,omitempty"`
	CreateAt             string   `protobuf:"bytes,12,opt,name=createAt,proto3" json:"createAt,omitempty"`
	Type                 string   `protobuf:"bytes,13,opt,name=type,proto3" json:"type,omitempty"`
	FilmDrama            string   `protobuf:"bytes,14,opt,name=filmDrama,proto3" json:"filmDrama,omitempty"`
	CommonSpecial        string   `protobuf:"bytes,15,opt,name=commonSpecial,proto3" json:"commonSpecial,omitempty"`
	UserAccessTimes      int64    `protobuf:"varint,16,opt,name=userAccessTimes,proto3" json:"userAccessTimes,omitempty"`
	FilmBoxoffice        float32  `protobuf:"fixed32,17,opt,name=filmBoxoffice,proto3" json:"filmBoxoffice,omitempty"`
	WantedCount          int64    `protobuf:"varint,18,opt,name=wantedCount,proto3" json:"wantedCount,omitempty"`
	UserCommentTimes     int64    `protobuf:"varint,19,opt,name=userCommentTimes,proto3" json:"userCommentTimes,omitempty"`
	CompanyIssued        string   `protobuf:"bytes,20,opt,name=companyIssued,proto3" json:"companyIssued,omitempty"`
	Country              string   `protobuf:"bytes,21,opt,name=country,proto3" json:"country,omitempty"`
	RatingFinal          float32  `protobuf:"fixed32,22,opt,name=ratingFinal,proto3" json:"ratingFinal,omitempty"`
	Is3D                 int64    `protobuf:"varint,23,opt,name=is3D,proto3" json:"is3D,omitempty"`
	IsDMAX               int64    `protobuf:"varint,24,opt,name=isDMAX,proto3" json:"isDMAX,omitempty"`
	IsFilter             int64    `protobuf:"varint,25,opt,name=isFilter,proto3" json:"isFilter,omitempty"`
	IsHot                int64    `protobuf:"varint,26,opt,name=isHot,proto3" json:"isHot,omitempty"`
	IsIMAX               int64    `protobuf:"varint,27,opt,name=isIMAX,proto3" json:"isIMAX,omitempty"`
	IsIMAX3D             int64    `protobuf:"varint,28,opt,name=isIMAX3D,proto3" json:"isIMAX3D,omitempty"`
	IsNew                int64    `protobuf:"varint,29,opt,name=isNew,proto3" json:"isNew,omitempty"`
	IsTicking            int64    `protobuf:"varint,30,opt,name=isTicking,proto3" json:"isTicking,omitempty"`
	RDay                 int64    `protobuf:"varint,31,opt,name=rDay,proto3" json:"rDay,omitempty"`
	RMonth               int64    `protobuf:"varint,32,opt,name=rMonth,proto3" json:"rMonth,omitempty"`
	RYear                int64    `protobuf:"varint,33,opt,name=rYear,proto3" json:"rYear,omitempty"`
	ActorNames           []string `protobuf:"bytes,34,rep,name=actorNames,proto3" json:"actorNames,omitempty"`
	RYMD                 string   `protobuf:"bytes,35,opt,name=rYMD,proto3" json:"rYMD,omitempty"`                 // 时间格式化
	TicketStatus         string   `protobuf:"bytes,36,opt,name=ticketStatus,proto3" json:"ticketStatus,omitempty"` // 上映状态
}

func (x *Film) Reset() {
	*x = Film{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cms_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Film) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Film) ProtoMessage() {}

func (x *Film) ProtoReflect() protoreflect.Message {
	mi := &file_cms_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Film.ProtoReflect.Descriptor instead.
func (*Film) Descriptor() ([]byte, []int) {
	return file_cms_proto_rawDescGZIP(), []int{6}
}

func (x *Film) GetMovieID() int64 {
	if x != nil {
		return x.MovieID
	}
	return 0
}

func (x *Film) GetImg() string {
	if x != nil {
		return x.Img
	}
	return ""
}

func (x *Film) GetLength() int64 {
	if x != nil {
		return x.Length
	}
	return 0
}

func (x *Film) GetIsSelectSeat() int64 {
	if x != nil {
		return x.IsSelectSeat
	}
	return 0
}

func (x *Film) GetFilmPrice() float32 {
	if x != nil {
		return x.FilmPrice
	}
	return 0
}

func (x *Film) GetFilmScreenwriter() string {
	if x != nil {
		return x.FilmScreenwriter
	}
	return ""
}

func (x *Film) GetFilmDirector() string {
	if x != nil {
		return x.FilmDirector
	}
	return ""
}

func (x *Film) GetCommentNum() int64 {
	if x != nil {
		return x.CommentNum
	}
	return 0
}

func (x *Film) GetTitleCn() string {
	if x != nil {
		return x.TitleCn
	}
	return ""
}

func (x *Film) GetTitleEn() string {
	if x != nil {
		return x.TitleEn
	}
	return ""
}

func (x *Film) GetIsSupportInlineWatch() int64 {
	if x != nil {
		return x.IsSupportInlineWatch
	}
	return 0
}

func (x *Film) GetCreateAt() string {
	if x != nil {
		return x.CreateAt
	}
	return ""
}

func (x *Film) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Film) GetFilmDrama() string {
	if x != nil {
		return x.FilmDrama
	}
	return ""
}

func (x *Film) GetCommonSpecial() string {
	if x != nil {
		return x.CommonSpecial
	}
	return ""
}

func (x *Film) GetUserAccessTimes() int64 {
	if x != nil {
		return x.UserAccessTimes
	}
	return 0
}

func (x *Film) GetFilmBoxoffice() float32 {
	if x != nil {
		return x.FilmBoxoffice
	}
	return 0
}

func (x *Film) GetWantedCount() int64 {
	if x != nil {
		return x.WantedCount
	}
	return 0
}

func (x *Film) GetUserCommentTimes() int64 {
	if x != nil {
		return x.UserCommentTimes
	}
	return 0
}

func (x *Film) GetCompanyIssued() string {
	if x != nil {
		return x.CompanyIssued
	}
	return ""
}

func (x *Film) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *Film) GetRatingFinal() float32 {
	if x != nil {
		return x.RatingFinal
	}
	return 0
}

func (x *Film) GetIs3D() int64 {
	if x != nil {
		return x.Is3D
	}
	return 0
}

func (x *Film) GetIsDMAX() int64 {
	if x != nil {
		return x.IsDMAX
	}
	return 0
}

func (x *Film) GetIsFilter() int64 {
	if x != nil {
		return x.IsFilter
	}
	return 0
}

func (x *Film) GetIsHot() int64 {
	if x != nil {
		return x.IsHot
	}
	return 0
}

func (x *Film) GetIsIMAX() int64 {
	if x != nil {
		return x.IsIMAX
	}
	return 0
}

func (x *Film) GetIsIMAX3D() int64 {
	if x != nil {
		return x.IsIMAX3D
	}
	return 0
}

func (x *Film) GetIsNew() int64 {
	if x != nil {
		return x.IsNew
	}
	return 0
}

func (x *Film) GetIsTicking() int64 {
	if x != nil {
		return x.IsTicking
	}
	return 0
}

func (x *Film) GetRDay() int64 {
	if x != nil {
		return x.RDay
	}
	return 0
}

func (x *Film) GetRMonth() int64 {
	if x != nil {
		return x.RMonth
	}
	return 0
}

func (x *Film) GetRYear() int64 {
	if x != nil {
		return x.RYear
	}
	return 0
}

func (x *Film) GetActorNames() []string {
	if x != nil {
		return x.ActorNames
	}
	return nil
}

func (x *Film) GetRYMD() string {
	if x != nil {
		return x.RYMD
	}
	return ""
}

func (x *Film) GetTicketStatus() string {
	if x != nil {
		return x.TicketStatus
	}
	return ""
}

type AllUsersReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page    int64 `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	AdminID int64 `protobuf:"varint,2,opt,name=adminID,proto3" json:"adminID,omitempty"`
}

func (x *AllUsersReq) Reset() {
	*x = AllUsersReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cms_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllUsersReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllUsersReq) ProtoMessage() {}

func (x *AllUsersReq) ProtoReflect() protoreflect.Message {
	mi := &file_cms_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllUsersReq.ProtoReflect.Descriptor instead.
func (*AllUsersReq) Descriptor() ([]byte, []int) {
	return file_cms_proto_rawDescGZIP(), []int{7}
}

func (x *AllUsersReq) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *AllUsersReq) GetAdminID() int64 {
	if x != nil {
		return x.AdminID
	}
	return 0
}

type AllUsersRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Users []*User `protobuf:"bytes,1,rep,name=users,proto3" json:"users,omitempty"`
	Total int64   `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *AllUsersRsp) Reset() {
	*x = AllUsersRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cms_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllUsersRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllUsersRsp) ProtoMessage() {}

func (x *AllUsersRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cms_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllUsersRsp.ProtoReflect.Descriptor instead.
func (*AllUsersRsp) Descriptor() ([]byte, []int) {
	return file_cms_proto_rawDescGZIP(), []int{8}
}

func (x *AllUsersRsp) GetUsers() []*User {
	if x != nil {
		return x.Users
	}
	return nil
}

func (x *AllUsersRsp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId   int64  `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
	UserName string `protobuf:"bytes,2,opt,name=userName,proto3" json:"userName,omitempty"`
	Password string `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`
	CreateAt string `protobuf:"bytes,4,opt,name=createAt,proto3" json:"createAt,omitempty"`
	Email    string `protobuf:"bytes,5,opt,name=email,proto3" json:"email,omitempty"`
	Phone    string `protobuf:"bytes,6,opt,name=phone,proto3" json:"phone,omitempty"`
}

func (x *User) Reset() {
	*x = User{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cms_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User) ProtoMessage() {}

func (x *User) ProtoReflect() protoreflect.Message {
	mi := &file_cms_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User.ProtoReflect.Descriptor instead.
func (*User) Descriptor() ([]byte, []int) {
	return file_cms_proto_rawDescGZIP(), []int{9}
}

func (x *User) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *User) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *User) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *User) GetCreateAt() string {
	if x != nil {
		return x.CreateAt
	}
	return ""
}

func (x *User) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *User) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

type AllAdminUsersReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page    int64 `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	AdminID int64 `protobuf:"varint,2,opt,name=adminID,proto3" json:"adminID,omitempty"`
}

func (x *AllAdminUsersReq) Reset() {
	*x = AllAdminUsersReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cms_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllAdminUsersReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllAdminUsersReq) ProtoMessage() {}

func (x *AllAdminUsersReq) ProtoReflect() protoreflect.Message {
	mi := &file_cms_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllAdminUsersReq.ProtoReflect.Descriptor instead.
func (*AllAdminUsersReq) Descriptor() ([]byte, []int) {
	return file_cms_proto_rawDescGZIP(), []int{10}
}

func (x *AllAdminUsersReq) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *AllAdminUsersReq) GetAdminID() int64 {
	if x != nil {
		return x.AdminID
	}
	return 0
}

type AllAdminUsersRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AdminUsers []*AdminUser `protobuf:"bytes,1,rep,name=adminUsers,proto3" json:"adminUsers,omitempty"`
	Total      int64        `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *AllAdminUsersRsp) Reset() {
	*x = AllAdminUsersRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cms_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllAdminUsersRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllAdminUsersRsp) ProtoMessage() {}

func (x *AllAdminUsersRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cms_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllAdminUsersRsp.ProtoReflect.Descriptor instead.
func (*AllAdminUsersRsp) Descriptor() ([]byte, []int) {
	return file_cms_proto_rawDescGZIP(), []int{11}
}

func (x *AllAdminUsersRsp) GetAdminUsers() []*AdminUser {
	if x != nil {
		return x.AdminUsers
	}
	return nil
}

func (x *AllAdminUsersRsp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type AdminUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AuID               int64  `protobuf:"varint,1,opt,name=AuID,proto3" json:"AuID,omitempty"`
	AdminName          string `protobuf:"bytes,2,opt,name=AdminName,proto3" json:"AdminName,omitempty"`
	AdminPassword      string `protobuf:"bytes,3,opt,name=AdminPassword,proto3" json:"AdminPassword,omitempty"`
	AdminCinemaID      int64  `protobuf:"varint,4,opt,name=AdminCinemaID,proto3" json:"AdminCinemaID,omitempty"`
	AdminLastLoginTime string `protobuf:"bytes,5,opt,name=AdminLastLoginTime,proto3" json:"AdminLastLoginTime,omitempty"`
	AdminNum           int64  `protobuf:"varint,6,opt,name=AdminNum,proto3" json:"AdminNum,omitempty"`
}

func (x *AdminUser) Reset() {
	*x = AdminUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cms_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminUser) ProtoMessage() {}

func (x *AdminUser) ProtoReflect() protoreflect.Message {
	mi := &file_cms_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminUser.ProtoReflect.Descriptor instead.
func (*AdminUser) Descriptor() ([]byte, []int) {
	return file_cms_proto_rawDescGZIP(), []int{12}
}

func (x *AdminUser) GetAuID() int64 {
	if x != nil {
		return x.AuID
	}
	return 0
}

func (x *AdminUser) GetAdminName() string {
	if x != nil {
		return x.AdminName
	}
	return ""
}

func (x *AdminUser) GetAdminPassword() string {
	if x != nil {
		return x.AdminPassword
	}
	return ""
}

func (x *AdminUser) GetAdminCinemaID() int64 {
	if x != nil {
		return x.AdminCinemaID
	}
	return 0
}

func (x *AdminUser) GetAdminLastLoginTime() string {
	if x != nil {
		return x.AdminLastLoginTime
	}
	return ""
}

func (x *AdminUser) GetAdminNum() int64 {
	if x != nil {
		return x.AdminNum
	}
	return 0
}

type AllCommentsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page    int64 `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	AdminID int64 `protobuf:"varint,2,opt,name=adminID,proto3" json:"adminID,omitempty"`
}

func (x *AllCommentsReq) Reset() {
	*x = AllCommentsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cms_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllCommentsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllCommentsReq) ProtoMessage() {}

func (x *AllCommentsReq) ProtoReflect() protoreflect.Message {
	mi := &file_cms_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllCommentsReq.ProtoReflect.Descriptor instead.
func (*AllCommentsReq) Descriptor() ([]byte, []int) {
	return file_cms_proto_rawDescGZIP(), []int{13}
}

func (x *AllCommentsReq) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *AllCommentsReq) GetAdminID() int64 {
	if x != nil {
		return x.AdminID
	}
	return 0
}

type AllCommentsRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Comments []*Comment `protobuf:"bytes,1,rep,name=comments,proto3" json:"comments,omitempty"`
	Total    int64      `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *AllCommentsRsp) Reset() {
	*x = AllCommentsRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cms_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllCommentsRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllCommentsRsp) ProtoMessage() {}

func (x *AllCommentsRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cms_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllCommentsRsp.ProtoReflect.Descriptor instead.
func (*AllCommentsRsp) Descriptor() ([]byte, []int) {
	return file_cms_proto_rawDescGZIP(), []int{14}
}

func (x *AllCommentsRsp) GetComments() []*Comment {
	if x != nil {
		return x.Comments
	}
	return nil
}

func (x *AllCommentsRsp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type Comment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommentID int64  `protobuf:"varint,1,opt,name=commentID,proto3" json:"commentID,omitempty"`
	FilmID    int64  `protobuf:"varint,2,opt,name=filmID,proto3" json:"filmID,omitempty"`
	Title     string `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	Content   string `protobuf:"bytes,4,opt,name=content,proto3" json:"content,omitempty"`
	HeadImg   string `protobuf:"bytes,5,opt,name=headImg,proto3" json:"headImg,omitempty"`
	NickName  string `protobuf:"bytes,6,opt,name=nickName,proto3" json:"nickName,omitempty"`
	CreateAt  string `protobuf:"bytes,7,opt,name=createAt,proto3" json:"createAt,omitempty"`
	UpNum     int64  `protobuf:"varint,8,opt,name=upNum,proto3" json:"upNum,omitempty"`
}

func (x *Comment) Reset() {
	*x = Comment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cms_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Comment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Comment) ProtoMessage() {}

func (x *Comment) ProtoReflect() protoreflect.Message {
	mi := &file_cms_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Comment.ProtoReflect.Descriptor instead.
func (*Comment) Descriptor() ([]byte, []int) {
	return file_cms_proto_rawDescGZIP(), []int{15}
}

func (x *Comment) GetCommentID() int64 {
	if x != nil {
		return x.CommentID
	}
	return 0
}

func (x *Comment) GetFilmID() int64 {
	if x != nil {
		return x.FilmID
	}
	return 0
}

func (x *Comment) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Comment) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *Comment) GetHeadImg() string {
	if x != nil {
		return x.HeadImg
	}
	return ""
}

func (x *Comment) GetNickName() string {
	if x != nil {
		return x.NickName
	}
	return ""
}

func (x *Comment) GetCreateAt() string {
	if x != nil {
		return x.CreateAt
	}
	return ""
}

func (x *Comment) GetUpNum() int64 {
	if x != nil {
		return x.UpNum
	}
	return 0
}

type AllOrdersReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page    int64 `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	AdminID int64 `protobuf:"varint,2,opt,name=adminID,proto3" json:"adminID,omitempty"`
}

func (x *AllOrdersReq) Reset() {
	*x = AllOrdersReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cms_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllOrdersReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllOrdersReq) ProtoMessage() {}

func (x *AllOrdersReq) ProtoReflect() protoreflect.Message {
	mi := &file_cms_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllOrdersReq.ProtoReflect.Descriptor instead.
func (*AllOrdersReq) Descriptor() ([]byte, []int) {
	return file_cms_proto_rawDescGZIP(), []int{16}
}

func (x *AllOrdersReq) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *AllOrdersReq) GetAdminID() int64 {
	if x != nil {
		return x.AdminID
	}
	return 0
}

type AllOrdersRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Orders []*OrderAll `protobuf:"bytes,1,rep,name=orders,proto3" json:"orders,omitempty"`
	Total  int64       `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *AllOrdersRsp) Reset() {
	*x = AllOrdersRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cms_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllOrdersRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllOrdersRsp) ProtoMessage() {}

func (x *AllOrdersRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cms_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllOrdersRsp.ProtoReflect.Descriptor instead.
func (*AllOrdersRsp) Descriptor() ([]byte, []int) {
	return file_cms_proto_rawDescGZIP(), []int{17}
}

func (x *AllOrdersRsp) GetOrders() []*OrderAll {
	if x != nil {
		return x.Orders
	}
	return nil
}

func (x *AllOrdersRsp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type OrderAll struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderID     int64   `protobuf:"varint,1,opt,name=orderID,proto3" json:"orderID,omitempty"`
	OrderNum    string  `protobuf:"bytes,2,opt,name=orderNum,proto3" json:"orderNum,omitempty"`
	OrderStatus int64   `protobuf:"varint,3,opt,name=orderStatus,proto3" json:"orderStatus,omitempty"`
	OrderPrice  float32 `protobuf:"fixed32,4,opt,name=orderPrice,proto3" json:"orderPrice,omitempty"`
	CreateAt    string  `protobuf:"bytes,5,opt,name=createAt,proto3" json:"createAt,omitempty"`
	PayAt       string  `protobuf:"bytes,6,opt,name=payAt,proto3" json:"payAt,omitempty"`
	MhID        int64   `protobuf:"varint,7,opt,name=mhID,proto3" json:"mhID,omitempty"`
	OrderX      int64   `protobuf:"varint,8,opt,name=orderX,proto3" json:"orderX,omitempty"`
	OrderY      int64   `protobuf:"varint,9,opt,name=orderY,proto3" json:"orderY,omitempty"`
	UserID      int64   `protobuf:"varint,10,opt,name=userID,proto3" json:"userID,omitempty"`
	MovieID     int64   `protobuf:"varint,11,opt,name=movieID,proto3" json:"movieID,omitempty"`
	OrderScore  int64   `protobuf:"varint,12,opt,name=orderScore,proto3" json:"orderScore,omitempty"`
	StartTime   string  `protobuf:"bytes,13,opt,name=startTime,proto3" json:"startTime,omitempty"`
	EndTime     string  `protobuf:"bytes,14,opt,name=endTime,proto3" json:"endTime,omitempty"`
	OrderStat   string  `protobuf:"bytes,15,opt,name=orderStat,proto3" json:"orderStat,omitempty"`
}

func (x *OrderAll) Reset() {
	*x = OrderAll{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cms_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderAll) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderAll) ProtoMessage() {}

func (x *OrderAll) ProtoReflect() protoreflect.Message {
	mi := &file_cms_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderAll.ProtoReflect.Descriptor instead.
func (*OrderAll) Descriptor() ([]byte, []int) {
	return file_cms_proto_rawDescGZIP(), []int{18}
}

func (x *OrderAll) GetOrderID() int64 {
	if x != nil {
		return x.OrderID
	}
	return 0
}

func (x *OrderAll) GetOrderNum() string {
	if x != nil {
		return x.OrderNum
	}
	return ""
}

func (x *OrderAll) GetOrderStatus() int64 {
	if x != nil {
		return x.OrderStatus
	}
	return 0
}

func (x *OrderAll) GetOrderPrice() float32 {
	if x != nil {
		return x.OrderPrice
	}
	return 0
}

func (x *OrderAll) GetCreateAt() string {
	if x != nil {
		return x.CreateAt
	}
	return ""
}

func (x *OrderAll) GetPayAt() string {
	if x != nil {
		return x.PayAt
	}
	return ""
}

func (x *OrderAll) GetMhID() int64 {
	if x != nil {
		return x.MhID
	}
	return 0
}

func (x *OrderAll) GetOrderX() int64 {
	if x != nil {
		return x.OrderX
	}
	return 0
}

func (x *OrderAll) GetOrderY() int64 {
	if x != nil {
		return x.OrderY
	}
	return 0
}

func (x *OrderAll) GetUserID() int64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *OrderAll) GetMovieID() int64 {
	if x != nil {
		return x.MovieID
	}
	return 0
}

func (x *OrderAll) GetOrderScore() int64 {
	if x != nil {
		return x.OrderScore
	}
	return 0
}

func (x *OrderAll) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *OrderAll) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *OrderAll) GetOrderStat() string {
	if x != nil {
		return x.OrderStat
	}
	return ""
}

type AllAddressReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page    int64 `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	AdminID int64 `protobuf:"varint,2,opt,name=adminID,proto3" json:"adminID,omitempty"`
}

func (x *AllAddressReq) Reset() {
	*x = AllAddressReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cms_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllAddressReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllAddressReq) ProtoMessage() {}

func (x *AllAddressReq) ProtoReflect() protoreflect.Message {
	mi := &file_cms_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllAddressReq.ProtoReflect.Descriptor instead.
func (*AllAddressReq) Descriptor() ([]byte, []int) {
	return file_cms_proto_rawDescGZIP(), []int{19}
}

func (x *AllAddressReq) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *AllAddressReq) GetAdminID() int64 {
	if x != nil {
		return x.AdminID
	}
	return 0
}

type AllAddressRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Places []*PlaceAll `protobuf:"bytes,1,rep,name=places,proto3" json:"places,omitempty"`
	Total  int64       `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *AllAddressRsp) Reset() {
	*x = AllAddressRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cms_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllAddressRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllAddressRsp) ProtoMessage() {}

func (x *AllAddressRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cms_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllAddressRsp.ProtoReflect.Descriptor instead.
func (*AllAddressRsp) Descriptor() ([]byte, []int) {
	return file_cms_proto_rawDescGZIP(), []int{20}
}

func (x *AllAddressRsp) GetPlaces() []*PlaceAll {
	if x != nil {
		return x.Places
	}
	return nil
}

func (x *AllAddressRsp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type PlaceAll struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Count       int64  `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	Name        string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	PinyinFull  string `protobuf:"bytes,4,opt,name=pinyinFull,proto3" json:"pinyinFull,omitempty"`
	PinyinShort string `protobuf:"bytes,5,opt,name=pinyinShort,proto3" json:"pinyinShort,omitempty"`
}

func (x *PlaceAll) Reset() {
	*x = PlaceAll{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cms_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlaceAll) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlaceAll) ProtoMessage() {}

func (x *PlaceAll) ProtoReflect() protoreflect.Message {
	mi := &file_cms_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlaceAll.ProtoReflect.Descriptor instead.
func (*PlaceAll) Descriptor() ([]byte, []int) {
	return file_cms_proto_rawDescGZIP(), []int{21}
}

func (x *PlaceAll) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PlaceAll) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *PlaceAll) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PlaceAll) GetPinyinFull() string {
	if x != nil {
		return x.PinyinFull
	}
	return ""
}

func (x *PlaceAll) GetPinyinShort() string {
	if x != nil {
		return x.PinyinShort
	}
	return ""
}

type AddFilmReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AdminID              int64   `protobuf:"varint,1,opt,name=adminID,proto3" json:"adminID,omitempty"`
	Img                  string  `protobuf:"bytes,2,opt,name=img,proto3" json:"img,omitempty"`
	Length               int64   `protobuf:"varint,3,opt,name=length,proto3" json:"length,omitempty"`
	IsSelectSeat         int64   `protobuf:"varint,4,opt,name=isSelectSeat,proto3" json:"isSelectSeat,omitempty"`
	FilmPrice            float32 `protobuf:"fixed32,5,opt,name=filmPrice,proto3" json:"filmPrice,omitempty"`
	FilmScreenwriter     string  `protobuf:"bytes,6,opt,name=filmScreenwriter,proto3" json:"filmScreenwriter,omitempty"`
	FilmDirector         string  `protobuf:"bytes,7,opt,name=filmDirector,proto3" json:"filmDirector,omitempty"`
	CommentNum           int64   `protobuf:"varint,8,opt,name=commentNum,proto3" json:"commentNum,omitempty"`
	TitleCn              string  `protobuf:"bytes,9,opt,name=titleCn,proto3" json:"titleCn,omitempty"`
	TitleEn              string  `protobuf:"bytes,10,opt,name=titleEn,proto3" json:"titleEn,omitempty"`
	IsSupportInlineWatch int64   `protobuf:"varint,11,opt,name=isSupportInlineWatch,proto3" json:"isSupportInlineWatch,omitempty"`
	CreateAt             string  `protobuf:"bytes,12,opt,name=createAt,proto3" json:"createAt,omitempty"`
	Type                 string  `protobuf:"bytes,13,opt,name=type,proto3" json:"type,omitempty"`
	FilmDrama            string  `protobuf:"bytes,14,opt,name=filmDrama,proto3" json:"filmDrama,omitempty"`
	CommonSpecial        string  `protobuf:"bytes,15,opt,name=commonSpecial,proto3" json:"commonSpecial,omitempty"`
	UserAccessTimes      int64   `protobuf:"varint,16,opt,name=userAccessTimes,proto3" json:"userAccessTimes,omitempty"`
	FilmBoxoffice        float32 `protobuf:"fixed32,17,opt,name=filmBoxoffice,proto3" json:"filmBoxoffice,omitempty"`
	WantedCount          int64   `protobuf:"varint,18,opt,name=wantedCount,proto3" json:"wantedCount,omitempty"`
	UserCommentTimes     int64   `protobuf:"varint,19,opt,name=userCommentTimes,proto3" json:"userCommentTimes,omitempty"`
	CompanyIssued        string  `protobuf:"bytes,20,opt,name=companyIssued,proto3" json:"companyIssued,omitempty"`
	Country              string  `protobuf:"bytes,21,opt,name=country,proto3" json:"country,omitempty"`
	RatingFinal          float32 `protobuf:"fixed32,22,opt,name=ratingFinal,proto3" json:"ratingFinal,omitempty"`
	Is3D                 int64   `protobuf:"varint,23,opt,name=is3D,proto3" json:"is3D,omitempty"`
	IsDMAX               int64   `protobuf:"varint,24,opt,name=isDMAX,proto3" json:"isDMAX,omitempty"`
	IsFilter             int64   `protobuf:"varint,25,opt,name=isFilter,proto3" json:"isFilter,omitempty"`
	IsHot                int64   `protobuf:"varint,26,opt,name=isHot,proto3" json:"isHot,omitempty"`
	IsIMAX               int64   `protobuf:"varint,27,opt,name=isIMAX,proto3" json:"isIMAX,omitempty"`
	IsIMAX3D             int64   `protobuf:"varint,28,opt,name=isIMAX3D,proto3" json:"isIMAX3D,omitempty"`
	IsNew                int64   `protobuf:"varint,29,opt,name=isNew,proto3" json:"isNew,omitempty"`
	IsTicking            int64   `protobuf:"varint,30,opt,name=isTicking,proto3" json:"isTicking,omitempty"`
	RDay                 int64   `protobuf:"varint,31,opt,name=rDay,proto3" json:"rDay,omitempty"`
	RMonth               int64   `protobuf:"varint,32,opt,name=rMonth,proto3" json:"rMonth,omitempty"`
	RYear                int64   `protobuf:"varint,33,opt,name=rYear,proto3" json:"rYear,omitempty"`
	FilmDirectorImg      string  `protobuf:"bytes,34,opt,name=filmDirectorImg,proto3" json:"filmDirectorImg,omitempty"`
	FilmActor1           string  `protobuf:"bytes,35,opt,name=filmActor1,proto3" json:"filmActor1,omitempty"`
	FilmActor1Img        string  `protobuf:"bytes,36,opt,name=filmActor1Img,proto3" json:"filmActor1Img,omitempty"`
	FilmActor2           string  `protobuf:"bytes,37,opt,name=filmActor2,proto3" json:"filmActor2,omitempty"`
	FilmActor2Img        string  `protobuf:"bytes,38,opt,name=filmActor2Img,proto3" json:"filmActor2Img,omitempty"`
}

func (x *AddFilmReq) Reset() {
	*x = AddFilmReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cms_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddFilmReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddFilmReq) ProtoMessage() {}

func (x *AddFilmReq) ProtoReflect() protoreflect.Message {
	mi := &file_cms_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddFilmReq.ProtoReflect.Descriptor instead.
func (*AddFilmReq) Descriptor() ([]byte, []int) {
	return file_cms_proto_rawDescGZIP(), []int{22}
}

func (x *AddFilmReq) GetAdminID() int64 {
	if x != nil {
		return x.AdminID
	}
	return 0
}

func (x *AddFilmReq) GetImg() string {
	if x != nil {
		return x.Img
	}
	return ""
}

func (x *AddFilmReq) GetLength() int64 {
	if x != nil {
		return x.Length
	}
	return 0
}

func (x *AddFilmReq) GetIsSelectSeat() int64 {
	if x != nil {
		return x.IsSelectSeat
	}
	return 0
}

func (x *AddFilmReq) GetFilmPrice() float32 {
	if x != nil {
		return x.FilmPrice
	}
	return 0
}

func (x *AddFilmReq) GetFilmScreenwriter() string {
	if x != nil {
		return x.FilmScreenwriter
	}
	return ""
}

func (x *AddFilmReq) GetFilmDirector() string {
	if x != nil {
		return x.FilmDirector
	}
	return ""
}

func (x *AddFilmReq) GetCommentNum() int64 {
	if x != nil {
		return x.CommentNum
	}
	return 0
}

func (x *AddFilmReq) GetTitleCn() string {
	if x != nil {
		return x.TitleCn
	}
	return ""
}

func (x *AddFilmReq) GetTitleEn() string {
	if x != nil {
		return x.TitleEn
	}
	return ""
}

func (x *AddFilmReq) GetIsSupportInlineWatch() int64 {
	if x != nil {
		return x.IsSupportInlineWatch
	}
	return 0
}

func (x *AddFilmReq) GetCreateAt() string {
	if x != nil {
		return x.CreateAt
	}
	return ""
}

func (x *AddFilmReq) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *AddFilmReq) GetFilmDrama() string {
	if x != nil {
		return x.FilmDrama
	}
	return ""
}

func (x *AddFilmReq) GetCommonSpecial() string {
	if x != nil {
		return x.CommonSpecial
	}
	return ""
}

func (x *AddFilmReq) GetUserAccessTimes() int64 {
	if x != nil {
		return x.UserAccessTimes
	}
	return 0
}

func (x *AddFilmReq) GetFilmBoxoffice() float32 {
	if x != nil {
		return x.FilmBoxoffice
	}
	return 0
}

func (x *AddFilmReq) GetWantedCount() int64 {
	if x != nil {
		return x.WantedCount
	}
	return 0
}

func (x *AddFilmReq) GetUserCommentTimes() int64 {
	if x != nil {
		return x.UserCommentTimes
	}
	return 0
}

func (x *AddFilmReq) GetCompanyIssued() string {
	if x != nil {
		return x.CompanyIssued
	}
	return ""
}

func (x *AddFilmReq) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *AddFilmReq) GetRatingFinal() float32 {
	if x != nil {
		return x.RatingFinal
	}
	return 0
}

func (x *AddFilmReq) GetIs3D() int64 {
	if x != nil {
		return x.Is3D
	}
	return 0
}

func (x *AddFilmReq) GetIsDMAX() int64 {
	if x != nil {
		return x.IsDMAX
	}
	return 0
}

func (x *AddFilmReq) GetIsFilter() int64 {
	if x != nil {
		return x.IsFilter
	}
	return 0
}

func (x *AddFilmReq) GetIsHot() int64 {
	if x != nil {
		return x.IsHot
	}
	return 0
}

func (x *AddFilmReq) GetIsIMAX() int64 {
	if x != nil {
		return x.IsIMAX
	}
	return 0
}

func (x *AddFilmReq) GetIsIMAX3D() int64 {
	if x != nil {
		return x.IsIMAX3D
	}
	return 0
}

func (x *AddFilmReq) GetIsNew() int64 {
	if x != nil {
		return x.IsNew
	}
	return 0
}

func (x *AddFilmReq) GetIsTicking() int64 {
	if x != nil {
		return x.IsTicking
	}
	return 0
}

func (x *AddFilmReq) GetRDay() int64 {
	if x != nil {
		return x.RDay
	}
	return 0
}

func (x *AddFilmReq) GetRMonth() int64 {
	if x != nil {
		return x.RMonth
	}
	return 0
}

func (x *AddFilmReq) GetRYear() int64 {
	if x != nil {
		return x.RYear
	}
	return 0
}

func (x *AddFilmReq) GetFilmDirectorImg() string {
	if x != nil {
		return x.FilmDirectorImg
	}
	return ""
}

func (x *AddFilmReq) GetFilmActor1() string {
	if x != nil {
		return x.FilmActor1
	}
	return ""
}

func (x *AddFilmReq) GetFilmActor1Img() string {
	if x != nil {
		return x.FilmActor1Img
	}
	return ""
}

func (x *AddFilmReq) GetFilmActor2() string {
	if x != nil {
		return x.FilmActor2
	}
	return ""
}

func (x *AddFilmReq) GetFilmActor2Img() string {
	if x != nil {
		return x.FilmActor2Img
	}
	return ""
}

type AddFilmRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AddFilmRsp) Reset() {
	*x = AddFilmRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cms_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddFilmRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddFilmRsp) ProtoMessage() {}

func (x *AddFilmRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cms_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddFilmRsp.ProtoReflect.Descriptor instead.
func (*AddFilmRsp) Descriptor() ([]byte, []int) {
	return file_cms_proto_rawDescGZIP(), []int{23}
}

type UpdateFilmReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MovieID       int64   `protobuf:"varint,1,opt,name=movieID,proto3" json:"movieID,omitempty"`
	Img           string  `protobuf:"bytes,2,opt,name=img,proto3" json:"img,omitempty"`
	Length        int64   `protobuf:"varint,3,opt,name=length,proto3" json:"length,omitempty"`
	FilmPrice     float32 `protobuf:"fixed32,4,opt,name=filmPrice,proto3" json:"filmPrice,omitempty"`
	FilmDirector  string  `protobuf:"bytes,5,opt,name=filmDirector,proto3" json:"filmDirector,omitempty"`
	TitleCn       string  `protobuf:"bytes,6,opt,name=titleCn,proto3" json:"titleCn,omitempty"`
	TitleEn       string  `protobuf:"bytes,7,opt,name=titleEn,proto3" json:"titleEn,omitempty"`
	Type          string  `protobuf:"bytes,8,opt,name=type,proto3" json:"type,omitempty"`
	FilmDrama     string  `protobuf:"bytes,9,opt,name=filmDrama,proto3" json:"filmDrama,omitempty"`
	CommonSpecial string  `protobuf:"bytes,10,opt,name=commonSpecial,proto3" json:"commonSpecial,omitempty"`
	CompanyIssued string  `protobuf:"bytes,11,opt,name=companyIssued,proto3" json:"companyIssued,omitempty"`
	Country       string  `protobuf:"bytes,12,opt,name=country,proto3" json:"country,omitempty"`
	RDay          int64   `protobuf:"varint,13,opt,name=rDay,proto3" json:"rDay,omitempty"`
	RMonth        int64   `protobuf:"varint,14,opt,name=rMonth,proto3" json:"rMonth,omitempty"`
	RYear         int64   `protobuf:"varint,15,opt,name=rYear,proto3" json:"rYear,omitempty"`
	RYMD          string  `protobuf:"bytes,16,opt,name=rYMD,proto3" json:"rYMD,omitempty"`
	AdminID       int64   `protobuf:"varint,17,opt,name=adminID,proto3" json:"adminID,omitempty"`
	IsTicking     int64   `protobuf:"varint,18,opt,name=isTicking,proto3" json:"isTicking,omitempty"`
}

func (x *UpdateFilmReq) Reset() {
	*x = UpdateFilmReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cms_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateFilmReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateFilmReq) ProtoMessage() {}

func (x *UpdateFilmReq) ProtoReflect() protoreflect.Message {
	mi := &file_cms_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateFilmReq.ProtoReflect.Descriptor instead.
func (*UpdateFilmReq) Descriptor() ([]byte, []int) {
	return file_cms_proto_rawDescGZIP(), []int{24}
}

func (x *UpdateFilmReq) GetMovieID() int64 {
	if x != nil {
		return x.MovieID
	}
	return 0
}

func (x *UpdateFilmReq) GetImg() string {
	if x != nil {
		return x.Img
	}
	return ""
}

func (x *UpdateFilmReq) GetLength() int64 {
	if x != nil {
		return x.Length
	}
	return 0
}

func (x *UpdateFilmReq) GetFilmPrice() float32 {
	if x != nil {
		return x.FilmPrice
	}
	return 0
}

func (x *UpdateFilmReq) GetFilmDirector() string {
	if x != nil {
		return x.FilmDirector
	}
	return ""
}

func (x *UpdateFilmReq) GetTitleCn() string {
	if x != nil {
		return x.TitleCn
	}
	return ""
}

func (x *UpdateFilmReq) GetTitleEn() string {
	if x != nil {
		return x.TitleEn
	}
	return ""
}

func (x *UpdateFilmReq) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *UpdateFilmReq) GetFilmDrama() string {
	if x != nil {
		return x.FilmDrama
	}
	return ""
}

func (x *UpdateFilmReq) GetCommonSpecial() string {
	if x != nil {
		return x.CommonSpecial
	}
	return ""
}

func (x *UpdateFilmReq) GetCompanyIssued() string {
	if x != nil {
		return x.CompanyIssued
	}
	return ""
}

func (x *UpdateFilmReq) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *UpdateFilmReq) GetRDay() int64 {
	if x != nil {
		return x.RDay
	}
	return 0
}

func (x *UpdateFilmReq) GetRMonth() int64 {
	if x != nil {
		return x.RMonth
	}
	return 0
}

func (x *UpdateFilmReq) GetRYear() int64 {
	if x != nil {
		return x.RYear
	}
	return 0
}

func (x *UpdateFilmReq) GetRYMD() string {
	if x != nil {
		return x.RYMD
	}
	return ""
}

func (x *UpdateFilmReq) GetAdminID() int64 {
	if x != nil {
		return x.AdminID
	}
	return 0
}

func (x *UpdateFilmReq) GetIsTicking() int64 {
	if x != nil {
		return x.IsTicking
	}
	return 0
}

type UpdateFilmRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateFilmRsp) Reset() {
	*x = UpdateFilmRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cms_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateFilmRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateFilmRsp) ProtoMessage() {}

func (x *UpdateFilmRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cms_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateFilmRsp.ProtoReflect.Descriptor instead.
func (*UpdateFilmRsp) Descriptor() ([]byte, []int) {
	return file_cms_proto_rawDescGZIP(), []int{25}
}

type DeleteFilmReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MovieID int64 `protobuf:"varint,1,opt,name=movieID,proto3" json:"movieID,omitempty"`
	AdminID int64 `protobuf:"varint,2,opt,name=adminID,proto3" json:"adminID,omitempty"`
}

func (x *DeleteFilmReq) Reset() {
	*x = DeleteFilmReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cms_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteFilmReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteFilmReq) ProtoMessage() {}

func (x *DeleteFilmReq) ProtoReflect() protoreflect.Message {
	mi := &file_cms_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteFilmReq.ProtoReflect.Descriptor instead.
func (*DeleteFilmReq) Descriptor() ([]byte, []int) {
	return file_cms_proto_rawDescGZIP(), []int{26}
}

func (x *DeleteFilmReq) GetMovieID() int64 {
	if x != nil {
		return x.MovieID
	}
	return 0
}

func (x *DeleteFilmReq) GetAdminID() int64 {
	if x != nil {
		return x.AdminID
	}
	return 0
}

type DeleteFilmRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteFilmRsp) Reset() {
	*x = DeleteFilmRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cms_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteFilmRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteFilmRsp) ProtoMessage() {}

func (x *DeleteFilmRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cms_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteFilmRsp.ProtoReflect.Descriptor instead.
func (*DeleteFilmRsp) Descriptor() ([]byte, []int) {
	return file_cms_proto_rawDescGZIP(), []int{27}
}

type AddAdminUserReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AdminID       int64  `protobuf:"varint,1,opt,name=adminID,proto3" json:"adminID,omitempty"`
	AdminName     string `protobuf:"bytes,2,opt,name=AdminName,proto3" json:"AdminName,omitempty"`
	AdminPassword string `protobuf:"bytes,3,opt,name=AdminPassword,proto3" json:"AdminPassword,omitempty"`
	AdminCinemaID int64  `protobuf:"varint,4,opt,name=AdminCinemaID,proto3" json:"AdminCinemaID,omitempty"`
	AdminNum      int64  `protobuf:"varint,6,opt,name=AdminNum,proto3" json:"AdminNum,omitempty"`
}

func (x *AddAdminUserReq) Reset() {
	*x = AddAdminUserReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cms_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddAdminUserReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddAdminUserReq) ProtoMessage() {}

func (x *AddAdminUserReq) ProtoReflect() protoreflect.Message {
	mi := &file_cms_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddAdminUserReq.ProtoReflect.Descriptor instead.
func (*AddAdminUserReq) Descriptor() ([]byte, []int) {
	return file_cms_proto_rawDescGZIP(), []int{28}
}

func (x *AddAdminUserReq) GetAdminID() int64 {
	if x != nil {
		return x.AdminID
	}
	return 0
}

func (x *AddAdminUserReq) GetAdminName() string {
	if x != nil {
		return x.AdminName
	}
	return ""
}

func (x *AddAdminUserReq) GetAdminPassword() string {
	if x != nil {
		return x.AdminPassword
	}
	return ""
}

func (x *AddAdminUserReq) GetAdminCinemaID() int64 {
	if x != nil {
		return x.AdminCinemaID
	}
	return 0
}

func (x *AddAdminUserReq) GetAdminNum() int64 {
	if x != nil {
		return x.AdminNum
	}
	return 0
}

type AddAdminUserRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AddAdminUserRsp) Reset() {
	*x = AddAdminUserRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cms_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddAdminUserRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddAdminUserRsp) ProtoMessage() {}

func (x *AddAdminUserRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cms_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddAdminUserRsp.ProtoReflect.Descriptor instead.
func (*AddAdminUserRsp) Descriptor() ([]byte, []int) {
	return file_cms_proto_rawDescGZIP(), []int{29}
}

type AddAddressReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AdminID     int64  `protobuf:"varint,1,opt,name=adminID,proto3" json:"adminID,omitempty"`
	Count       int64  `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	Name        string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	PinyinFull  string `protobuf:"bytes,4,opt,name=pinyinFull,proto3" json:"pinyinFull,omitempty"`
	PinyinShort string `protobuf:"bytes,5,opt,name=pinyinShort,proto3" json:"pinyinShort,omitempty"`
}

func (x *AddAddressReq) Reset() {
	*x = AddAddressReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cms_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddAddressReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddAddressReq) ProtoMessage() {}

func (x *AddAddressReq) ProtoReflect() protoreflect.Message {
	mi := &file_cms_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddAddressReq.ProtoReflect.Descriptor instead.
func (*AddAddressReq) Descriptor() ([]byte, []int) {
	return file_cms_proto_rawDescGZIP(), []int{30}
}

func (x *AddAddressReq) GetAdminID() int64 {
	if x != nil {
		return x.AdminID
	}
	return 0
}

func (x *AddAddressReq) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *AddAddressReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AddAddressReq) GetPinyinFull() string {
	if x != nil {
		return x.PinyinFull
	}
	return ""
}

func (x *AddAddressReq) GetPinyinShort() string {
	if x != nil {
		return x.PinyinShort
	}
	return ""
}

type AddAddressRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AddAddressRsp) Reset() {
	*x = AddAddressRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cms_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddAddressRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddAddressRsp) ProtoMessage() {}

func (x *AddAddressRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cms_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddAddressRsp.ProtoReflect.Descriptor instead.
func (*AddAddressRsp) Descriptor() ([]byte, []int) {
	return file_cms_proto_rawDescGZIP(), []int{31}
}

type UpdateAddressReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Count       int64  `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	Name        string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	PinyinFull  string `protobuf:"bytes,4,opt,name=pinyinFull,proto3" json:"pinyinFull,omitempty"`
	PinyinShort string `protobuf:"bytes,5,opt,name=pinyinShort,proto3" json:"pinyinShort,omitempty"`
	AdminID     int64  `protobuf:"varint,6,opt,name=adminID,proto3" json:"adminID,omitempty"`
}

func (x *UpdateAddressReq) Reset() {
	*x = UpdateAddressReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cms_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAddressReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAddressReq) ProtoMessage() {}

func (x *UpdateAddressReq) ProtoReflect() protoreflect.Message {
	mi := &file_cms_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAddressReq.ProtoReflect.Descriptor instead.
func (*UpdateAddressReq) Descriptor() ([]byte, []int) {
	return file_cms_proto_rawDescGZIP(), []int{32}
}

func (x *UpdateAddressReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateAddressReq) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *UpdateAddressReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateAddressReq) GetPinyinFull() string {
	if x != nil {
		return x.PinyinFull
	}
	return ""
}

func (x *UpdateAddressReq) GetPinyinShort() string {
	if x != nil {
		return x.PinyinShort
	}
	return ""
}

func (x *UpdateAddressReq) GetAdminID() int64 {
	if x != nil {
		return x.AdminID
	}
	return 0
}

type UpdateAddressRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateAddressRsp) Reset() {
	*x = UpdateAddressRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cms_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAddressRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAddressRsp) ProtoMessage() {}

func (x *UpdateAddressRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cms_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAddressRsp.ProtoReflect.Descriptor instead.
func (*UpdateAddressRsp) Descriptor() ([]byte, []int) {
	return file_cms_proto_rawDescGZIP(), []int{33}
}

type DeleteAddressReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	AdminID int64 `protobuf:"varint,2,opt,name=adminID,proto3" json:"adminID,omitempty"`
}

func (x *DeleteAddressReq) Reset() {
	*x = DeleteAddressReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cms_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAddressReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAddressReq) ProtoMessage() {}

func (x *DeleteAddressReq) ProtoReflect() protoreflect.Message {
	mi := &file_cms_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAddressReq.ProtoReflect.Descriptor instead.
func (*DeleteAddressReq) Descriptor() ([]byte, []int) {
	return file_cms_proto_rawDescGZIP(), []int{34}
}

func (x *DeleteAddressReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DeleteAddressReq) GetAdminID() int64 {
	if x != nil {
		return x.AdminID
	}
	return 0
}

type DeleteAddressRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteAddressRsp) Reset() {
	*x = DeleteAddressRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cms_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAddressRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAddressRsp) ProtoMessage() {}

func (x *DeleteAddressRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cms_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAddressRsp.ProtoReflect.Descriptor instead.
func (*DeleteAddressRsp) Descriptor() ([]byte, []int) {
	return file_cms_proto_rawDescGZIP(), []int{35}
}

type DeleteAdminUserReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AuID    int64 `protobuf:"varint,1,opt,name=AuID,proto3" json:"AuID,omitempty"`
	AdminID int64 `protobuf:"varint,2,opt,name=adminID,proto3" json:"adminID,omitempty"`
}

func (x *DeleteAdminUserReq) Reset() {
	*x = DeleteAdminUserReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cms_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAdminUserReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAdminUserReq) ProtoMessage() {}

func (x *DeleteAdminUserReq) ProtoReflect() protoreflect.Message {
	mi := &file_cms_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAdminUserReq.ProtoReflect.Descriptor instead.
func (*DeleteAdminUserReq) Descriptor() ([]byte, []int) {
	return file_cms_proto_rawDescGZIP(), []int{36}
}

func (x *DeleteAdminUserReq) GetAuID() int64 {
	if x != nil {
		return x.AuID
	}
	return 0
}

func (x *DeleteAdminUserReq) GetAdminID() int64 {
	if x != nil {
		return x.AdminID
	}
	return 0
}

type DeleteAdminUserRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteAdminUserRsp) Reset() {
	*x = DeleteAdminUserRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cms_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAdminUserRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAdminUserRsp) ProtoMessage() {}

func (x *DeleteAdminUserRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cms_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAdminUserRsp.ProtoReflect.Descriptor instead.
func (*DeleteAdminUserRsp) Descriptor() ([]byte, []int) {
	return file_cms_proto_rawDescGZIP(), []int{37}
}

type AllMovieHallReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page    int64 `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	AdminID int64 `protobuf:"varint,2,opt,name=adminID,proto3" json:"adminID,omitempty"`
}

func (x *AllMovieHallReq) Reset() {
	*x = AllMovieHallReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cms_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllMovieHallReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllMovieHallReq) ProtoMessage() {}

func (x *AllMovieHallReq) ProtoReflect() protoreflect.Message {
	mi := &file_cms_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllMovieHallReq.ProtoReflect.Descriptor instead.
func (*AllMovieHallReq) Descriptor() ([]byte, []int) {
	return file_cms_proto_rawDescGZIP(), []int{38}
}

func (x *AllMovieHallReq) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *AllMovieHallReq) GetAdminID() int64 {
	if x != nil {
		return x.AdminID
	}
	return 0
}

type MovieHall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MhId      int64  `protobuf:"varint,1,opt,name=mhId,proto3" json:"mhId,omitempty"`
	MhName    string `protobuf:"bytes,2,opt,name=mhName,proto3" json:"mhName,omitempty"`
	MhAddress string `protobuf:"bytes,3,opt,name=mhAddress,proto3" json:"mhAddress,omitempty"`
	CinemaId  int64  `protobuf:"varint,4,opt,name=cinemaId,proto3" json:"cinemaId,omitempty"`
}

func (x *MovieHall) Reset() {
	*x = MovieHall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cms_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MovieHall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MovieHall) ProtoMessage() {}

func (x *MovieHall) ProtoReflect() protoreflect.Message {
	mi := &file_cms_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MovieHall.ProtoReflect.Descriptor instead.
func (*MovieHall) Descriptor() ([]byte, []int) {
	return file_cms_proto_rawDescGZIP(), []int{39}
}

func (x *MovieHall) GetMhId() int64 {
	if x != nil {
		return x.MhId
	}
	return 0
}

func (x *MovieHall) GetMhName() string {
	if x != nil {
		return x.MhName
	}
	return ""
}

func (x *MovieHall) GetMhAddress() string {
	if x != nil {
		return x.MhAddress
	}
	return ""
}

func (x *MovieHall) GetCinemaId() int64 {
	if x != nil {
		return x.CinemaId
	}
	return 0
}

type AllMovieHallRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MovieHalls []*MovieHall `protobuf:"bytes,1,rep,name=movieHalls,proto3" json:"movieHalls,omitempty"`
	Total      int64        `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *AllMovieHallRsp) Reset() {
	*x = AllMovieHallRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cms_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllMovieHallRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllMovieHallRsp) ProtoMessage() {}

func (x *AllMovieHallRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cms_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllMovieHallRsp.ProtoReflect.Descriptor instead.
func (*AllMovieHallRsp) Descriptor() ([]byte, []int) {
	return file_cms_proto_rawDescGZIP(), []int{40}
}

func (x *AllMovieHallRsp) GetMovieHalls() []*MovieHall {
	if x != nil {
		return x.MovieHalls
	}
	return nil
}

func (x *AllMovieHallRsp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type AddMovieHallReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AdminID   int64  `protobuf:"varint,1,opt,name=adminID,proto3" json:"adminID,omitempty"`
	MhName    string `protobuf:"bytes,2,opt,name=mhName,proto3" json:"mhName,omitempty"`
	MhAddress string `protobuf:"bytes,3,opt,name=mhAddress,proto3" json:"mhAddress,omitempty"`
	CinemaId  int64  `protobuf:"varint,4,opt,name=cinemaId,proto3" json:"cinemaId,omitempty"`
}

func (x *AddMovieHallReq) Reset() {
	*x = AddMovieHallReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cms_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddMovieHallReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddMovieHallReq) ProtoMessage() {}

func (x *AddMovieHallReq) ProtoReflect() protoreflect.Message {
	mi := &file_cms_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddMovieHallReq.ProtoReflect.Descriptor instead.
func (*AddMovieHallReq) Descriptor() ([]byte, []int) {
	return file_cms_proto_rawDescGZIP(), []int{41}
}

func (x *AddMovieHallReq) GetAdminID() int64 {
	if x != nil {
		return x.AdminID
	}
	return 0
}

func (x *AddMovieHallReq) GetMhName() string {
	if x != nil {
		return x.MhName
	}
	return ""
}

func (x *AddMovieHallReq) GetMhAddress() string {
	if x != nil {
		return x.MhAddress
	}
	return ""
}

func (x *AddMovieHallReq) GetCinemaId() int64 {
	if x != nil {
		return x.CinemaId
	}
	return 0
}

type AddMovieHallRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AddMovieHallRsp) Reset() {
	*x = AddMovieHallRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cms_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddMovieHallRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddMovieHallRsp) ProtoMessage() {}

func (x *AddMovieHallRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cms_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddMovieHallRsp.ProtoReflect.Descriptor instead.
func (*AddMovieHallRsp) Descriptor() ([]byte, []int) {
	return file_cms_proto_rawDescGZIP(), []int{42}
}

type UpdateMovieHallReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AdminID   int64  `protobuf:"varint,1,opt,name=adminID,proto3" json:"adminID,omitempty"`
	MhName    string `protobuf:"bytes,2,opt,name=mhName,proto3" json:"mhName,omitempty"`
	MhAddress string `protobuf:"bytes,3,opt,name=mhAddress,proto3" json:"mhAddress,omitempty"`
	CinemaId  int64  `protobuf:"varint,4,opt,name=cinemaId,proto3" json:"cinemaId,omitempty"`
	MhId      int64  `protobuf:"varint,5,opt,name=mhId,proto3" json:"mhId,omitempty"`
}

func (x *UpdateMovieHallReq) Reset() {
	*x = UpdateMovieHallReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cms_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateMovieHallReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMovieHallReq) ProtoMessage() {}

func (x *UpdateMovieHallReq) ProtoReflect() protoreflect.Message {
	mi := &file_cms_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMovieHallReq.ProtoReflect.Descriptor instead.
func (*UpdateMovieHallReq) Descriptor() ([]byte, []int) {
	return file_cms_proto_rawDescGZIP(), []int{43}
}

func (x *UpdateMovieHallReq) GetAdminID() int64 {
	if x != nil {
		return x.AdminID
	}
	return 0
}

func (x *UpdateMovieHallReq) GetMhName() string {
	if x != nil {
		return x.MhName
	}
	return ""
}

func (x *UpdateMovieHallReq) GetMhAddress() string {
	if x != nil {
		return x.MhAddress
	}
	return ""
}

func (x *UpdateMovieHallReq) GetCinemaId() int64 {
	if x != nil {
		return x.CinemaId
	}
	return 0
}

func (x *UpdateMovieHallReq) GetMhId() int64 {
	if x != nil {
		return x.MhId
	}
	return 0
}

type UpdateMovieHallRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateMovieHallRsp) Reset() {
	*x = UpdateMovieHallRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cms_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateMovieHallRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMovieHallRsp) ProtoMessage() {}

func (x *UpdateMovieHallRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cms_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMovieHallRsp.ProtoReflect.Descriptor instead.
func (*UpdateMovieHallRsp) Descriptor() ([]byte, []int) {
	return file_cms_proto_rawDescGZIP(), []int{44}
}

type DeleteMovieHallReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AdminID int64 `protobuf:"varint,1,opt,name=adminID,proto3" json:"adminID,omitempty"`
	MhId    int64 `protobuf:"varint,2,opt,name=mhId,proto3" json:"mhId,omitempty"`
}

func (x *DeleteMovieHallReq) Reset() {
	*x = DeleteMovieHallReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cms_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteMovieHallReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteMovieHallReq) ProtoMessage() {}

func (x *DeleteMovieHallReq) ProtoReflect() protoreflect.Message {
	mi := &file_cms_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteMovieHallReq.ProtoReflect.Descriptor instead.
func (*DeleteMovieHallReq) Descriptor() ([]byte, []int) {
	return file_cms_proto_rawDescGZIP(), []int{45}
}

func (x *DeleteMovieHallReq) GetAdminID() int64 {
	if x != nil {
		return x.AdminID
	}
	return 0
}

func (x *DeleteMovieHallReq) GetMhId() int64 {
	if x != nil {
		return x.MhId
	}
	return 0
}

type DeleteMovieHallRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteMovieHallRsp) Reset() {
	*x = DeleteMovieHallRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cms_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteMovieHallRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteMovieHallRsp) ProtoMessage() {}

func (x *DeleteMovieHallRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cms_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteMovieHallRsp.ProtoReflect.Descriptor instead.
func (*DeleteMovieHallRsp) Descriptor() ([]byte, []int) {
	return file_cms_proto_rawDescGZIP(), []int{46}
}

type AllCinemaFilmsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page    int64 `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	AdminID int64 `protobuf:"varint,2,opt,name=adminID,proto3" json:"adminID,omitempty"`
}

func (x *AllCinemaFilmsReq) Reset() {
	*x = AllCinemaFilmsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cms_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllCinemaFilmsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllCinemaFilmsReq) ProtoMessage() {}

func (x *AllCinemaFilmsReq) ProtoReflect() protoreflect.Message {
	mi := &file_cms_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllCinemaFilmsReq.ProtoReflect.Descriptor instead.
func (*AllCinemaFilmsReq) Descriptor() ([]byte, []int) {
	return file_cms_proto_rawDescGZIP(), []int{47}
}

func (x *AllCinemaFilmsReq) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *AllCinemaFilmsReq) GetAdminID() int64 {
	if x != nil {
		return x.AdminID
	}
	return 0
}

type CinemaFilm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CinemaID         int64   `protobuf:"varint,1,opt,name=cinemaID,proto3" json:"cinemaID,omitempty"`
	FilmID           int64   `protobuf:"varint,2,opt,name=filmID,proto3" json:"filmID,omitempty"`
	HallID           int64   `protobuf:"varint,3,opt,name=hallID,proto3" json:"hallID,omitempty"`
	FilmName         string  `protobuf:"bytes,4,opt,name=filmName,proto3" json:"filmName,omitempty"`
	CinemaName       string  `protobuf:"bytes,5,opt,name=cinemaName,proto3" json:"cinemaName,omitempty"`
	ReleaseTimeYear  int64   `protobuf:"varint,6,opt,name=releaseTimeYear,proto3" json:"releaseTimeYear,omitempty"`
	ReleaseTimeMonth int64   `protobuf:"varint,7,opt,name=releaseTimeMonth,proto3" json:"releaseTimeMonth,omitempty"`
	ReleaseTimeDay   int64   `protobuf:"varint,8,opt,name=releaseTimeDay,proto3" json:"releaseTimeDay,omitempty"`
	ReleaseTime      string  `protobuf:"bytes,9,opt,name=releaseTime,proto3" json:"releaseTime,omitempty"`
	ReleaseType      string  `protobuf:"bytes,10,opt,name=releaseType,proto3" json:"releaseType,omitempty"`
	ReleaseAdd       string  `protobuf:"bytes,11,opt,name=releaseAdd,proto3" json:"releaseAdd,omitempty"`
	CfID             int64   `protobuf:"varint,12,opt,name=cfID,proto3" json:"cfID,omitempty"`
	Length           int64   `protobuf:"varint,13,opt,name=length,proto3" json:"length,omitempty"`
	ReleaseDiscount  float32 `protobuf:"fixed32,14,opt,name=releaseDiscount,proto3" json:"releaseDiscount,omitempty"`
	HallName         string  `protobuf:"bytes,15,opt,name=hallName,proto3" json:"hallName,omitempty"`
}

func (x *CinemaFilm) Reset() {
	*x = CinemaFilm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cms_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CinemaFilm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CinemaFilm) ProtoMessage() {}

func (x *CinemaFilm) ProtoReflect() protoreflect.Message {
	mi := &file_cms_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CinemaFilm.ProtoReflect.Descriptor instead.
func (*CinemaFilm) Descriptor() ([]byte, []int) {
	return file_cms_proto_rawDescGZIP(), []int{48}
}

func (x *CinemaFilm) GetCinemaID() int64 {
	if x != nil {
		return x.CinemaID
	}
	return 0
}

func (x *CinemaFilm) GetFilmID() int64 {
	if x != nil {
		return x.FilmID
	}
	return 0
}

func (x *CinemaFilm) GetHallID() int64 {
	if x != nil {
		return x.HallID
	}
	return 0
}

func (x *CinemaFilm) GetFilmName() string {
	if x != nil {
		return x.FilmName
	}
	return ""
}

func (x *CinemaFilm) GetCinemaName() string {
	if x != nil {
		return x.CinemaName
	}
	return ""
}

func (x *CinemaFilm) GetReleaseTimeYear() int64 {
	if x != nil {
		return x.ReleaseTimeYear
	}
	return 0
}

func (x *CinemaFilm) GetReleaseTimeMonth() int64 {
	if x != nil {
		return x.ReleaseTimeMonth
	}
	return 0
}

func (x *CinemaFilm) GetReleaseTimeDay() int64 {
	if x != nil {
		return x.ReleaseTimeDay
	}
	return 0
}

func (x *CinemaFilm) GetReleaseTime() string {
	if x != nil {
		return x.ReleaseTime
	}
	return ""
}

func (x *CinemaFilm) GetReleaseType() string {
	if x != nil {
		return x.ReleaseType
	}
	return ""
}

func (x *CinemaFilm) GetReleaseAdd() string {
	if x != nil {
		return x.ReleaseAdd
	}
	return ""
}

func (x *CinemaFilm) GetCfID() int64 {
	if x != nil {
		return x.CfID
	}
	return 0
}

func (x *CinemaFilm) GetLength() int64 {
	if x != nil {
		return x.Length
	}
	return 0
}

func (x *CinemaFilm) GetReleaseDiscount() float32 {
	if x != nil {
		return x.ReleaseDiscount
	}
	return 0
}

func (x *CinemaFilm) GetHallName() string {
	if x != nil {
		return x.HallName
	}
	return ""
}

type AllCinemaFilmsRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CinemaFilms []*CinemaFilm `protobuf:"bytes,1,rep,name=cinemaFilms,proto3" json:"cinemaFilms,omitempty"`
	Total       int64         `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *AllCinemaFilmsRsp) Reset() {
	*x = AllCinemaFilmsRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cms_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllCinemaFilmsRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllCinemaFilmsRsp) ProtoMessage() {}

func (x *AllCinemaFilmsRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cms_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllCinemaFilmsRsp.ProtoReflect.Descriptor instead.
func (*AllCinemaFilmsRsp) Descriptor() ([]byte, []int) {
	return file_cms_proto_rawDescGZIP(), []int{49}
}

func (x *AllCinemaFilmsRsp) GetCinemaFilms() []*CinemaFilm {
	if x != nil {
		return x.CinemaFilms
	}
	return nil
}

func (x *AllCinemaFilmsRsp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type AddCinemaFilmReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CinemaID         int64   `protobuf:"varint,1,opt,name=cinemaID,proto3" json:"cinemaID,omitempty"`
	MovieID          int64   `protobuf:"varint,2,opt,name=movieID,proto3" json:"movieID,omitempty"`
	HallID           int64   `protobuf:"varint,3,opt,name=hallID,proto3" json:"hallID,omitempty"`
	TitleCn          string  `protobuf:"bytes,4,opt,name=titleCn,proto3" json:"titleCn,omitempty"`
	CinemaName       string  `protobuf:"bytes,5,opt,name=cinemaName,proto3" json:"cinemaName,omitempty"`
	ReleaseTimeYear  int64   `protobuf:"varint,6,opt,name=releaseTimeYear,proto3" json:"releaseTimeYear,omitempty"`
	ReleaseTimeMonth int64   `protobuf:"varint,7,opt,name=releaseTimeMonth,proto3" json:"releaseTimeMonth,omitempty"`
	ReleaseTimeDay   int64   `protobuf:"varint,8,opt,name=releaseTimeDay,proto3" json:"releaseTimeDay,omitempty"`
	ReleaseTime      string  `protobuf:"bytes,9,opt,name=releaseTime,proto3" json:"releaseTime,omitempty"`
	Type             string  `protobuf:"bytes,10,opt,name=type,proto3" json:"type,omitempty"`
	ReleaseAdd       string  `protobuf:"bytes,11,opt,name=releaseAdd,proto3" json:"releaseAdd,omitempty"`
	AdminID          int64   `protobuf:"varint,12,opt,name=adminID,proto3" json:"adminID,omitempty"`
	Length           int64   `protobuf:"varint,13,opt,name=length,proto3" json:"length,omitempty"`
	ReleaseDiscount  float32 `protobuf:"fixed32,14,opt,name=releaseDiscount,proto3" json:"releaseDiscount,omitempty"`
}

func (x *AddCinemaFilmReq) Reset() {
	*x = AddCinemaFilmReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cms_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddCinemaFilmReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddCinemaFilmReq) ProtoMessage() {}

func (x *AddCinemaFilmReq) ProtoReflect() protoreflect.Message {
	mi := &file_cms_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddCinemaFilmReq.ProtoReflect.Descriptor instead.
func (*AddCinemaFilmReq) Descriptor() ([]byte, []int) {
	return file_cms_proto_rawDescGZIP(), []int{50}
}

func (x *AddCinemaFilmReq) GetCinemaID() int64 {
	if x != nil {
		return x.CinemaID
	}
	return 0
}

func (x *AddCinemaFilmReq) GetMovieID() int64 {
	if x != nil {
		return x.MovieID
	}
	return 0
}

func (x *AddCinemaFilmReq) GetHallID() int64 {
	if x != nil {
		return x.HallID
	}
	return 0
}

func (x *AddCinemaFilmReq) GetTitleCn() string {
	if x != nil {
		return x.TitleCn
	}
	return ""
}

func (x *AddCinemaFilmReq) GetCinemaName() string {
	if x != nil {
		return x.CinemaName
	}
	return ""
}

func (x *AddCinemaFilmReq) GetReleaseTimeYear() int64 {
	if x != nil {
		return x.ReleaseTimeYear
	}
	return 0
}

func (x *AddCinemaFilmReq) GetReleaseTimeMonth() int64 {
	if x != nil {
		return x.ReleaseTimeMonth
	}
	return 0
}

func (x *AddCinemaFilmReq) GetReleaseTimeDay() int64 {
	if x != nil {
		return x.ReleaseTimeDay
	}
	return 0
}

func (x *AddCinemaFilmReq) GetReleaseTime() string {
	if x != nil {
		return x.ReleaseTime
	}
	return ""
}

func (x *AddCinemaFilmReq) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *AddCinemaFilmReq) GetReleaseAdd() string {
	if x != nil {
		return x.ReleaseAdd
	}
	return ""
}

func (x *AddCinemaFilmReq) GetAdminID() int64 {
	if x != nil {
		return x.AdminID
	}
	return 0
}

func (x *AddCinemaFilmReq) GetLength() int64 {
	if x != nil {
		return x.Length
	}
	return 0
}

func (x *AddCinemaFilmReq) GetReleaseDiscount() float32 {
	if x != nil {
		return x.ReleaseDiscount
	}
	return 0
}

type AddCinemaFilmRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AddCinemaFilmRsp) Reset() {
	*x = AddCinemaFilmRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cms_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddCinemaFilmRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddCinemaFilmRsp) ProtoMessage() {}

func (x *AddCinemaFilmRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cms_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddCinemaFilmRsp.ProtoReflect.Descriptor instead.
func (*AddCinemaFilmRsp) Descriptor() ([]byte, []int) {
	return file_cms_proto_rawDescGZIP(), []int{51}
}

type UpdateCinemaFilmReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CinemaID         int64   `protobuf:"varint,1,opt,name=cinemaID,proto3" json:"cinemaID,omitempty"`
	FilmID           int64   `protobuf:"varint,2,opt,name=filmID,proto3" json:"filmID,omitempty"`
	HallID           int64   `protobuf:"varint,3,opt,name=hallID,proto3" json:"hallID,omitempty"`
	FilmName         string  `protobuf:"bytes,4,opt,name=filmName,proto3" json:"filmName,omitempty"`
	CinemaName       string  `protobuf:"bytes,5,opt,name=cinemaName,proto3" json:"cinemaName,omitempty"`
	ReleaseTimeYear  int64   `protobuf:"varint,6,opt,name=releaseTimeYear,proto3" json:"releaseTimeYear,omitempty"`
	ReleaseTimeMonth int64   `protobuf:"varint,7,opt,name=releaseTimeMonth,proto3" json:"releaseTimeMonth,omitempty"`
	ReleaseTimeDay   int64   `protobuf:"varint,8,opt,name=releaseTimeDay,proto3" json:"releaseTimeDay,omitempty"`
	ReleaseTime      string  `protobuf:"bytes,9,opt,name=releaseTime,proto3" json:"releaseTime,omitempty"`
	ReleaseType      string  `protobuf:"bytes,10,opt,name=releaseType,proto3" json:"releaseType,omitempty"`
	ReleaseAdd       string  `protobuf:"bytes,11,opt,name=releaseAdd,proto3" json:"releaseAdd,omitempty"`
	AdminID          int64   `protobuf:"varint,12,opt,name=adminID,proto3" json:"adminID,omitempty"`
	Length           int64   `protobuf:"varint,13,opt,name=length,proto3" json:"length,omitempty"`
	ReleaseDiscount  float32 `protobuf:"fixed32,14,opt,name=releaseDiscount,proto3" json:"releaseDiscount,omitempty"`
	CfID             int64   `protobuf:"varint,15,opt,name=cfID,proto3" json:"cfID,omitempty"`
}

func (x *UpdateCinemaFilmReq) Reset() {
	*x = UpdateCinemaFilmReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cms_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCinemaFilmReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCinemaFilmReq) ProtoMessage() {}

func (x *UpdateCinemaFilmReq) ProtoReflect() protoreflect.Message {
	mi := &file_cms_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCinemaFilmReq.ProtoReflect.Descriptor instead.
func (*UpdateCinemaFilmReq) Descriptor() ([]byte, []int) {
	return file_cms_proto_rawDescGZIP(), []int{52}
}

func (x *UpdateCinemaFilmReq) GetCinemaID() int64 {
	if x != nil {
		return x.CinemaID
	}
	return 0
}

func (x *UpdateCinemaFilmReq) GetFilmID() int64 {
	if x != nil {
		return x.FilmID
	}
	return 0
}

func (x *UpdateCinemaFilmReq) GetHallID() int64 {
	if x != nil {
		return x.HallID
	}
	return 0
}

func (x *UpdateCinemaFilmReq) GetFilmName() string {
	if x != nil {
		return x.FilmName
	}
	return ""
}

func (x *UpdateCinemaFilmReq) GetCinemaName() string {
	if x != nil {
		return x.CinemaName
	}
	return ""
}

func (x *UpdateCinemaFilmReq) GetReleaseTimeYear() int64 {
	if x != nil {
		return x.ReleaseTimeYear
	}
	return 0
}

func (x *UpdateCinemaFilmReq) GetReleaseTimeMonth() int64 {
	if x != nil {
		return x.ReleaseTimeMonth
	}
	return 0
}

func (x *UpdateCinemaFilmReq) GetReleaseTimeDay() int64 {
	if x != nil {
		return x.ReleaseTimeDay
	}
	return 0
}

func (x *UpdateCinemaFilmReq) GetReleaseTime() string {
	if x != nil {
		return x.ReleaseTime
	}
	return ""
}

func (x *UpdateCinemaFilmReq) GetReleaseType() string {
	if x != nil {
		return x.ReleaseType
	}
	return ""
}

func (x *UpdateCinemaFilmReq) GetReleaseAdd() string {
	if x != nil {
		return x.ReleaseAdd
	}
	return ""
}

func (x *UpdateCinemaFilmReq) GetAdminID() int64 {
	if x != nil {
		return x.AdminID
	}
	return 0
}

func (x *UpdateCinemaFilmReq) GetLength() int64 {
	if x != nil {
		return x.Length
	}
	return 0
}

func (x *UpdateCinemaFilmReq) GetReleaseDiscount() float32 {
	if x != nil {
		return x.ReleaseDiscount
	}
	return 0
}

func (x *UpdateCinemaFilmReq) GetCfID() int64 {
	if x != nil {
		return x.CfID
	}
	return 0
}

type UpdateCinemaFilmRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateCinemaFilmRsp) Reset() {
	*x = UpdateCinemaFilmRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cms_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCinemaFilmRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCinemaFilmRsp) ProtoMessage() {}

func (x *UpdateCinemaFilmRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cms_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCinemaFilmRsp.ProtoReflect.Descriptor instead.
func (*UpdateCinemaFilmRsp) Descriptor() ([]byte, []int) {
	return file_cms_proto_rawDescGZIP(), []int{53}
}

type DeleteCinemaFilmReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AdminID int64 `protobuf:"varint,1,opt,name=adminID,proto3" json:"adminID,omitempty"`
	CfId    int64 `protobuf:"varint,2,opt,name=cfId,proto3" json:"cfId,omitempty"`
}

func (x *DeleteCinemaFilmReq) Reset() {
	*x = DeleteCinemaFilmReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cms_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCinemaFilmReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCinemaFilmReq) ProtoMessage() {}

func (x *DeleteCinemaFilmReq) ProtoReflect() protoreflect.Message {
	mi := &file_cms_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCinemaFilmReq.ProtoReflect.Descriptor instead.
func (*DeleteCinemaFilmReq) Descriptor() ([]byte, []int) {
	return file_cms_proto_rawDescGZIP(), []int{54}
}

func (x *DeleteCinemaFilmReq) GetAdminID() int64 {
	if x != nil {
		return x.AdminID
	}
	return 0
}

func (x *DeleteCinemaFilmReq) GetCfId() int64 {
	if x != nil {
		return x.CfId
	}
	return 0
}

type DeleteCinemaFilmRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteCinemaFilmRsp) Reset() {
	*x = DeleteCinemaFilmRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cms_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCinemaFilmRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCinemaFilmRsp) ProtoMessage() {}

func (x *DeleteCinemaFilmRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cms_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCinemaFilmRsp.ProtoReflect.Descriptor instead.
func (*DeleteCinemaFilmRsp) Descriptor() ([]byte, []int) {
	return file_cms_proto_rawDescGZIP(), []int{55}
}

type RegisterCinemaReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AdminID        int64  `protobuf:"varint,1,opt,name=adminID,proto3" json:"adminID,omitempty"`
	CinemaName     string `protobuf:"bytes,2,opt,name=cinemaName,proto3" json:"cinemaName,omitempty"`
	CinemaAddress  string `protobuf:"bytes,3,opt,name=cinemaAddress,proto3" json:"cinemaAddress,omitempty"`
	LocationID     int64  `protobuf:"varint,4,opt,name=locationID,proto3" json:"locationID,omitempty"` // 影院城市对应的位置
	CinemaTypes    string `protobuf:"bytes,5,opt,name=cinemaTypes,proto3" json:"cinemaTypes,omitempty"`
	CinemaCard     int64  `protobuf:"varint,6,opt,name=cinemaCard,proto3" json:"cinemaCard,omitempty"`         // 影城卡
	CinemaMinPrice int64  `protobuf:"varint,7,opt,name=cinemaMinPrice,proto3" json:"cinemaMinPrice,omitempty"` // 几元起
	CinemaSupport  string `protobuf:"bytes,8,opt,name=cinemaSupport,proto3" json:"cinemaSupport,omitempty"`    // 影院提供的支持，包括退签等,用|隔开
	CinemaDiscount int64  `protobuf:"varint,9,opt,name=cinemaDiscount,proto3" json:"cinemaDiscount,omitempty"` // 影城卡最低减价多少元
	CinemaPhone    int64  `protobuf:"varint,10,opt,name=cinemaPhone,proto3" json:"cinemaPhone,omitempty"`      // 影院电话
}

func (x *RegisterCinemaReq) Reset() {
	*x = RegisterCinemaReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cms_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterCinemaReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterCinemaReq) ProtoMessage() {}

func (x *RegisterCinemaReq) ProtoReflect() protoreflect.Message {
	mi := &file_cms_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterCinemaReq.ProtoReflect.Descriptor instead.
func (*RegisterCinemaReq) Descriptor() ([]byte, []int) {
	return file_cms_proto_rawDescGZIP(), []int{56}
}

func (x *RegisterCinemaReq) GetAdminID() int64 {
	if x != nil {
		return x.AdminID
	}
	return 0
}

func (x *RegisterCinemaReq) GetCinemaName() string {
	if x != nil {
		return x.CinemaName
	}
	return ""
}

func (x *RegisterCinemaReq) GetCinemaAddress() string {
	if x != nil {
		return x.CinemaAddress
	}
	return ""
}

func (x *RegisterCinemaReq) GetLocationID() int64 {
	if x != nil {
		return x.LocationID
	}
	return 0
}

func (x *RegisterCinemaReq) GetCinemaTypes() string {
	if x != nil {
		return x.CinemaTypes
	}
	return ""
}

func (x *RegisterCinemaReq) GetCinemaCard() int64 {
	if x != nil {
		return x.CinemaCard
	}
	return 0
}

func (x *RegisterCinemaReq) GetCinemaMinPrice() int64 {
	if x != nil {
		return x.CinemaMinPrice
	}
	return 0
}

func (x *RegisterCinemaReq) GetCinemaSupport() string {
	if x != nil {
		return x.CinemaSupport
	}
	return ""
}

func (x *RegisterCinemaReq) GetCinemaDiscount() int64 {
	if x != nil {
		return x.CinemaDiscount
	}
	return 0
}

func (x *RegisterCinemaReq) GetCinemaPhone() int64 {
	if x != nil {
		return x.CinemaPhone
	}
	return 0
}

type RegisterCinemaRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CinemaID int64 `protobuf:"varint,1,opt,name=cinemaID,proto3" json:"cinemaID,omitempty"`
}

func (x *RegisterCinemaRsp) Reset() {
	*x = RegisterCinemaRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cms_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterCinemaRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterCinemaRsp) ProtoMessage() {}

func (x *RegisterCinemaRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cms_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterCinemaRsp.ProtoReflect.Descriptor instead.
func (*RegisterCinemaRsp) Descriptor() ([]byte, []int) {
	return file_cms_proto_rawDescGZIP(), []int{57}
}

func (x *RegisterCinemaRsp) GetCinemaID() int64 {
	if x != nil {
		return x.CinemaID
	}
	return 0
}

type AllCinemaHallReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CinemaID int64 `protobuf:"varint,1,opt,name=cinemaID,proto3" json:"cinemaID,omitempty"`
	AdminID  int64 `protobuf:"varint,2,opt,name=adminID,proto3" json:"adminID,omitempty"`
}

func (x *AllCinemaHallReq) Reset() {
	*x = AllCinemaHallReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cms_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllCinemaHallReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllCinemaHallReq) ProtoMessage() {}

func (x *AllCinemaHallReq) ProtoReflect() protoreflect.Message {
	mi := &file_cms_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllCinemaHallReq.ProtoReflect.Descriptor instead.
func (*AllCinemaHallReq) Descriptor() ([]byte, []int) {
	return file_cms_proto_rawDescGZIP(), []int{58}
}

func (x *AllCinemaHallReq) GetCinemaID() int64 {
	if x != nil {
		return x.CinemaID
	}
	return 0
}

func (x *AllCinemaHallReq) GetAdminID() int64 {
	if x != nil {
		return x.AdminID
	}
	return 0
}

type AllCinemaHallRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HallAddresses []*HallAddressList `protobuf:"bytes,1,rep,name=hallAddresses,proto3" json:"hallAddresses,omitempty"`
}

func (x *AllCinemaHallRsp) Reset() {
	*x = AllCinemaHallRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cms_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllCinemaHallRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllCinemaHallRsp) ProtoMessage() {}

func (x *AllCinemaHallRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cms_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllCinemaHallRsp.ProtoReflect.Descriptor instead.
func (*AllCinemaHallRsp) Descriptor() ([]byte, []int) {
	return file_cms_proto_rawDescGZIP(), []int{59}
}

func (x *AllCinemaHallRsp) GetHallAddresses() []*HallAddressList {
	if x != nil {
		return x.HallAddresses
	}
	return nil
}

type HallAddressList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MhID   int64  `protobuf:"varint,1,opt,name=mhID,proto3" json:"mhID,omitempty"`
	MhName string `protobuf:"bytes,2,opt,name=mhName,proto3" json:"mhName,omitempty"`
}

func (x *HallAddressList) Reset() {
	*x = HallAddressList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cms_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HallAddressList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HallAddressList) ProtoMessage() {}

func (x *HallAddressList) ProtoReflect() protoreflect.Message {
	mi := &file_cms_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HallAddressList.ProtoReflect.Descriptor instead.
func (*HallAddressList) Descriptor() ([]byte, []int) {
	return file_cms_proto_rawDescGZIP(), []int{60}
}

func (x *HallAddressList) GetMhID() int64 {
	if x != nil {
		return x.MhID
	}
	return 0
}

func (x *HallAddressList) GetMhName() string {
	if x != nil {
		return x.MhName
	}
	return ""
}

type Place struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count       int64  `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	Id          int64  `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	N           string `protobuf:"bytes,3,opt,name=n,proto3" json:"n,omitempty"`
	PinyinFull  string `protobuf:"bytes,4,opt,name=pinyinFull,proto3" json:"pinyinFull,omitempty"`
	PinyinShort string `protobuf:"bytes,5,opt,name=pinyinShort,proto3" json:"pinyinShort,omitempty"`
}

func (x *Place) Reset() {
	*x = Place{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cms_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Place) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Place) ProtoMessage() {}

func (x *Place) ProtoReflect() protoreflect.Message {
	mi := &file_cms_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Place.ProtoReflect.Descriptor instead.
func (*Place) Descriptor() ([]byte, []int) {
	return file_cms_proto_rawDescGZIP(), []int{61}
}

func (x *Place) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *Place) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Place) GetN() string {
	if x != nil {
		return x.N
	}
	return ""
}

func (x *Place) GetPinyinFull() string {
	if x != nil {
		return x.PinyinFull
	}
	return ""
}

func (x *Place) GetPinyinShort() string {
	if x != nil {
		return x.PinyinShort
	}
	return ""
}

var File_cms_proto protoreflect.FileDescriptor

var file_cms_proto_rawDesc = []byte{
	0x0a, 0x09, 0x63, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03, 0x63, 0x6d, 0x73,
	0x22, 0x3e, 0x0a, 0x0c, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71,
	0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x75, 0x73, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x22, 0x80, 0x01, 0x0a, 0x0c, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x73,
	0x70, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x69, 0x6e, 0x65, 0x6d, 0x61, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x69, 0x6e, 0x65, 0x6d, 0x61, 0x49, 0x44, 0x12, 0x18, 0x0a,
	0x07, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x69, 0x6e, 0x65, 0x6d,
	0x61, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x69, 0x6e,
	0x65, 0x6d, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x4e, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x4e, 0x75, 0x6d, 0x22, 0x4e, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x6a, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6a, 0x73, 0x6f,
	0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6e, 0x75, 0x6d, 0x22, 0x12, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x73, 0x70, 0x22, 0x3b, 0x0a, 0x0b, 0x41, 0x6c, 0x6c, 0x46, 0x69,
	0x6c, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x49, 0x44, 0x22, 0x44, 0x0a, 0x0b, 0x41, 0x6c, 0x6c, 0x46, 0x69, 0x6c, 0x6d, 0x73,
	0x52, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1f, 0x0a, 0x05, 0x66, 0x69, 0x6c,
	0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x46,
	0x69, 0x6c, 0x6d, 0x52, 0x05, 0x66, 0x69, 0x6c, 0x6d, 0x73, 0x22, 0xb8, 0x08, 0x0a, 0x04, 0x46,
	0x69, 0x6c, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x49, 0x44, 0x12, 0x10, 0x0a,
	0x03, 0x69, 0x6d, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x69, 0x6d, 0x67, 0x12,
	0x16, 0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x73, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x53, 0x65, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x69,
	0x73, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x53, 0x65, 0x61, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x66,
	0x69, 0x6c, 0x6d, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09,
	0x66, 0x69, 0x6c, 0x6d, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x66, 0x69, 0x6c,
	0x6d, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x77, 0x72, 0x69, 0x74, 0x65, 0x72, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x66, 0x69, 0x6c, 0x6d, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x77,
	0x72, 0x69, 0x74, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x66, 0x69, 0x6c, 0x6d, 0x44, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x69, 0x6c,
	0x6d, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x43, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x43, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x45, 0x6e, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x45, 0x6e, 0x12, 0x32, 0x0a,
	0x14, 0x69, 0x73, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65,
	0x57, 0x61, 0x74, 0x63, 0x68, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x69, 0x73, 0x53,
	0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x57, 0x61, 0x74, 0x63,
	0x68, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x74, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x6d, 0x44, 0x72, 0x61, 0x6d, 0x61, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x6c, 0x6d, 0x44, 0x72, 0x61, 0x6d, 0x61, 0x12,
	0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x53, 0x70,
	0x65, 0x63, 0x69, 0x61, 0x6c, 0x12, 0x28, 0x0a, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f,
	0x75, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12,
	0x24, 0x0a, 0x0d, 0x66, 0x69, 0x6c, 0x6d, 0x42, 0x6f, 0x78, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x65,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x66, 0x69, 0x6c, 0x6d, 0x42, 0x6f, 0x78, 0x6f,
	0x66, 0x66, 0x69, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x77, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x77, 0x61, 0x6e, 0x74,
	0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x75, 0x73, 0x65, 0x72, 0x43,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x10, 0x75, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x73,
	0x73, 0x75, 0x65, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x49, 0x73, 0x73, 0x75, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x72, 0x79, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x6e,
	0x61, 0x6c, 0x18, 0x16, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67,
	0x46, 0x69, 0x6e, 0x61, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x73, 0x33, 0x44, 0x18, 0x17, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x04, 0x69, 0x73, 0x33, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x44,
	0x4d, 0x41, 0x58, 0x18, 0x18, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x69, 0x73, 0x44, 0x4d, 0x41,
	0x58, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x19, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x69, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x14, 0x0a,
	0x05, 0x69, 0x73, 0x48, 0x6f, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x69, 0x73,
	0x48, 0x6f, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x49, 0x4d, 0x41, 0x58, 0x18, 0x1b, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x69, 0x73, 0x49, 0x4d, 0x41, 0x58, 0x12, 0x1a, 0x0a, 0x08, 0x69,
	0x73, 0x49, 0x4d, 0x41, 0x58, 0x33, 0x44, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x69,
	0x73, 0x49, 0x4d, 0x41, 0x58, 0x33, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x73, 0x4e, 0x65, 0x77,
	0x18, 0x1d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x69, 0x73, 0x4e, 0x65, 0x77, 0x12, 0x1c, 0x0a,
	0x09, 0x69, 0x73, 0x54, 0x69, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x69, 0x73, 0x54, 0x69, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x72,
	0x44, 0x61, 0x79, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x72, 0x44, 0x61, 0x79, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x20, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x72, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x59, 0x65, 0x61, 0x72,
	0x18, 0x21, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x72, 0x59, 0x65, 0x61, 0x72, 0x12, 0x1e, 0x0a,
	0x0a, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x22, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x72, 0x59, 0x4d, 0x44, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x59, 0x4d,
	0x44, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x3b, 0x0a, 0x0b, 0x41, 0x6c, 0x6c, 0x55, 0x73, 0x65, 0x72,
	0x73, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x49, 0x44, 0x22, 0x44, 0x0a, 0x0b, 0x41, 0x6c, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x73,
	0x70, 0x12, 0x1f, 0x0a, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x09, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x05, 0x75, 0x73, 0x65,
	0x72, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x9e, 0x01, 0x0a, 0x04, 0x55, 0x73, 0x65,
	0x72, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x22, 0x40, 0x0a, 0x10, 0x41, 0x6c, 0x6c,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a,
	0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x49, 0x44, 0x22, 0x58, 0x0a, 0x10, 0x41,
	0x6c, 0x6c, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x73, 0x70, 0x12,
	0x2e, 0x0a, 0x0a, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x0a, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0xd5, 0x01, 0x0a, 0x09, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x55,
	0x73, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x41, 0x75, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x04, 0x41, 0x75, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x64, 0x6d, 0x69, 0x6e,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x41, 0x64, 0x6d, 0x69,
	0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x50, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x41, 0x64,
	0x6d, 0x69, 0x6e, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x41,
	0x64, 0x6d, 0x69, 0x6e, 0x43, 0x69, 0x6e, 0x65, 0x6d, 0x61, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0d, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x43, 0x69, 0x6e, 0x65, 0x6d, 0x61, 0x49,
	0x44, 0x12, 0x2e, 0x0a, 0x12, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4c, 0x61, 0x73, 0x74, 0x4c, 0x6f,
	0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x41,
	0x64, 0x6d, 0x69, 0x6e, 0x4c, 0x61, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4e, 0x75, 0x6d, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4e, 0x75, 0x6d, 0x22, 0x3e, 0x0a,
	0x0e, 0x41, 0x6c, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x49, 0x44, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x49, 0x44, 0x22, 0x50, 0x0a,
	0x0e, 0x41, 0x6c, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x73, 0x70, 0x12,
	0x28, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22,
	0xd7, 0x01, 0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x6c,
	0x6d, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x6d, 0x49,
	0x44, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x68, 0x65, 0x61, 0x64, 0x49, 0x6d, 0x67, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x68, 0x65, 0x61, 0x64, 0x49, 0x6d, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x6e,
	0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e,
	0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x41, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x41, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x70, 0x4e, 0x75, 0x6d, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x75, 0x70, 0x4e, 0x75, 0x6d, 0x22, 0x3c, 0x0a, 0x0c, 0x41, 0x6c, 0x6c,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x49, 0x44, 0x22, 0x4b, 0x0a, 0x0c, 0x41, 0x6c, 0x6c, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x73, 0x52, 0x73, 0x70, 0x12, 0x25, 0x0a, 0x06, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x41, 0x6c, 0x6c, 0x52, 0x06, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x22, 0xa0, 0x03, 0x0a, 0x08, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x6c,
	0x6c, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x41, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x41, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x79, 0x41, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x61, 0x79, 0x41, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6d,
	0x68, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x6d, 0x68, 0x49, 0x44, 0x12,
	0x16, 0x0a, 0x06, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x58, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x58, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x59, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x59, 0x12,
	0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x6f, 0x76, 0x69, 0x65,
	0x49, 0x44, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x49,
	0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x22, 0x3d, 0x0a, 0x0d, 0x41, 0x6c, 0x6c, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x49, 0x44, 0x22, 0x4c, 0x0a, 0x0d, 0x41, 0x6c, 0x6c, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x52, 0x73, 0x70, 0x12, 0x25, 0x0a, 0x06, 0x70, 0x6c, 0x61, 0x63, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x50, 0x6c,
	0x61, 0x63, 0x65, 0x41, 0x6c, 0x6c, 0x52, 0x06, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x22, 0x86, 0x01, 0x0a, 0x08, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x41, 0x6c,
	0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70,
	0x69, 0x6e, 0x79, 0x69, 0x6e, 0x46, 0x75, 0x6c, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x70, 0x69, 0x6e, 0x79, 0x69, 0x6e, 0x46, 0x75, 0x6c, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x70,
	0x69, 0x6e, 0x79, 0x69, 0x6e, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x70, 0x69, 0x6e, 0x79, 0x69, 0x6e, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x22, 0x9c, 0x09,
	0x0a, 0x0a, 0x41, 0x64, 0x64, 0x46, 0x69, 0x6c, 0x6d, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x49, 0x44, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x6d, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x69, 0x6d, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x12, 0x22, 0x0a, 0x0c, 0x69, 0x73, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x53, 0x65, 0x61, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x69, 0x73, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x53, 0x65, 0x61, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x6d, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x66, 0x69, 0x6c, 0x6d, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x66, 0x69, 0x6c, 0x6d, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e,
	0x77, 0x72, 0x69, 0x74, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x66, 0x69,
	0x6c, 0x6d, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x77, 0x72, 0x69, 0x74, 0x65, 0x72, 0x12, 0x22,
	0x0a, 0x0c, 0x66, 0x69, 0x6c, 0x6d, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x69, 0x6c, 0x6d, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x75, 0x6d,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x4e,
	0x75, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x43, 0x6e, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x43, 0x6e, 0x12, 0x18, 0x0a, 0x07,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x45, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x45, 0x6e, 0x12, 0x32, 0x0a, 0x14, 0x69, 0x73, 0x53, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x57, 0x61, 0x74, 0x63, 0x68, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x69, 0x73, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x49,
	0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x57, 0x61, 0x74, 0x63, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x41, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x41, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x69,
	0x6c, 0x6d, 0x44, 0x72, 0x61, 0x6d, 0x61, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66,
	0x69, 0x6c, 0x6d, 0x44, 0x72, 0x61, 0x6d, 0x61, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x12, 0x28,
	0x0a, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x66, 0x69, 0x6c, 0x6d,
	0x42, 0x6f, 0x78, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x0d, 0x66, 0x69, 0x6c, 0x6d, 0x42, 0x6f, 0x78, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x77, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0b, 0x77, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x2a, 0x0a, 0x10, 0x75, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x75, 0x73, 0x65, 0x72,
	0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x0d,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x73, 0x73, 0x75, 0x65, 0x64, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x73, 0x73, 0x75,
	0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x20, 0x0a, 0x0b,
	0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x0b, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x12, 0x12,
	0x0a, 0x04, 0x69, 0x73, 0x33, 0x44, 0x18, 0x17, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x69, 0x73,
	0x33, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x44, 0x4d, 0x41, 0x58, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x69, 0x73, 0x44, 0x4d, 0x41, 0x58, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x19, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x69, 0x73,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x73, 0x48, 0x6f, 0x74, 0x18,
	0x1a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x69, 0x73, 0x48, 0x6f, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x69, 0x73, 0x49, 0x4d, 0x41, 0x58, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x69, 0x73,
	0x49, 0x4d, 0x41, 0x58, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x49, 0x4d, 0x41, 0x58, 0x33, 0x44,
	0x18, 0x1c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x69, 0x73, 0x49, 0x4d, 0x41, 0x58, 0x33, 0x44,
	0x12, 0x14, 0x0a, 0x05, 0x69, 0x73, 0x4e, 0x65, 0x77, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x69, 0x73, 0x4e, 0x65, 0x77, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73, 0x54, 0x69, 0x63, 0x6b,
	0x69, 0x6e, 0x67, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x69, 0x73, 0x54, 0x69, 0x63,
	0x6b, 0x69, 0x6e, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x44, 0x61, 0x79, 0x18, 0x1f, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x72, 0x44, 0x61, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x4d, 0x6f, 0x6e,
	0x74, 0x68, 0x18, 0x20, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x72, 0x4d, 0x6f, 0x6e, 0x74, 0x68,
	0x12, 0x14, 0x0a, 0x05, 0x72, 0x59, 0x65, 0x61, 0x72, 0x18, 0x21, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x72, 0x59, 0x65, 0x61, 0x72, 0x12, 0x28, 0x0a, 0x0f, 0x66, 0x69, 0x6c, 0x6d, 0x44, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x6d, 0x67, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x66, 0x69, 0x6c, 0x6d, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x6d, 0x67,
	0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x69, 0x6c, 0x6d, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x31, 0x18, 0x23,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x6d, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x31,
	0x12, 0x24, 0x0a, 0x0d, 0x66, 0x69, 0x6c, 0x6d, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x31, 0x49, 0x6d,
	0x67, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x66, 0x69, 0x6c, 0x6d, 0x41, 0x63, 0x74,
	0x6f, 0x72, 0x31, 0x49, 0x6d, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x69, 0x6c, 0x6d, 0x41, 0x63,
	0x74, 0x6f, 0x72, 0x32, 0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x6d,
	0x41, 0x63, 0x74, 0x6f, 0x72, 0x32, 0x12, 0x24, 0x0a, 0x0d, 0x66, 0x69, 0x6c, 0x6d, 0x41, 0x63,
	0x74, 0x6f, 0x72, 0x32, 0x49, 0x6d, 0x67, 0x18, 0x26, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x66,
	0x69, 0x6c, 0x6d, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x32, 0x49, 0x6d, 0x67, 0x22, 0x0c, 0x0a, 0x0a,
	0x41, 0x64, 0x64, 0x46, 0x69, 0x6c, 0x6d, 0x52, 0x73, 0x70, 0x22, 0xef, 0x03, 0x0a, 0x0d, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x6d, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x6f, 0x76, 0x69, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6d,
	0x6f, 0x76, 0x69, 0x65, 0x49, 0x44, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x6d, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x69, 0x6d, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x12, 0x1c, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x6d, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x09, 0x66, 0x69, 0x6c, 0x6d, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x22,
	0x0a, 0x0c, 0x66, 0x69, 0x6c, 0x6d, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x69, 0x6c, 0x6d, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x43, 0x6e, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x43, 0x6e, 0x12, 0x18, 0x0a, 0x07,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x45, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x45, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x69,
	0x6c, 0x6d, 0x44, 0x72, 0x61, 0x6d, 0x61, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66,
	0x69, 0x6c, 0x6d, 0x44, 0x72, 0x61, 0x6d, 0x61, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x12, 0x24,
	0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x73, 0x73, 0x75, 0x65, 0x64, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x73,
	0x73, 0x75, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x12,
	0x0a, 0x04, 0x72, 0x44, 0x61, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x72, 0x44,
	0x61, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x72, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x59,
	0x65, 0x61, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x72, 0x59, 0x65, 0x61, 0x72,
	0x12, 0x12, 0x0a, 0x04, 0x72, 0x59, 0x4d, 0x44, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x72, 0x59, 0x4d, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x49, 0x44, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x49, 0x44, 0x12, 0x1c,
	0x0a, 0x09, 0x69, 0x73, 0x54, 0x69, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x69, 0x73, 0x54, 0x69, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x22, 0x0f, 0x0a, 0x0d,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x6d, 0x52, 0x73, 0x70, 0x22, 0x43, 0x0a,
	0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x6d, 0x52, 0x65, 0x71, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x49, 0x44, 0x22, 0x0f, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x6d,
	0x52, 0x73, 0x70, 0x22, 0xb1, 0x01, 0x0a, 0x0f, 0x41, 0x64, 0x64, 0x41, 0x64, 0x6d, 0x69, 0x6e,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x49,
	0x44, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x24, 0x0a, 0x0d, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x50, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x43, 0x69,
	0x6e, 0x65, 0x6d, 0x61, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x41, 0x64,
	0x6d, 0x69, 0x6e, 0x43, 0x69, 0x6e, 0x65, 0x6d, 0x61, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x41,
	0x64, 0x6d, 0x69, 0x6e, 0x4e, 0x75, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x41,
	0x64, 0x6d, 0x69, 0x6e, 0x4e, 0x75, 0x6d, 0x22, 0x11, 0x0a, 0x0f, 0x41, 0x64, 0x64, 0x41, 0x64,
	0x6d, 0x69, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x73, 0x70, 0x22, 0x95, 0x01, 0x0a, 0x0d, 0x41,
	0x64, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x69, 0x6e, 0x79, 0x69, 0x6e, 0x46, 0x75, 0x6c, 0x6c, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x69, 0x6e, 0x79, 0x69, 0x6e, 0x46, 0x75, 0x6c, 0x6c,
	0x12, 0x20, 0x0a, 0x0b, 0x70, 0x69, 0x6e, 0x79, 0x69, 0x6e, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x69, 0x6e, 0x79, 0x69, 0x6e, 0x53, 0x68, 0x6f,
	0x72, 0x74, 0x22, 0x0f, 0x0a, 0x0d, 0x41, 0x64, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x52, 0x73, 0x70, 0x22, 0xa8, 0x01, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x69, 0x6e, 0x79, 0x69, 0x6e, 0x46, 0x75, 0x6c, 0x6c,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x69, 0x6e, 0x79, 0x69, 0x6e, 0x46, 0x75,
	0x6c, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x69, 0x6e, 0x79, 0x69, 0x6e, 0x53, 0x68, 0x6f, 0x72,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x69, 0x6e, 0x79, 0x69, 0x6e, 0x53,
	0x68, 0x6f, 0x72, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x49, 0x44, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x49, 0x44, 0x22, 0x12,
	0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52,
	0x73, 0x70, 0x22, 0x3c, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x49,
	0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x49, 0x44,
	0x22, 0x12, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x52, 0x73, 0x70, 0x22, 0x42, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x64,
	0x6d, 0x69, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x41, 0x75,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x41, 0x75, 0x49, 0x44, 0x12, 0x18,
	0x0a, 0x07, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x49, 0x44, 0x22, 0x14, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x73, 0x70, 0x22, 0x3f,
	0x0a, 0x0f, 0x41, 0x6c, 0x6c, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x48, 0x61, 0x6c, 0x6c, 0x52, 0x65,
	0x71, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x49, 0x44,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x49, 0x44, 0x22,
	0x71, 0x0a, 0x09, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x48, 0x61, 0x6c, 0x6c, 0x12, 0x12, 0x0a, 0x04,
	0x6d, 0x68, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x6d, 0x68, 0x49, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x6d, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x6d, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x68, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x68, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x69, 0x6e, 0x65, 0x6d, 0x61,
	0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x69, 0x6e, 0x65, 0x6d, 0x61,
	0x49, 0x64, 0x22, 0x57, 0x0a, 0x0f, 0x41, 0x6c, 0x6c, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x48, 0x61,
	0x6c, 0x6c, 0x52, 0x73, 0x70, 0x12, 0x2e, 0x0a, 0x0a, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x48, 0x61,
	0x6c, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x63, 0x6d, 0x73, 0x2e,
	0x4d, 0x6f, 0x76, 0x69, 0x65, 0x48, 0x61, 0x6c, 0x6c, 0x52, 0x0a, 0x6d, 0x6f, 0x76, 0x69, 0x65,
	0x48, 0x61, 0x6c, 0x6c, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x7d, 0x0a, 0x0f, 0x41,
	0x64, 0x64, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x48, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x18,
	0x0a, 0x07, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x68, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x68, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x68, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x68, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1a,
	0x0a, 0x08, 0x63, 0x69, 0x6e, 0x65, 0x6d, 0x61, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x63, 0x69, 0x6e, 0x65, 0x6d, 0x61, 0x49, 0x64, 0x22, 0x11, 0x0a, 0x0f, 0x41, 0x64,
	0x64, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x48, 0x61, 0x6c, 0x6c, 0x52, 0x73, 0x70, 0x22, 0x94, 0x01,
	0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x48, 0x61, 0x6c,
	0x6c, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x49, 0x44, 0x12, 0x16,
	0x0a, 0x06, 0x6d, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x6d, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x68, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x68, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x69, 0x6e, 0x65, 0x6d, 0x61, 0x49, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x69, 0x6e, 0x65, 0x6d, 0x61, 0x49, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6d, 0x68, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04,
	0x6d, 0x68, 0x49, 0x64, 0x22, 0x14, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x6f,
	0x76, 0x69, 0x65, 0x48, 0x61, 0x6c, 0x6c, 0x52, 0x73, 0x70, 0x22, 0x42, 0x0a, 0x12, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x48, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x71,
	0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x68,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x6d, 0x68, 0x49, 0x64, 0x22, 0x14,
	0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x48, 0x61, 0x6c,
	0x6c, 0x52, 0x73, 0x70, 0x22, 0x41, 0x0a, 0x11, 0x41, 0x6c, 0x6c, 0x43, 0x69, 0x6e, 0x65, 0x6d,
	0x61, 0x46, 0x69, 0x6c, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x49, 0x44, 0x22, 0xe8, 0x03, 0x0a, 0x0a, 0x43, 0x69, 0x6e, 0x65,
	0x6d, 0x61, 0x46, 0x69, 0x6c, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x69, 0x6e, 0x65, 0x6d, 0x61,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x69, 0x6e, 0x65, 0x6d, 0x61,
	0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x6d, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x6d, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x61,
	0x6c, 0x6c, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x68, 0x61, 0x6c, 0x6c,
	0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x63, 0x69, 0x6e, 0x65, 0x6d, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x63, 0x69, 0x6e, 0x65, 0x6d, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28,
	0x0a, 0x0f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x59, 0x65, 0x61,
	0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x59, 0x65, 0x61, 0x72, 0x12, 0x2a, 0x0a, 0x10, 0x72, 0x65, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x10, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x4d,
	0x6f, 0x6e, 0x74, 0x68, 0x12, 0x26, 0x0a, 0x0e, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x44, 0x61, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x72, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x44, 0x61, 0x79, 0x12, 0x20, 0x0a, 0x0b,
	0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x41, 0x64, 0x64, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x41, 0x64, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x63, 0x66, 0x49, 0x44, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04,
	0x63, 0x66, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x28, 0x0a, 0x0f,
	0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x44, 0x69,
	0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x61, 0x6c, 0x6c, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x61, 0x6c, 0x6c, 0x4e, 0x61,
	0x6d, 0x65, 0x22, 0x5c, 0x0a, 0x11, 0x41, 0x6c, 0x6c, 0x43, 0x69, 0x6e, 0x65, 0x6d, 0x61, 0x46,
	0x69, 0x6c, 0x6d, 0x73, 0x52, 0x73, 0x70, 0x12, 0x31, 0x0a, 0x0b, 0x63, 0x69, 0x6e, 0x65, 0x6d,
	0x61, 0x46, 0x69, 0x6c, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63,
	0x6d, 0x73, 0x2e, 0x43, 0x69, 0x6e, 0x65, 0x6d, 0x61, 0x46, 0x69, 0x6c, 0x6d, 0x52, 0x0b, 0x63,
	0x69, 0x6e, 0x65, 0x6d, 0x61, 0x46, 0x69, 0x6c, 0x6d, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x22, 0xca, 0x03, 0x0a, 0x10, 0x41, 0x64, 0x64, 0x43, 0x69, 0x6e, 0x65, 0x6d, 0x61, 0x46, 0x69,
	0x6c, 0x6d, 0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x69, 0x6e, 0x65, 0x6d, 0x61, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x69, 0x6e, 0x65, 0x6d, 0x61, 0x49,
	0x44, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x68,
	0x61, 0x6c, 0x6c, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x68, 0x61, 0x6c,
	0x6c, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x43, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x43, 0x6e, 0x12, 0x1e, 0x0a,
	0x0a, 0x63, 0x69, 0x6e, 0x65, 0x6d, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x63, 0x69, 0x6e, 0x65, 0x6d, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a,
	0x0f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x59, 0x65, 0x61, 0x72,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x59, 0x65, 0x61, 0x72, 0x12, 0x2a, 0x0a, 0x10, 0x72, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x10, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x6f,
	0x6e, 0x74, 0x68, 0x12, 0x26, 0x0a, 0x0e, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x44, 0x61, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x72, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x44, 0x61, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x72,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x41, 0x64, 0x64, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x41, 0x64,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x49, 0x44, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x6c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x12, 0x28, 0x0a, 0x0f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x44, 0x69,
	0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0f, 0x72, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x12, 0x0a,
	0x10, 0x41, 0x64, 0x64, 0x43, 0x69, 0x6e, 0x65, 0x6d, 0x61, 0x46, 0x69, 0x6c, 0x6d, 0x52, 0x73,
	0x70, 0x22, 0xef, 0x03, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x69, 0x6e, 0x65,
	0x6d, 0x61, 0x46, 0x69, 0x6c, 0x6d, 0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x69, 0x6e,
	0x65, 0x6d, 0x61, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x69, 0x6e,
	0x65, 0x6d, 0x61, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x6d, 0x49, 0x44, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x6d, 0x49, 0x44, 0x12, 0x16, 0x0a,
	0x06, 0x68, 0x61, 0x6c, 0x6c, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x68,
	0x61, 0x6c, 0x6c, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x6d, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x6d, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x69, 0x6e, 0x65, 0x6d, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x69, 0x6e, 0x65, 0x6d, 0x61, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x28, 0x0a, 0x0f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x59, 0x65, 0x61, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x72, 0x65, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x59, 0x65, 0x61, 0x72, 0x12, 0x2a, 0x0a, 0x10, 0x72,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x26, 0x0a, 0x0e, 0x72, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x44, 0x61, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0e, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x44, 0x61, 0x79, 0x12,
	0x20, 0x0a, 0x0b, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x41, 0x64,
	0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x41, 0x64, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x49, 0x44, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x49, 0x44, 0x12, 0x16, 0x0a,
	0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x28, 0x0a, 0x0f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0f,
	0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x66, 0x49, 0x44, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x63,
	0x66, 0x49, 0x44, 0x22, 0x15, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x69, 0x6e,
	0x65, 0x6d, 0x61, 0x46, 0x69, 0x6c, 0x6d, 0x52, 0x73, 0x70, 0x22, 0x43, 0x0a, 0x13, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x43, 0x69, 0x6e, 0x65, 0x6d, 0x61, 0x46, 0x69, 0x6c, 0x6d, 0x52, 0x65,
	0x71, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x66, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x63, 0x66, 0x49, 0x64, 0x22,
	0x15, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x69, 0x6e, 0x65, 0x6d, 0x61, 0x46,
	0x69, 0x6c, 0x6d, 0x52, 0x73, 0x70, 0x22, 0xed, 0x02, 0x0a, 0x11, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x43, 0x69, 0x6e, 0x65, 0x6d, 0x61, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x69, 0x6e, 0x65, 0x6d, 0x61,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x69, 0x6e, 0x65,
	0x6d, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x69, 0x6e, 0x65, 0x6d, 0x61,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63,
	0x69, 0x6e, 0x65, 0x6d, 0x61, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1e, 0x0a, 0x0a,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b,
	0x63, 0x69, 0x6e, 0x65, 0x6d, 0x61, 0x54, 0x79, 0x70, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x63, 0x69, 0x6e, 0x65, 0x6d, 0x61, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x1e,
	0x0a, 0x0a, 0x63, 0x69, 0x6e, 0x65, 0x6d, 0x61, 0x43, 0x61, 0x72, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x63, 0x69, 0x6e, 0x65, 0x6d, 0x61, 0x43, 0x61, 0x72, 0x64, 0x12, 0x26,
	0x0a, 0x0e, 0x63, 0x69, 0x6e, 0x65, 0x6d, 0x61, 0x4d, 0x69, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x63, 0x69, 0x6e, 0x65, 0x6d, 0x61, 0x4d, 0x69,
	0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x69, 0x6e, 0x65, 0x6d, 0x61,
	0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63,
	0x69, 0x6e, 0x65, 0x6d, 0x61, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x26, 0x0a, 0x0e,
	0x63, 0x69, 0x6e, 0x65, 0x6d, 0x61, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x63, 0x69, 0x6e, 0x65, 0x6d, 0x61, 0x44, 0x69, 0x73, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x69, 0x6e, 0x65, 0x6d, 0x61, 0x50, 0x68,
	0x6f, 0x6e, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x69, 0x6e, 0x65, 0x6d,
	0x61, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x22, 0x2f, 0x0a, 0x11, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x43, 0x69, 0x6e, 0x65, 0x6d, 0x61, 0x52, 0x73, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x63,
	0x69, 0x6e, 0x65, 0x6d, 0x61, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63,
	0x69, 0x6e, 0x65, 0x6d, 0x61, 0x49, 0x44, 0x22, 0x48, 0x0a, 0x10, 0x41, 0x6c, 0x6c, 0x43, 0x69,
	0x6e, 0x65, 0x6d, 0x61, 0x48, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x63,
	0x69, 0x6e, 0x65, 0x6d, 0x61, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63,
	0x69, 0x6e, 0x65, 0x6d, 0x61, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x49,
	0x44, 0x22, 0x4e, 0x0a, 0x10, 0x41, 0x6c, 0x6c, 0x43, 0x69, 0x6e, 0x65, 0x6d, 0x61, 0x48, 0x61,
	0x6c, 0x6c, 0x52, 0x73, 0x70, 0x12, 0x3a, 0x0a, 0x0d, 0x68, 0x61, 0x6c, 0x6c, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63,
	0x6d, 0x73, 0x2e, 0x48, 0x61, 0x6c, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x0d, 0x68, 0x61, 0x6c, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65,
	0x73, 0x22, 0x3d, 0x0a, 0x0f, 0x48, 0x61, 0x6c, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x68, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x6d, 0x68, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x68, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x68, 0x4e, 0x61, 0x6d, 0x65,
	0x22, 0x7d, 0x0a, 0x05, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x0c, 0x0a, 0x01, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x01, 0x6e, 0x12, 0x1e, 0x0a,
	0x0a, 0x70, 0x69, 0x6e, 0x79, 0x69, 0x6e, 0x46, 0x75, 0x6c, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x70, 0x69, 0x6e, 0x79, 0x69, 0x6e, 0x46, 0x75, 0x6c, 0x6c, 0x12, 0x20, 0x0a,
	0x0b, 0x70, 0x69, 0x6e, 0x79, 0x69, 0x6e, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x70, 0x69, 0x6e, 0x79, 0x69, 0x6e, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x32,
	0xd5, 0x0c, 0x0a, 0x0a, 0x43, 0x4d, 0x53, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x33,
	0x0a, 0x09, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x11, 0x2e, 0x63, 0x6d,
	0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x11,
	0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x73,
	0x70, 0x22, 0x00, 0x12, 0x3f, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x15, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x15, 0x2e, 0x63, 0x6d,
	0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52,
	0x73, 0x70, 0x22, 0x00, 0x12, 0x30, 0x0a, 0x08, 0x41, 0x6c, 0x6c, 0x46, 0x69, 0x6c, 0x6d, 0x73,
	0x12, 0x10, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x41, 0x6c, 0x6c, 0x46, 0x69, 0x6c, 0x6d, 0x73, 0x52,
	0x65, 0x71, 0x1a, 0x10, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x41, 0x6c, 0x6c, 0x46, 0x69, 0x6c, 0x6d,
	0x73, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x36, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x46, 0x69, 0x6c, 0x6d, 0x12, 0x12, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x46, 0x69, 0x6c, 0x6d, 0x52, 0x65, 0x71, 0x1a, 0x12, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x6d, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x36,
	0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x6d, 0x12, 0x12, 0x2e, 0x63,
	0x6d, 0x73, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x6d, 0x52, 0x65, 0x71,
	0x1a, 0x12, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x69, 0x6c,
	0x6d, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x30, 0x0a, 0x08, 0x41, 0x6c, 0x6c, 0x55, 0x73, 0x65,
	0x72, 0x73, 0x12, 0x10, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x41, 0x6c, 0x6c, 0x55, 0x73, 0x65, 0x72,
	0x73, 0x52, 0x65, 0x71, 0x1a, 0x10, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x41, 0x6c, 0x6c, 0x55, 0x73,
	0x65, 0x72, 0x73, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x3f, 0x0a, 0x0d, 0x41, 0x6c, 0x6c, 0x41,
	0x64, 0x6d, 0x69, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x15, 0x2e, 0x63, 0x6d, 0x73, 0x2e,
	0x41, 0x6c, 0x6c, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71,
	0x1a, 0x15, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x41, 0x6c, 0x6c, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x55,
	0x73, 0x65, 0x72, 0x73, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x39, 0x0a, 0x0b, 0x41, 0x6c, 0x6c,
	0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x13, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x41,
	0x6c, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x13, 0x2e,
	0x63, 0x6d, 0x73, 0x2e, 0x41, 0x6c, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52,
	0x73, 0x70, 0x22, 0x00, 0x12, 0x33, 0x0a, 0x09, 0x41, 0x6c, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x73, 0x12, 0x11, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x41, 0x6c, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x73, 0x52, 0x65, 0x71, 0x1a, 0x11, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x41, 0x6c, 0x6c, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x73, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x36, 0x0a, 0x0a, 0x41, 0x6c, 0x6c,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x12, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x41, 0x6c,
	0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x12, 0x2e, 0x63, 0x6d,
	0x73, 0x2e, 0x41, 0x6c, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x73, 0x70, 0x22,
	0x00, 0x12, 0x2d, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x46, 0x69, 0x6c, 0x6d, 0x12, 0x0f, 0x2e, 0x63,
	0x6d, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x46, 0x69, 0x6c, 0x6d, 0x52, 0x65, 0x71, 0x1a, 0x0f, 0x2e,
	0x63, 0x6d, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x46, 0x69, 0x6c, 0x6d, 0x52, 0x73, 0x70, 0x22, 0x00,
	0x12, 0x3c, 0x0a, 0x0c, 0x41, 0x64, 0x64, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x55, 0x73, 0x65, 0x72,
	0x12, 0x14, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x14, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x41, 0x64, 0x64,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x36,
	0x0a, 0x0a, 0x41, 0x64, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x12, 0x2e, 0x63,
	0x6d, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71,
	0x1a, 0x12, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x3f, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x15, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x15,
	0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x3f, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x15, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x1a,
	0x15, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x45, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x12, 0x17, 0x2e, 0x63, 0x6d,
	0x73, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x1a, 0x17, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12,
	0x3c, 0x0a, 0x0c, 0x41, 0x6c, 0x6c, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x48, 0x61, 0x6c, 0x6c, 0x12,
	0x14, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x41, 0x6c, 0x6c, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x48, 0x61,
	0x6c, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x14, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x41, 0x6c, 0x6c, 0x4d,
	0x6f, 0x76, 0x69, 0x65, 0x48, 0x61, 0x6c, 0x6c, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x3c, 0x0a,
	0x0c, 0x41, 0x64, 0x64, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x48, 0x61, 0x6c, 0x6c, 0x12, 0x14, 0x2e,
	0x63, 0x6d, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x48, 0x61, 0x6c, 0x6c,
	0x52, 0x65, 0x71, 0x1a, 0x14, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x4d, 0x6f, 0x76,
	0x69, 0x65, 0x48, 0x61, 0x6c, 0x6c, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x45, 0x0a, 0x0f, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x48, 0x61, 0x6c, 0x6c, 0x12, 0x17,
	0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x76, 0x69, 0x65,
	0x48, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x17, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x48, 0x61, 0x6c, 0x6c, 0x52, 0x73, 0x70,
	0x22, 0x00, 0x12, 0x45, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x6f, 0x76, 0x69,
	0x65, 0x48, 0x61, 0x6c, 0x6c, 0x12, 0x17, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x48, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x17,
	0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x6f, 0x76, 0x69, 0x65,
	0x48, 0x61, 0x6c, 0x6c, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x42, 0x0a, 0x0e, 0x41, 0x6c, 0x6c,
	0x43, 0x69, 0x6e, 0x65, 0x6d, 0x61, 0x46, 0x69, 0x6c, 0x6d, 0x73, 0x12, 0x16, 0x2e, 0x63, 0x6d,
	0x73, 0x2e, 0x41, 0x6c, 0x6c, 0x43, 0x69, 0x6e, 0x65, 0x6d, 0x61, 0x46, 0x69, 0x6c, 0x6d, 0x73,
	0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x41, 0x6c, 0x6c, 0x43, 0x69, 0x6e,
	0x65, 0x6d, 0x61, 0x46, 0x69, 0x6c, 0x6d, 0x73, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x3f, 0x0a,
	0x0d, 0x41, 0x64, 0x64, 0x43, 0x69, 0x6e, 0x65, 0x6d, 0x61, 0x46, 0x69, 0x6c, 0x6d, 0x12, 0x15,
	0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x43, 0x69, 0x6e, 0x65, 0x6d, 0x61, 0x46, 0x69,
	0x6c, 0x6d, 0x52, 0x65, 0x71, 0x1a, 0x15, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x43,
	0x69, 0x6e, 0x65, 0x6d, 0x61, 0x46, 0x69, 0x6c, 0x6d, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x48,
	0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x69, 0x6e, 0x65, 0x6d, 0x61, 0x46, 0x69,
	0x6c, 0x6d, 0x12, 0x18, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43,
	0x69, 0x6e, 0x65, 0x6d, 0x61, 0x46, 0x69, 0x6c, 0x6d, 0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e, 0x63,
	0x6d, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x69, 0x6e, 0x65, 0x6d, 0x61, 0x46,
	0x69, 0x6c, 0x6d, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x48, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x43, 0x69, 0x6e, 0x65, 0x6d, 0x61, 0x46, 0x69, 0x6c, 0x6d, 0x12, 0x18, 0x2e, 0x63,
	0x6d, 0x73, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x69, 0x6e, 0x65, 0x6d, 0x61, 0x46,
	0x69, 0x6c, 0x6d, 0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x43, 0x69, 0x6e, 0x65, 0x6d, 0x61, 0x46, 0x69, 0x6c, 0x6d, 0x52, 0x73, 0x70,
	0x22, 0x00, 0x12, 0x42, 0x0a, 0x0e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x43, 0x69,
	0x6e, 0x65, 0x6d, 0x61, 0x12, 0x16, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x43, 0x69, 0x6e, 0x65, 0x6d, 0x61, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x63,
	0x6d, 0x73, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x43, 0x69, 0x6e, 0x65, 0x6d,
	0x61, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x3f, 0x0a, 0x0d, 0x41, 0x6c, 0x6c, 0x43, 0x69, 0x6e,
	0x65, 0x6d, 0x61, 0x48, 0x61, 0x6c, 0x6c, 0x12, 0x15, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x41, 0x6c,
	0x6c, 0x43, 0x69, 0x6e, 0x65, 0x6d, 0x61, 0x48, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x15,
	0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x41, 0x6c, 0x6c, 0x43, 0x69, 0x6e, 0x65, 0x6d, 0x61, 0x48, 0x61,
	0x6c, 0x6c, 0x52, 0x73, 0x70, 0x22, 0x00, 0x42, 0x04, 0x5a, 0x02, 0x70, 0x62, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cms_proto_rawDescOnce sync.Once
	file_cms_proto_rawDescData = file_cms_proto_rawDesc
)

func file_cms_proto_rawDescGZIP() []byte {
	file_cms_proto_rawDescOnce.Do(func() {
		file_cms_proto_rawDescData = protoimpl.X.CompressGZIP(file_cms_proto_rawDescData)
	})
	return file_cms_proto_rawDescData
}

var file_cms_proto_msgTypes = make([]protoimpl.MessageInfo, 62)
var file_cms_proto_goTypes = []interface{}{
	(*UserLoginReq)(nil),        // 0: cms.UserLoginReq
	(*UserLoginRsp)(nil),        // 1: cms.UserLoginRsp
	(*UpdateMessageReq)(nil),    // 2: cms.UpdateMessageReq
	(*UpdateMessageRsp)(nil),    // 3: cms.UpdateMessageRsp
	(*AllFilmsReq)(nil),         // 4: cms.AllFilmsReq
	(*AllFilmsRsp)(nil),         // 5: cms.AllFilmsRsp
	(*Film)(nil),                // 6: cms.Film
	(*AllUsersReq)(nil),         // 7: cms.AllUsersReq
	(*AllUsersRsp)(nil),         // 8: cms.AllUsersRsp
	(*User)(nil),                // 9: cms.User
	(*AllAdminUsersReq)(nil),    // 10: cms.AllAdminUsersReq
	(*AllAdminUsersRsp)(nil),    // 11: cms.AllAdminUsersRsp
	(*AdminUser)(nil),           // 12: cms.AdminUser
	(*AllCommentsReq)(nil),      // 13: cms.AllCommentsReq
	(*AllCommentsRsp)(nil),      // 14: cms.AllCommentsRsp
	(*Comment)(nil),             // 15: cms.Comment
	(*AllOrdersReq)(nil),        // 16: cms.AllOrdersReq
	(*AllOrdersRsp)(nil),        // 17: cms.AllOrdersRsp
	(*OrderAll)(nil),            // 18: cms.OrderAll
	(*AllAddressReq)(nil),       // 19: cms.AllAddressReq
	(*AllAddressRsp)(nil),       // 20: cms.AllAddressRsp
	(*PlaceAll)(nil),            // 21: cms.PlaceAll
	(*AddFilmReq)(nil),          // 22: cms.AddFilmReq
	(*AddFilmRsp)(nil),          // 23: cms.AddFilmRsp
	(*UpdateFilmReq)(nil),       // 24: cms.UpdateFilmReq
	(*UpdateFilmRsp)(nil),       // 25: cms.UpdateFilmRsp
	(*DeleteFilmReq)(nil),       // 26: cms.DeleteFilmReq
	(*DeleteFilmRsp)(nil),       // 27: cms.DeleteFilmRsp
	(*AddAdminUserReq)(nil),     // 28: cms.AddAdminUserReq
	(*AddAdminUserRsp)(nil),     // 29: cms.AddAdminUserRsp
	(*AddAddressReq)(nil),       // 30: cms.AddAddressReq
	(*AddAddressRsp)(nil),       // 31: cms.AddAddressRsp
	(*UpdateAddressReq)(nil),    // 32: cms.UpdateAddressReq
	(*UpdateAddressRsp)(nil),    // 33: cms.UpdateAddressRsp
	(*DeleteAddressReq)(nil),    // 34: cms.DeleteAddressReq
	(*DeleteAddressRsp)(nil),    // 35: cms.DeleteAddressRsp
	(*DeleteAdminUserReq)(nil),  // 36: cms.DeleteAdminUserReq
	(*DeleteAdminUserRsp)(nil),  // 37: cms.DeleteAdminUserRsp
	(*AllMovieHallReq)(nil),     // 38: cms.AllMovieHallReq
	(*MovieHall)(nil),           // 39: cms.MovieHall
	(*AllMovieHallRsp)(nil),     // 40: cms.AllMovieHallRsp
	(*AddMovieHallReq)(nil),     // 41: cms.AddMovieHallReq
	(*AddMovieHallRsp)(nil),     // 42: cms.AddMovieHallRsp
	(*UpdateMovieHallReq)(nil),  // 43: cms.UpdateMovieHallReq
	(*UpdateMovieHallRsp)(nil),  // 44: cms.UpdateMovieHallRsp
	(*DeleteMovieHallReq)(nil),  // 45: cms.DeleteMovieHallReq
	(*DeleteMovieHallRsp)(nil),  // 46: cms.DeleteMovieHallRsp
	(*AllCinemaFilmsReq)(nil),   // 47: cms.AllCinemaFilmsReq
	(*CinemaFilm)(nil),          // 48: cms.CinemaFilm
	(*AllCinemaFilmsRsp)(nil),   // 49: cms.AllCinemaFilmsRsp
	(*AddCinemaFilmReq)(nil),    // 50: cms.AddCinemaFilmReq
	(*AddCinemaFilmRsp)(nil),    // 51: cms.AddCinemaFilmRsp
	(*UpdateCinemaFilmReq)(nil), // 52: cms.UpdateCinemaFilmReq
	(*UpdateCinemaFilmRsp)(nil), // 53: cms.UpdateCinemaFilmRsp
	(*DeleteCinemaFilmReq)(nil), // 54: cms.DeleteCinemaFilmReq
	(*DeleteCinemaFilmRsp)(nil), // 55: cms.DeleteCinemaFilmRsp
	(*RegisterCinemaReq)(nil),   // 56: cms.RegisterCinemaReq
	(*RegisterCinemaRsp)(nil),   // 57: cms.RegisterCinemaRsp
	(*AllCinemaHallReq)(nil),    // 58: cms.AllCinemaHallReq
	(*AllCinemaHallRsp)(nil),    // 59: cms.AllCinemaHallRsp
	(*HallAddressList)(nil),     // 60: cms.HallAddressList
	(*Place)(nil),               // 61: cms.Place
}
var file_cms_proto_depIdxs = []int32{
	6,  // 0: cms.AllFilmsRsp.films:type_name -> cms.Film
	9,  // 1: cms.AllUsersRsp.users:type_name -> cms.User
	12, // 2: cms.AllAdminUsersRsp.adminUsers:type_name -> cms.AdminUser
	15, // 3: cms.AllCommentsRsp.comments:type_name -> cms.Comment
	18, // 4: cms.AllOrdersRsp.orders:type_name -> cms.OrderAll
	21, // 5: cms.AllAddressRsp.places:type_name -> cms.PlaceAll
	39, // 6: cms.AllMovieHallRsp.movieHalls:type_name -> cms.MovieHall
	48, // 7: cms.AllCinemaFilmsRsp.cinemaFilms:type_name -> cms.CinemaFilm
	60, // 8: cms.AllCinemaHallRsp.hallAddresses:type_name -> cms.HallAddressList
	0,  // 9: cms.CMSService.UserLogin:input_type -> cms.UserLoginReq
	2,  // 10: cms.CMSService.UpdateMessage:input_type -> cms.UpdateMessageReq
	4,  // 11: cms.CMSService.AllFilms:input_type -> cms.AllFilmsReq
	24, // 12: cms.CMSService.UpdateFilm:input_type -> cms.UpdateFilmReq
	26, // 13: cms.CMSService.DeleteFilm:input_type -> cms.DeleteFilmReq
	7,  // 14: cms.CMSService.AllUsers:input_type -> cms.AllUsersReq
	10, // 15: cms.CMSService.AllAdminUsers:input_type -> cms.AllAdminUsersReq
	13, // 16: cms.CMSService.AllComments:input_type -> cms.AllCommentsReq
	16, // 17: cms.CMSService.AllOrders:input_type -> cms.AllOrdersReq
	19, // 18: cms.CMSService.AllAddress:input_type -> cms.AllAddressReq
	22, // 19: cms.CMSService.AddFilm:input_type -> cms.AddFilmReq
	28, // 20: cms.CMSService.AddAdminUser:input_type -> cms.AddAdminUserReq
	30, // 21: cms.CMSService.AddAddress:input_type -> cms.AddAddressReq
	32, // 22: cms.CMSService.UpdateAddress:input_type -> cms.UpdateAddressReq
	34, // 23: cms.CMSService.DeleteAddress:input_type -> cms.DeleteAddressReq
	36, // 24: cms.CMSService.DeleteAdminUser:input_type -> cms.DeleteAdminUserReq
	38, // 25: cms.CMSService.AllMovieHall:input_type -> cms.AllMovieHallReq
	41, // 26: cms.CMSService.AddMovieHall:input_type -> cms.AddMovieHallReq
	43, // 27: cms.CMSService.UpdateMovieHall:input_type -> cms.UpdateMovieHallReq
	45, // 28: cms.CMSService.DeleteMovieHall:input_type -> cms.DeleteMovieHallReq
	47, // 29: cms.CMSService.AllCinemaFilms:input_type -> cms.AllCinemaFilmsReq
	50, // 30: cms.CMSService.AddCinemaFilm:input_type -> cms.AddCinemaFilmReq
	52, // 31: cms.CMSService.UpdateCinemaFilm:input_type -> cms.UpdateCinemaFilmReq
	54, // 32: cms.CMSService.DeleteCinemaFilm:input_type -> cms.DeleteCinemaFilmReq
	56, // 33: cms.CMSService.RegisterCinema:input_type -> cms.RegisterCinemaReq
	58, // 34: cms.CMSService.AllCinemaHall:input_type -> cms.AllCinemaHallReq
	1,  // 35: cms.CMSService.UserLogin:output_type -> cms.UserLoginRsp
	3,  // 36: cms.CMSService.UpdateMessage:output_type -> cms.UpdateMessageRsp
	5,  // 37: cms.CMSService.AllFilms:output_type -> cms.AllFilmsRsp
	25, // 38: cms.CMSService.UpdateFilm:output_type -> cms.UpdateFilmRsp
	27, // 39: cms.CMSService.DeleteFilm:output_type -> cms.DeleteFilmRsp
	8,  // 40: cms.CMSService.AllUsers:output_type -> cms.AllUsersRsp
	11, // 41: cms.CMSService.AllAdminUsers:output_type -> cms.AllAdminUsersRsp
	14, // 42: cms.CMSService.AllComments:output_type -> cms.AllCommentsRsp
	17, // 43: cms.CMSService.AllOrders:output_type -> cms.AllOrdersRsp
	20, // 44: cms.CMSService.AllAddress:output_type -> cms.AllAddressRsp
	23, // 45: cms.CMSService.AddFilm:output_type -> cms.AddFilmRsp
	29, // 46: cms.CMSService.AddAdminUser:output_type -> cms.AddAdminUserRsp
	31, // 47: cms.CMSService.AddAddress:output_type -> cms.AddAddressRsp
	33, // 48: cms.CMSService.UpdateAddress:output_type -> cms.UpdateAddressRsp
	35, // 49: cms.CMSService.DeleteAddress:output_type -> cms.DeleteAddressRsp
	37, // 50: cms.CMSService.DeleteAdminUser:output_type -> cms.DeleteAdminUserRsp
	40, // 51: cms.CMSService.AllMovieHall:output_type -> cms.AllMovieHallRsp
	42, // 52: cms.CMSService.AddMovieHall:output_type -> cms.AddMovieHallRsp
	44, // 53: cms.CMSService.UpdateMovieHall:output_type -> cms.UpdateMovieHallRsp
	46, // 54: cms.CMSService.DeleteMovieHall:output_type -> cms.DeleteMovieHallRsp
	49, // 55: cms.CMSService.AllCinemaFilms:output_type -> cms.AllCinemaFilmsRsp
	51, // 56: cms.CMSService.AddCinemaFilm:output_type -> cms.AddCinemaFilmRsp
	53, // 57: cms.CMSService.UpdateCinemaFilm:output_type -> cms.UpdateCinemaFilmRsp
	55, // 58: cms.CMSService.DeleteCinemaFilm:output_type -> cms.DeleteCinemaFilmRsp
	57, // 59: cms.CMSService.RegisterCinema:output_type -> cms.RegisterCinemaRsp
	59, // 60: cms.CMSService.AllCinemaHall:output_type -> cms.AllCinemaHallRsp
	35, // [35:61] is the sub-list for method output_type
	9,  // [9:35] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_cms_proto_init() }
func file_cms_proto_init() {
	if File_cms_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cms_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserLoginReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cms_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserLoginRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cms_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateMessageReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cms_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateMessageRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cms_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllFilmsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cms_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllFilmsRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cms_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Film); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cms_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllUsersReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cms_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllUsersRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cms_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*User); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cms_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllAdminUsersReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cms_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllAdminUsersRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cms_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdminUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cms_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllCommentsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cms_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllCommentsRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cms_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Comment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cms_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllOrdersReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cms_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllOrdersRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cms_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderAll); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cms_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllAddressReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cms_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllAddressRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cms_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlaceAll); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cms_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddFilmReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cms_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddFilmRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cms_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateFilmReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cms_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateFilmRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cms_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteFilmReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cms_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteFilmRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cms_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddAdminUserReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cms_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddAdminUserRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cms_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddAddressReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cms_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddAddressRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cms_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAddressReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cms_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAddressRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cms_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteAddressReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cms_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteAddressRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cms_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteAdminUserReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cms_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteAdminUserRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cms_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllMovieHallReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cms_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MovieHall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cms_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllMovieHallRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cms_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddMovieHallReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cms_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddMovieHallRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cms_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateMovieHallReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cms_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateMovieHallRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cms_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteMovieHallReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cms_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteMovieHallRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cms_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllCinemaFilmsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cms_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CinemaFilm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cms_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllCinemaFilmsRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cms_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddCinemaFilmReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cms_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddCinemaFilmRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cms_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCinemaFilmReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cms_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCinemaFilmRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cms_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCinemaFilmReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cms_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCinemaFilmRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cms_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterCinemaReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cms_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterCinemaRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cms_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllCinemaHallReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cms_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllCinemaHallRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cms_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HallAddressList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cms_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Place); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cms_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   62,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_cms_proto_goTypes,
		DependencyIndexes: file_cms_proto_depIdxs,
		MessageInfos:      file_cms_proto_msgTypes,
	}.Build()
	File_cms_proto = out.File
	file_cms_proto_rawDesc = nil
	file_cms_proto_goTypes = nil
	file_cms_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// CMSServiceClient is the client API for CMSService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CMSServiceClient interface {
	UserLogin(ctx context.Context, in *UserLoginReq, opts ...grpc.CallOption) (*UserLoginRsp, error)
	UpdateMessage(ctx context.Context, in *UpdateMessageReq, opts ...grpc.CallOption) (*UpdateMessageRsp, error)
	AllFilms(ctx context.Context, in *AllFilmsReq, opts ...grpc.CallOption) (*AllFilmsRsp, error)
	UpdateFilm(ctx context.Context, in *UpdateFilmReq, opts ...grpc.CallOption) (*UpdateFilmRsp, error)
	DeleteFilm(ctx context.Context, in *DeleteFilmReq, opts ...grpc.CallOption) (*DeleteFilmRsp, error)
	AllUsers(ctx context.Context, in *AllUsersReq, opts ...grpc.CallOption) (*AllUsersRsp, error)
	AllAdminUsers(ctx context.Context, in *AllAdminUsersReq, opts ...grpc.CallOption) (*AllAdminUsersRsp, error)
	AllComments(ctx context.Context, in *AllCommentsReq, opts ...grpc.CallOption) (*AllCommentsRsp, error)
	AllOrders(ctx context.Context, in *AllOrdersReq, opts ...grpc.CallOption) (*AllOrdersRsp, error)
	AllAddress(ctx context.Context, in *AllAddressReq, opts ...grpc.CallOption) (*AllAddressRsp, error)
	AddFilm(ctx context.Context, in *AddFilmReq, opts ...grpc.CallOption) (*AddFilmRsp, error)
	AddAdminUser(ctx context.Context, in *AddAdminUserReq, opts ...grpc.CallOption) (*AddAdminUserRsp, error)
	AddAddress(ctx context.Context, in *AddAddressReq, opts ...grpc.CallOption) (*AddAddressRsp, error)
	UpdateAddress(ctx context.Context, in *UpdateAddressReq, opts ...grpc.CallOption) (*UpdateAddressRsp, error)
	DeleteAddress(ctx context.Context, in *DeleteAddressReq, opts ...grpc.CallOption) (*DeleteAddressRsp, error)
	DeleteAdminUser(ctx context.Context, in *DeleteAdminUserReq, opts ...grpc.CallOption) (*DeleteAdminUserRsp, error)
	AllMovieHall(ctx context.Context, in *AllMovieHallReq, opts ...grpc.CallOption) (*AllMovieHallRsp, error)
	AddMovieHall(ctx context.Context, in *AddMovieHallReq, opts ...grpc.CallOption) (*AddMovieHallRsp, error)
	UpdateMovieHall(ctx context.Context, in *UpdateMovieHallReq, opts ...grpc.CallOption) (*UpdateMovieHallRsp, error)
	DeleteMovieHall(ctx context.Context, in *DeleteMovieHallReq, opts ...grpc.CallOption) (*DeleteMovieHallRsp, error)
	AllCinemaFilms(ctx context.Context, in *AllCinemaFilmsReq, opts ...grpc.CallOption) (*AllCinemaFilmsRsp, error)
	AddCinemaFilm(ctx context.Context, in *AddCinemaFilmReq, opts ...grpc.CallOption) (*AddCinemaFilmRsp, error)
	UpdateCinemaFilm(ctx context.Context, in *UpdateCinemaFilmReq, opts ...grpc.CallOption) (*UpdateCinemaFilmRsp, error)
	DeleteCinemaFilm(ctx context.Context, in *DeleteCinemaFilmReq, opts ...grpc.CallOption) (*DeleteCinemaFilmRsp, error)
	RegisterCinema(ctx context.Context, in *RegisterCinemaReq, opts ...grpc.CallOption) (*RegisterCinemaRsp, error)
	AllCinemaHall(ctx context.Context, in *AllCinemaHallReq, opts ...grpc.CallOption) (*AllCinemaHallRsp, error)
}

type cMSServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCMSServiceClient(cc grpc.ClientConnInterface) CMSServiceClient {
	return &cMSServiceClient{cc}
}

func (c *cMSServiceClient) UserLogin(ctx context.Context, in *UserLoginReq, opts ...grpc.CallOption) (*UserLoginRsp, error) {
	out := new(UserLoginRsp)
	err := c.cc.Invoke(ctx, "/cms.CMSService/UserLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cMSServiceClient) UpdateMessage(ctx context.Context, in *UpdateMessageReq, opts ...grpc.CallOption) (*UpdateMessageRsp, error) {
	out := new(UpdateMessageRsp)
	err := c.cc.Invoke(ctx, "/cms.CMSService/UpdateMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cMSServiceClient) AllFilms(ctx context.Context, in *AllFilmsReq, opts ...grpc.CallOption) (*AllFilmsRsp, error) {
	out := new(AllFilmsRsp)
	err := c.cc.Invoke(ctx, "/cms.CMSService/AllFilms", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cMSServiceClient) UpdateFilm(ctx context.Context, in *UpdateFilmReq, opts ...grpc.CallOption) (*UpdateFilmRsp, error) {
	out := new(UpdateFilmRsp)
	err := c.cc.Invoke(ctx, "/cms.CMSService/UpdateFilm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cMSServiceClient) DeleteFilm(ctx context.Context, in *DeleteFilmReq, opts ...grpc.CallOption) (*DeleteFilmRsp, error) {
	out := new(DeleteFilmRsp)
	err := c.cc.Invoke(ctx, "/cms.CMSService/DeleteFilm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cMSServiceClient) AllUsers(ctx context.Context, in *AllUsersReq, opts ...grpc.CallOption) (*AllUsersRsp, error) {
	out := new(AllUsersRsp)
	err := c.cc.Invoke(ctx, "/cms.CMSService/AllUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cMSServiceClient) AllAdminUsers(ctx context.Context, in *AllAdminUsersReq, opts ...grpc.CallOption) (*AllAdminUsersRsp, error) {
	out := new(AllAdminUsersRsp)
	err := c.cc.Invoke(ctx, "/cms.CMSService/AllAdminUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cMSServiceClient) AllComments(ctx context.Context, in *AllCommentsReq, opts ...grpc.CallOption) (*AllCommentsRsp, error) {
	out := new(AllCommentsRsp)
	err := c.cc.Invoke(ctx, "/cms.CMSService/AllComments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cMSServiceClient) AllOrders(ctx context.Context, in *AllOrdersReq, opts ...grpc.CallOption) (*AllOrdersRsp, error) {
	out := new(AllOrdersRsp)
	err := c.cc.Invoke(ctx, "/cms.CMSService/AllOrders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cMSServiceClient) AllAddress(ctx context.Context, in *AllAddressReq, opts ...grpc.CallOption) (*AllAddressRsp, error) {
	out := new(AllAddressRsp)
	err := c.cc.Invoke(ctx, "/cms.CMSService/AllAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cMSServiceClient) AddFilm(ctx context.Context, in *AddFilmReq, opts ...grpc.CallOption) (*AddFilmRsp, error) {
	out := new(AddFilmRsp)
	err := c.cc.Invoke(ctx, "/cms.CMSService/AddFilm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cMSServiceClient) AddAdminUser(ctx context.Context, in *AddAdminUserReq, opts ...grpc.CallOption) (*AddAdminUserRsp, error) {
	out := new(AddAdminUserRsp)
	err := c.cc.Invoke(ctx, "/cms.CMSService/AddAdminUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cMSServiceClient) AddAddress(ctx context.Context, in *AddAddressReq, opts ...grpc.CallOption) (*AddAddressRsp, error) {
	out := new(AddAddressRsp)
	err := c.cc.Invoke(ctx, "/cms.CMSService/AddAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cMSServiceClient) UpdateAddress(ctx context.Context, in *UpdateAddressReq, opts ...grpc.CallOption) (*UpdateAddressRsp, error) {
	out := new(UpdateAddressRsp)
	err := c.cc.Invoke(ctx, "/cms.CMSService/UpdateAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cMSServiceClient) DeleteAddress(ctx context.Context, in *DeleteAddressReq, opts ...grpc.CallOption) (*DeleteAddressRsp, error) {
	out := new(DeleteAddressRsp)
	err := c.cc.Invoke(ctx, "/cms.CMSService/DeleteAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cMSServiceClient) DeleteAdminUser(ctx context.Context, in *DeleteAdminUserReq, opts ...grpc.CallOption) (*DeleteAdminUserRsp, error) {
	out := new(DeleteAdminUserRsp)
	err := c.cc.Invoke(ctx, "/cms.CMSService/DeleteAdminUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cMSServiceClient) AllMovieHall(ctx context.Context, in *AllMovieHallReq, opts ...grpc.CallOption) (*AllMovieHallRsp, error) {
	out := new(AllMovieHallRsp)
	err := c.cc.Invoke(ctx, "/cms.CMSService/AllMovieHall", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cMSServiceClient) AddMovieHall(ctx context.Context, in *AddMovieHallReq, opts ...grpc.CallOption) (*AddMovieHallRsp, error) {
	out := new(AddMovieHallRsp)
	err := c.cc.Invoke(ctx, "/cms.CMSService/AddMovieHall", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cMSServiceClient) UpdateMovieHall(ctx context.Context, in *UpdateMovieHallReq, opts ...grpc.CallOption) (*UpdateMovieHallRsp, error) {
	out := new(UpdateMovieHallRsp)
	err := c.cc.Invoke(ctx, "/cms.CMSService/UpdateMovieHall", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cMSServiceClient) DeleteMovieHall(ctx context.Context, in *DeleteMovieHallReq, opts ...grpc.CallOption) (*DeleteMovieHallRsp, error) {
	out := new(DeleteMovieHallRsp)
	err := c.cc.Invoke(ctx, "/cms.CMSService/DeleteMovieHall", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cMSServiceClient) AllCinemaFilms(ctx context.Context, in *AllCinemaFilmsReq, opts ...grpc.CallOption) (*AllCinemaFilmsRsp, error) {
	out := new(AllCinemaFilmsRsp)
	err := c.cc.Invoke(ctx, "/cms.CMSService/AllCinemaFilms", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cMSServiceClient) AddCinemaFilm(ctx context.Context, in *AddCinemaFilmReq, opts ...grpc.CallOption) (*AddCinemaFilmRsp, error) {
	out := new(AddCinemaFilmRsp)
	err := c.cc.Invoke(ctx, "/cms.CMSService/AddCinemaFilm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cMSServiceClient) UpdateCinemaFilm(ctx context.Context, in *UpdateCinemaFilmReq, opts ...grpc.CallOption) (*UpdateCinemaFilmRsp, error) {
	out := new(UpdateCinemaFilmRsp)
	err := c.cc.Invoke(ctx, "/cms.CMSService/UpdateCinemaFilm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cMSServiceClient) DeleteCinemaFilm(ctx context.Context, in *DeleteCinemaFilmReq, opts ...grpc.CallOption) (*DeleteCinemaFilmRsp, error) {
	out := new(DeleteCinemaFilmRsp)
	err := c.cc.Invoke(ctx, "/cms.CMSService/DeleteCinemaFilm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cMSServiceClient) RegisterCinema(ctx context.Context, in *RegisterCinemaReq, opts ...grpc.CallOption) (*RegisterCinemaRsp, error) {
	out := new(RegisterCinemaRsp)
	err := c.cc.Invoke(ctx, "/cms.CMSService/RegisterCinema", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cMSServiceClient) AllCinemaHall(ctx context.Context, in *AllCinemaHallReq, opts ...grpc.CallOption) (*AllCinemaHallRsp, error) {
	out := new(AllCinemaHallRsp)
	err := c.cc.Invoke(ctx, "/cms.CMSService/AllCinemaHall", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CMSServiceServer is the server API for CMSService service.
type CMSServiceServer interface {
	UserLogin(context.Context, *UserLoginReq) (*UserLoginRsp, error)
	UpdateMessage(context.Context, *UpdateMessageReq) (*UpdateMessageRsp, error)
	AllFilms(context.Context, *AllFilmsReq) (*AllFilmsRsp, error)
	UpdateFilm(context.Context, *UpdateFilmReq) (*UpdateFilmRsp, error)
	DeleteFilm(context.Context, *DeleteFilmReq) (*DeleteFilmRsp, error)
	AllUsers(context.Context, *AllUsersReq) (*AllUsersRsp, error)
	AllAdminUsers(context.Context, *AllAdminUsersReq) (*AllAdminUsersRsp, error)
	AllComments(context.Context, *AllCommentsReq) (*AllCommentsRsp, error)
	AllOrders(context.Context, *AllOrdersReq) (*AllOrdersRsp, error)
	AllAddress(context.Context, *AllAddressReq) (*AllAddressRsp, error)
	AddFilm(context.Context, *AddFilmReq) (*AddFilmRsp, error)
	AddAdminUser(context.Context, *AddAdminUserReq) (*AddAdminUserRsp, error)
	AddAddress(context.Context, *AddAddressReq) (*AddAddressRsp, error)
	UpdateAddress(context.Context, *UpdateAddressReq) (*UpdateAddressRsp, error)
	DeleteAddress(context.Context, *DeleteAddressReq) (*DeleteAddressRsp, error)
	DeleteAdminUser(context.Context, *DeleteAdminUserReq) (*DeleteAdminUserRsp, error)
	AllMovieHall(context.Context, *AllMovieHallReq) (*AllMovieHallRsp, error)
	AddMovieHall(context.Context, *AddMovieHallReq) (*AddMovieHallRsp, error)
	UpdateMovieHall(context.Context, *UpdateMovieHallReq) (*UpdateMovieHallRsp, error)
	DeleteMovieHall(context.Context, *DeleteMovieHallReq) (*DeleteMovieHallRsp, error)
	AllCinemaFilms(context.Context, *AllCinemaFilmsReq) (*AllCinemaFilmsRsp, error)
	AddCinemaFilm(context.Context, *AddCinemaFilmReq) (*AddCinemaFilmRsp, error)
	UpdateCinemaFilm(context.Context, *UpdateCinemaFilmReq) (*UpdateCinemaFilmRsp, error)
	DeleteCinemaFilm(context.Context, *DeleteCinemaFilmReq) (*DeleteCinemaFilmRsp, error)
	RegisterCinema(context.Context, *RegisterCinemaReq) (*RegisterCinemaRsp, error)
	AllCinemaHall(context.Context, *AllCinemaHallReq) (*AllCinemaHallRsp, error)
}

// UnimplementedCMSServiceServer can be embedded to have forward compatible implementations.
type UnimplementedCMSServiceServer struct {
}

func (*UnimplementedCMSServiceServer) UserLogin(context.Context, *UserLoginReq) (*UserLoginRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserLogin not implemented")
}
func (*UnimplementedCMSServiceServer) UpdateMessage(context.Context, *UpdateMessageReq) (*UpdateMessageRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMessage not implemented")
}
func (*UnimplementedCMSServiceServer) AllFilms(context.Context, *AllFilmsReq) (*AllFilmsRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllFilms not implemented")
}
func (*UnimplementedCMSServiceServer) UpdateFilm(context.Context, *UpdateFilmReq) (*UpdateFilmRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFilm not implemented")
}
func (*UnimplementedCMSServiceServer) DeleteFilm(context.Context, *DeleteFilmReq) (*DeleteFilmRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFilm not implemented")
}
func (*UnimplementedCMSServiceServer) AllUsers(context.Context, *AllUsersReq) (*AllUsersRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllUsers not implemented")
}
func (*UnimplementedCMSServiceServer) AllAdminUsers(context.Context, *AllAdminUsersReq) (*AllAdminUsersRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllAdminUsers not implemented")
}
func (*UnimplementedCMSServiceServer) AllComments(context.Context, *AllCommentsReq) (*AllCommentsRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllComments not implemented")
}
func (*UnimplementedCMSServiceServer) AllOrders(context.Context, *AllOrdersReq) (*AllOrdersRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllOrders not implemented")
}
func (*UnimplementedCMSServiceServer) AllAddress(context.Context, *AllAddressReq) (*AllAddressRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllAddress not implemented")
}
func (*UnimplementedCMSServiceServer) AddFilm(context.Context, *AddFilmReq) (*AddFilmRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddFilm not implemented")
}
func (*UnimplementedCMSServiceServer) AddAdminUser(context.Context, *AddAdminUserReq) (*AddAdminUserRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAdminUser not implemented")
}
func (*UnimplementedCMSServiceServer) AddAddress(context.Context, *AddAddressReq) (*AddAddressRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAddress not implemented")
}
func (*UnimplementedCMSServiceServer) UpdateAddress(context.Context, *UpdateAddressReq) (*UpdateAddressRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAddress not implemented")
}
func (*UnimplementedCMSServiceServer) DeleteAddress(context.Context, *DeleteAddressReq) (*DeleteAddressRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAddress not implemented")
}
func (*UnimplementedCMSServiceServer) DeleteAdminUser(context.Context, *DeleteAdminUserReq) (*DeleteAdminUserRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAdminUser not implemented")
}
func (*UnimplementedCMSServiceServer) AllMovieHall(context.Context, *AllMovieHallReq) (*AllMovieHallRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllMovieHall not implemented")
}
func (*UnimplementedCMSServiceServer) AddMovieHall(context.Context, *AddMovieHallReq) (*AddMovieHallRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMovieHall not implemented")
}
func (*UnimplementedCMSServiceServer) UpdateMovieHall(context.Context, *UpdateMovieHallReq) (*UpdateMovieHallRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMovieHall not implemented")
}
func (*UnimplementedCMSServiceServer) DeleteMovieHall(context.Context, *DeleteMovieHallReq) (*DeleteMovieHallRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMovieHall not implemented")
}
func (*UnimplementedCMSServiceServer) AllCinemaFilms(context.Context, *AllCinemaFilmsReq) (*AllCinemaFilmsRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllCinemaFilms not implemented")
}
func (*UnimplementedCMSServiceServer) AddCinemaFilm(context.Context, *AddCinemaFilmReq) (*AddCinemaFilmRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCinemaFilm not implemented")
}
func (*UnimplementedCMSServiceServer) UpdateCinemaFilm(context.Context, *UpdateCinemaFilmReq) (*UpdateCinemaFilmRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCinemaFilm not implemented")
}
func (*UnimplementedCMSServiceServer) DeleteCinemaFilm(context.Context, *DeleteCinemaFilmReq) (*DeleteCinemaFilmRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCinemaFilm not implemented")
}
func (*UnimplementedCMSServiceServer) RegisterCinema(context.Context, *RegisterCinemaReq) (*RegisterCinemaRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterCinema not implemented")
}
func (*UnimplementedCMSServiceServer) AllCinemaHall(context.Context, *AllCinemaHallReq) (*AllCinemaHallRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllCinemaHall not implemented")
}

func RegisterCMSServiceServer(s *grpc.Server, srv CMSServiceServer) {
	s.RegisterService(&_CMSService_serviceDesc, srv)
}

func _CMSService_UserLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserLoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CMSServiceServer).UserLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cms.CMSService/UserLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CMSServiceServer).UserLogin(ctx, req.(*UserLoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CMSService_UpdateMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMessageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CMSServiceServer).UpdateMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cms.CMSService/UpdateMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CMSServiceServer).UpdateMessage(ctx, req.(*UpdateMessageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CMSService_AllFilms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllFilmsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CMSServiceServer).AllFilms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cms.CMSService/AllFilms",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CMSServiceServer).AllFilms(ctx, req.(*AllFilmsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CMSService_UpdateFilm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFilmReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CMSServiceServer).UpdateFilm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cms.CMSService/UpdateFilm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CMSServiceServer).UpdateFilm(ctx, req.(*UpdateFilmReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CMSService_DeleteFilm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFilmReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CMSServiceServer).DeleteFilm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cms.CMSService/DeleteFilm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CMSServiceServer).DeleteFilm(ctx, req.(*DeleteFilmReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CMSService_AllUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllUsersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CMSServiceServer).AllUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cms.CMSService/AllUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CMSServiceServer).AllUsers(ctx, req.(*AllUsersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CMSService_AllAdminUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllAdminUsersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CMSServiceServer).AllAdminUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cms.CMSService/AllAdminUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CMSServiceServer).AllAdminUsers(ctx, req.(*AllAdminUsersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CMSService_AllComments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllCommentsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CMSServiceServer).AllComments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cms.CMSService/AllComments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CMSServiceServer).AllComments(ctx, req.(*AllCommentsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CMSService_AllOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllOrdersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CMSServiceServer).AllOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cms.CMSService/AllOrders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CMSServiceServer).AllOrders(ctx, req.(*AllOrdersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CMSService_AllAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllAddressReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CMSServiceServer).AllAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cms.CMSService/AllAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CMSServiceServer).AllAddress(ctx, req.(*AllAddressReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CMSService_AddFilm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddFilmReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CMSServiceServer).AddFilm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cms.CMSService/AddFilm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CMSServiceServer).AddFilm(ctx, req.(*AddFilmReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CMSService_AddAdminUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddAdminUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CMSServiceServer).AddAdminUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cms.CMSService/AddAdminUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CMSServiceServer).AddAdminUser(ctx, req.(*AddAdminUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CMSService_AddAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddAddressReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CMSServiceServer).AddAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cms.CMSService/AddAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CMSServiceServer).AddAddress(ctx, req.(*AddAddressReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CMSService_UpdateAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAddressReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CMSServiceServer).UpdateAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cms.CMSService/UpdateAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CMSServiceServer).UpdateAddress(ctx, req.(*UpdateAddressReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CMSService_DeleteAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAddressReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CMSServiceServer).DeleteAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cms.CMSService/DeleteAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CMSServiceServer).DeleteAddress(ctx, req.(*DeleteAddressReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CMSService_DeleteAdminUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAdminUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CMSServiceServer).DeleteAdminUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cms.CMSService/DeleteAdminUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CMSServiceServer).DeleteAdminUser(ctx, req.(*DeleteAdminUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CMSService_AllMovieHall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllMovieHallReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CMSServiceServer).AllMovieHall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cms.CMSService/AllMovieHall",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CMSServiceServer).AllMovieHall(ctx, req.(*AllMovieHallReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CMSService_AddMovieHall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMovieHallReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CMSServiceServer).AddMovieHall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cms.CMSService/AddMovieHall",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CMSServiceServer).AddMovieHall(ctx, req.(*AddMovieHallReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CMSService_UpdateMovieHall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMovieHallReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CMSServiceServer).UpdateMovieHall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cms.CMSService/UpdateMovieHall",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CMSServiceServer).UpdateMovieHall(ctx, req.(*UpdateMovieHallReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CMSService_DeleteMovieHall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMovieHallReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CMSServiceServer).DeleteMovieHall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cms.CMSService/DeleteMovieHall",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CMSServiceServer).DeleteMovieHall(ctx, req.(*DeleteMovieHallReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CMSService_AllCinemaFilms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllCinemaFilmsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CMSServiceServer).AllCinemaFilms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cms.CMSService/AllCinemaFilms",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CMSServiceServer).AllCinemaFilms(ctx, req.(*AllCinemaFilmsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CMSService_AddCinemaFilm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCinemaFilmReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CMSServiceServer).AddCinemaFilm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cms.CMSService/AddCinemaFilm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CMSServiceServer).AddCinemaFilm(ctx, req.(*AddCinemaFilmReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CMSService_UpdateCinemaFilm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCinemaFilmReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CMSServiceServer).UpdateCinemaFilm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cms.CMSService/UpdateCinemaFilm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CMSServiceServer).UpdateCinemaFilm(ctx, req.(*UpdateCinemaFilmReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CMSService_DeleteCinemaFilm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCinemaFilmReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CMSServiceServer).DeleteCinemaFilm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cms.CMSService/DeleteCinemaFilm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CMSServiceServer).DeleteCinemaFilm(ctx, req.(*DeleteCinemaFilmReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CMSService_RegisterCinema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterCinemaReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CMSServiceServer).RegisterCinema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cms.CMSService/RegisterCinema",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CMSServiceServer).RegisterCinema(ctx, req.(*RegisterCinemaReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CMSService_AllCinemaHall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllCinemaHallReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CMSServiceServer).AllCinemaHall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cms.CMSService/AllCinemaHall",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CMSServiceServer).AllCinemaHall(ctx, req.(*AllCinemaHallReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _CMSService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cms.CMSService",
	HandlerType: (*CMSServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UserLogin",
			Handler:    _CMSService_UserLogin_Handler,
		},
		{
			MethodName: "UpdateMessage",
			Handler:    _CMSService_UpdateMessage_Handler,
		},
		{
			MethodName: "AllFilms",
			Handler:    _CMSService_AllFilms_Handler,
		},
		{
			MethodName: "UpdateFilm",
			Handler:    _CMSService_UpdateFilm_Handler,
		},
		{
			MethodName: "DeleteFilm",
			Handler:    _CMSService_DeleteFilm_Handler,
		},
		{
			MethodName: "AllUsers",
			Handler:    _CMSService_AllUsers_Handler,
		},
		{
			MethodName: "AllAdminUsers",
			Handler:    _CMSService_AllAdminUsers_Handler,
		},
		{
			MethodName: "AllComments",
			Handler:    _CMSService_AllComments_Handler,
		},
		{
			MethodName: "AllOrders",
			Handler:    _CMSService_AllOrders_Handler,
		},
		{
			MethodName: "AllAddress",
			Handler:    _CMSService_AllAddress_Handler,
		},
		{
			MethodName: "AddFilm",
			Handler:    _CMSService_AddFilm_Handler,
		},
		{
			MethodName: "AddAdminUser",
			Handler:    _CMSService_AddAdminUser_Handler,
		},
		{
			MethodName: "AddAddress",
			Handler:    _CMSService_AddAddress_Handler,
		},
		{
			MethodName: "UpdateAddress",
			Handler:    _CMSService_UpdateAddress_Handler,
		},
		{
			MethodName: "DeleteAddress",
			Handler:    _CMSService_DeleteAddress_Handler,
		},
		{
			MethodName: "DeleteAdminUser",
			Handler:    _CMSService_DeleteAdminUser_Handler,
		},
		{
			MethodName: "AllMovieHall",
			Handler:    _CMSService_AllMovieHall_Handler,
		},
		{
			MethodName: "AddMovieHall",
			Handler:    _CMSService_AddMovieHall_Handler,
		},
		{
			MethodName: "UpdateMovieHall",
			Handler:    _CMSService_UpdateMovieHall_Handler,
		},
		{
			MethodName: "DeleteMovieHall",
			Handler:    _CMSService_DeleteMovieHall_Handler,
		},
		{
			MethodName: "AllCinemaFilms",
			Handler:    _CMSService_AllCinemaFilms_Handler,
		},
		{
			MethodName: "AddCinemaFilm",
			Handler:    _CMSService_AddCinemaFilm_Handler,
		},
		{
			MethodName: "UpdateCinemaFilm",
			Handler:    _CMSService_UpdateCinemaFilm_Handler,
		},
		{
			MethodName: "DeleteCinemaFilm",
			Handler:    _CMSService_DeleteCinemaFilm_Handler,
		},
		{
			MethodName: "RegisterCinema",
			Handler:    _CMSService_RegisterCinema_Handler,
		},
		{
			MethodName: "AllCinemaHall",
			Handler:    _CMSService_AllCinemaHall_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cms.proto",
}
