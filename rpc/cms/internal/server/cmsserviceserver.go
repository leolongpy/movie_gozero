// Code generated by goctl. DO NOT EDIT!
// Source: cms.proto

package server

import (
	"context"

	"movie_gozero/rpc/cms/internal/logic"
	"movie_gozero/rpc/cms/internal/svc"
	"movie_gozero/rpc/cms/pb"
)

type CMSServiceServer struct {
	svcCtx *svc.ServiceContext
}

func NewCMSServiceServer(svcCtx *svc.ServiceContext) *CMSServiceServer {
	return &CMSServiceServer{
		svcCtx: svcCtx,
	}
}

func (s *CMSServiceServer) UserLogin(ctx context.Context, in *pb.UserLoginReq) (*pb.UserLoginRsp, error) {
	l := logic.NewUserLoginLogic(ctx, s.svcCtx)
	return l.UserLogin(in)
}

func (s *CMSServiceServer) UpdateMessage(ctx context.Context, in *pb.UpdateMessageReq) (*pb.UpdateMessageRsp, error) {
	l := logic.NewUpdateMessageLogic(ctx, s.svcCtx)
	return l.UpdateMessage(in)
}

func (s *CMSServiceServer) AllFilms(ctx context.Context, in *pb.AllFilmsReq) (*pb.AllFilmsRsp, error) {
	l := logic.NewAllFilmsLogic(ctx, s.svcCtx)
	return l.AllFilms(in)
}

func (s *CMSServiceServer) UpdateFilm(ctx context.Context, in *pb.UpdateFilmReq) (*pb.UpdateFilmRsp, error) {
	l := logic.NewUpdateFilmLogic(ctx, s.svcCtx)
	return l.UpdateFilm(in)
}

func (s *CMSServiceServer) DeleteFilm(ctx context.Context, in *pb.DeleteFilmReq) (*pb.DeleteFilmRsp, error) {
	l := logic.NewDeleteFilmLogic(ctx, s.svcCtx)
	return l.DeleteFilm(in)
}

func (s *CMSServiceServer) AllUsers(ctx context.Context, in *pb.AllUsersReq) (*pb.AllUsersRsp, error) {
	l := logic.NewAllUsersLogic(ctx, s.svcCtx)
	return l.AllUsers(in)
}

func (s *CMSServiceServer) AllAdminUsers(ctx context.Context, in *pb.AllAdminUsersReq) (*pb.AllAdminUsersRsp, error) {
	l := logic.NewAllAdminUsersLogic(ctx, s.svcCtx)
	return l.AllAdminUsers(in)
}

func (s *CMSServiceServer) AllComments(ctx context.Context, in *pb.AllCommentsReq) (*pb.AllCommentsRsp, error) {
	l := logic.NewAllCommentsLogic(ctx, s.svcCtx)
	return l.AllComments(in)
}

func (s *CMSServiceServer) AllOrders(ctx context.Context, in *pb.AllOrdersReq) (*pb.AllOrdersRsp, error) {
	l := logic.NewAllOrdersLogic(ctx, s.svcCtx)
	return l.AllOrders(in)
}

func (s *CMSServiceServer) AllAddress(ctx context.Context, in *pb.AllAddressReq) (*pb.AllAddressRsp, error) {
	l := logic.NewAllAddressLogic(ctx, s.svcCtx)
	return l.AllAddress(in)
}

func (s *CMSServiceServer) AddFilm(ctx context.Context, in *pb.AddFilmReq) (*pb.AddFilmRsp, error) {
	l := logic.NewAddFilmLogic(ctx, s.svcCtx)
	return l.AddFilm(in)
}

func (s *CMSServiceServer) AddAdminUser(ctx context.Context, in *pb.AddAdminUserReq) (*pb.AddAdminUserRsp, error) {
	l := logic.NewAddAdminUserLogic(ctx, s.svcCtx)
	return l.AddAdminUser(in)
}

func (s *CMSServiceServer) AddAddress(ctx context.Context, in *pb.AddAddressReq) (*pb.AddAddressRsp, error) {
	l := logic.NewAddAddressLogic(ctx, s.svcCtx)
	return l.AddAddress(in)
}

func (s *CMSServiceServer) UpdateAddress(ctx context.Context, in *pb.UpdateAddressReq) (*pb.UpdateAddressRsp, error) {
	l := logic.NewUpdateAddressLogic(ctx, s.svcCtx)
	return l.UpdateAddress(in)
}

func (s *CMSServiceServer) DeleteAddress(ctx context.Context, in *pb.DeleteAddressReq) (*pb.DeleteAddressRsp, error) {
	l := logic.NewDeleteAddressLogic(ctx, s.svcCtx)
	return l.DeleteAddress(in)
}

func (s *CMSServiceServer) DeleteAdminUser(ctx context.Context, in *pb.DeleteAdminUserReq) (*pb.DeleteAdminUserRsp, error) {
	l := logic.NewDeleteAdminUserLogic(ctx, s.svcCtx)
	return l.DeleteAdminUser(in)
}

func (s *CMSServiceServer) AllMovieHall(ctx context.Context, in *pb.AllMovieHallReq) (*pb.AllMovieHallRsp, error) {
	l := logic.NewAllMovieHallLogic(ctx, s.svcCtx)
	return l.AllMovieHall(in)
}

func (s *CMSServiceServer) AddMovieHall(ctx context.Context, in *pb.AddMovieHallReq) (*pb.AddMovieHallRsp, error) {
	l := logic.NewAddMovieHallLogic(ctx, s.svcCtx)
	return l.AddMovieHall(in)
}

func (s *CMSServiceServer) UpdateMovieHall(ctx context.Context, in *pb.UpdateMovieHallReq) (*pb.UpdateMovieHallRsp, error) {
	l := logic.NewUpdateMovieHallLogic(ctx, s.svcCtx)
	return l.UpdateMovieHall(in)
}

func (s *CMSServiceServer) DeleteMovieHall(ctx context.Context, in *pb.DeleteMovieHallReq) (*pb.DeleteMovieHallRsp, error) {
	l := logic.NewDeleteMovieHallLogic(ctx, s.svcCtx)
	return l.DeleteMovieHall(in)
}

func (s *CMSServiceServer) AllCinemaFilms(ctx context.Context, in *pb.AllCinemaFilmsReq) (*pb.AllCinemaFilmsRsp, error) {
	l := logic.NewAllCinemaFilmsLogic(ctx, s.svcCtx)
	return l.AllCinemaFilms(in)
}

func (s *CMSServiceServer) AddCinemaFilm(ctx context.Context, in *pb.AddCinemaFilmReq) (*pb.AddCinemaFilmRsp, error) {
	l := logic.NewAddCinemaFilmLogic(ctx, s.svcCtx)
	return l.AddCinemaFilm(in)
}

func (s *CMSServiceServer) UpdateCinemaFilm(ctx context.Context, in *pb.UpdateCinemaFilmReq) (*pb.UpdateCinemaFilmRsp, error) {
	l := logic.NewUpdateCinemaFilmLogic(ctx, s.svcCtx)
	return l.UpdateCinemaFilm(in)
}

func (s *CMSServiceServer) DeleteCinemaFilm(ctx context.Context, in *pb.DeleteCinemaFilmReq) (*pb.DeleteCinemaFilmRsp, error) {
	l := logic.NewDeleteCinemaFilmLogic(ctx, s.svcCtx)
	return l.DeleteCinemaFilm(in)
}

func (s *CMSServiceServer) RegisterCinema(ctx context.Context, in *pb.RegisterCinemaReq) (*pb.RegisterCinemaRsp, error) {
	l := logic.NewRegisterCinemaLogic(ctx, s.svcCtx)
	return l.RegisterCinema(in)
}

func (s *CMSServiceServer) AllCinemaHall(ctx context.Context, in *pb.AllCinemaHallReq) (*pb.AllCinemaHallRsp, error) {
	l := logic.NewAllCinemaHallLogic(ctx, s.svcCtx)
	return l.AllCinemaHall(in)
}
