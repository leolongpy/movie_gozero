// Code generated by goctl. DO NOT EDIT!
// Source: film.proto

package filmserviceext

import (
	"context"

	"movie_gozero/rpc/film/pb"

	"github.com/tal-tech/go-zero/zrpc"
)

type (
	Movie                    = pb.Movie
	Type                     = pb.Type
	SearchMovie              = pb.SearchMovie
	Rating                   = pb.Rating
	Image                    = pb.Image
	HotMovie                 = pb.HotMovie
	FilmAllMessage           = pb.FilmAllMessage
	ImageAllReq              = pb.ImageAllReq
	Release                  = pb.Release
	MovieCreditsWithTypesRsp = pb.MovieCreditsWithTypesRsp
	MovieComingNewReq        = pb.MovieComingNewReq
	LocationMoviesReq        = pb.LocationMoviesReq
	LocationMoviesRsp        = pb.LocationMoviesRsp
	HotPlayMoviesReq         = pb.HotPlayMoviesReq
	HotPlayMoviesRsp         = pb.HotPlayMoviesRsp
	MovieDetailReq           = pb.MovieDetailReq
	MovieCreditsWithTypesReq = pb.MovieCreditsWithTypesReq
	Genres                   = pb.Genres
	Images                   = pb.Images
	MovieDetailRsp           = pb.MovieDetailRsp
	SearchRsp                = pb.SearchRsp
	SearchReq                = pb.SearchReq
	DayMovie                 = pb.DayMovie
	GetFilmsByCidADayRsp     = pb.GetFilmsByCidADayRsp
	ImageAllRsp              = pb.ImageAllRsp
	GetFilmsByCidADayReq     = pb.GetFilmsByCidADayReq
	Persons                  = pb.Persons
	MovieComingNewRsp        = pb.MovieComingNewRsp

	FilmServiceExt interface {
		//  获取正在售票的影片
		HotPlayMovies(ctx context.Context, in *HotPlayMoviesReq) (*HotPlayMoviesRsp, error)
		//  电影详情
		MovieDetail(ctx context.Context, in *MovieDetailReq) (*MovieDetailRsp, error)
		//  获取导演与演员信息
		MovieCreditsWithTypes(ctx context.Context, in *MovieCreditsWithTypesReq) (*MovieCreditsWithTypesRsp, error)
		//  获取海报信息
		ImageAll(ctx context.Context, in *ImageAllReq) (*ImageAllRsp, error)
		//  正在热映的影片
		LocationMovies(ctx context.Context, in *LocationMoviesReq) (*LocationMoviesRsp, error)
		//  即将上映的影片
		MovieComingNew(ctx context.Context, in *MovieComingNewReq) (*MovieComingNewRsp, error)
		//  图片搜索
		Search(ctx context.Context, in *SearchReq) (*SearchRsp, error)
		//  根据影院id和时间获取正在销售的影片信息
		GetFilmsByCidADay(ctx context.Context, in *GetFilmsByCidADayReq) (*GetFilmsByCidADayRsp, error)
	}

	defaultFilmServiceExt struct {
		cli zrpc.Client
	}
)

func NewFilmServiceExt(cli zrpc.Client) FilmServiceExt {
	return &defaultFilmServiceExt{
		cli: cli,
	}
}

//  获取正在售票的影片
func (m *defaultFilmServiceExt) HotPlayMovies(ctx context.Context, in *HotPlayMoviesReq) (*HotPlayMoviesRsp, error) {
	client := pb.NewFilmServiceExtClient(m.cli.Conn())
	return client.HotPlayMovies(ctx, in)
}

//  电影详情
func (m *defaultFilmServiceExt) MovieDetail(ctx context.Context, in *MovieDetailReq) (*MovieDetailRsp, error) {
	client := pb.NewFilmServiceExtClient(m.cli.Conn())
	return client.MovieDetail(ctx, in)
}

//  获取导演与演员信息
func (m *defaultFilmServiceExt) MovieCreditsWithTypes(ctx context.Context, in *MovieCreditsWithTypesReq) (*MovieCreditsWithTypesRsp, error) {
	client := pb.NewFilmServiceExtClient(m.cli.Conn())
	return client.MovieCreditsWithTypes(ctx, in)
}

//  获取海报信息
func (m *defaultFilmServiceExt) ImageAll(ctx context.Context, in *ImageAllReq) (*ImageAllRsp, error) {
	client := pb.NewFilmServiceExtClient(m.cli.Conn())
	return client.ImageAll(ctx, in)
}

//  正在热映的影片
func (m *defaultFilmServiceExt) LocationMovies(ctx context.Context, in *LocationMoviesReq) (*LocationMoviesRsp, error) {
	client := pb.NewFilmServiceExtClient(m.cli.Conn())
	return client.LocationMovies(ctx, in)
}

//  即将上映的影片
func (m *defaultFilmServiceExt) MovieComingNew(ctx context.Context, in *MovieComingNewReq) (*MovieComingNewRsp, error) {
	client := pb.NewFilmServiceExtClient(m.cli.Conn())
	return client.MovieComingNew(ctx, in)
}

//  图片搜索
func (m *defaultFilmServiceExt) Search(ctx context.Context, in *SearchReq) (*SearchRsp, error) {
	client := pb.NewFilmServiceExtClient(m.cli.Conn())
	return client.Search(ctx, in)
}

//  根据影院id和时间获取正在销售的影片信息
func (m *defaultFilmServiceExt) GetFilmsByCidADay(ctx context.Context, in *GetFilmsByCidADayReq) (*GetFilmsByCidADayRsp, error) {
	client := pb.NewFilmServiceExtClient(m.cli.Conn())
	return client.GetFilmsByCidADay(ctx, in)
}
