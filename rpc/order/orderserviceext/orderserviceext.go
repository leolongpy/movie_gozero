// Code generated by goctl. DO NOT EDIT!
// Source: order.proto

package orderserviceext

import (
	"context"

	"movie_gozero/rpc/order/pb"

	"github.com/tal-tech/go-zero/zrpc"
)

type (
	Order                = pb.Order
	LookOrdersReq        = pb.LookOrdersReq
	LookOrdersRsp        = pb.LookOrdersRsp
	OrderCommentRsp      = pb.OrderCommentRsp
	WantTicketRsp        = pb.WantTicketRsp
	PayOrderRsp          = pb.PayOrderRsp
	UndoOrderReq         = pb.UndoOrderReq
	AlreadyMovie         = pb.AlreadyMovie
	UndoOrderRsp         = pb.UndoOrderRsp
	GetOrderMessageReq   = pb.GetOrderMessageReq
	LookAlreadyOrdersReq = pb.LookAlreadyOrdersReq
	OrderCommentReq      = pb.OrderCommentReq
	WantTicketReq        = pb.WantTicketReq
	TicketReq            = pb.TicketReq
	MovieTicket          = pb.MovieTicket
	PayOrderReq          = pb.PayOrderReq
	TicketRsp            = pb.TicketRsp
	GetOrderMessageRsp   = pb.GetOrderMessageRsp
	TicketDetail         = pb.TicketDetail
	LookAlreadyOrdersRsp = pb.LookAlreadyOrdersRsp

	OrderServiceExt interface {
		// 想看
		WantTicket(ctx context.Context, in *WantTicketReq) (*WantTicketRsp, error)
		// 下单
		Ticket(ctx context.Context, in *TicketReq) (*TicketRsp, error)
		// 支付
		PayOrder(ctx context.Context, in *PayOrderReq) (*PayOrderRsp, error)
		// 取消订单
		UndoOrder(ctx context.Context, in *UndoOrderReq) (*UndoOrderRsp, error)
		//  根据订单号获取电影票的信息
		GetOrderMessage(ctx context.Context, in *GetOrderMessageReq) (*GetOrderMessageRsp, error)
		// 查看所有电影票
		LookOrders(ctx context.Context, in *LookOrdersReq) (*LookOrdersRsp, error)
		// 查看所有看过的电影票
		LookAlreadyOrders(ctx context.Context, in *LookAlreadyOrdersReq) (*LookAlreadyOrdersRsp, error)
		//  进行评分
		OrderComment(ctx context.Context, in *OrderCommentReq) (*OrderCommentRsp, error)
	}

	defaultOrderServiceExt struct {
		cli zrpc.Client
	}
)

func NewOrderServiceExt(cli zrpc.Client) OrderServiceExt {
	return &defaultOrderServiceExt{
		cli: cli,
	}
}

// 想看
func (m *defaultOrderServiceExt) WantTicket(ctx context.Context, in *WantTicketReq) (*WantTicketRsp, error) {
	client := pb.NewOrderServiceExtClient(m.cli.Conn())
	return client.WantTicket(ctx, in)
}

// 下单
func (m *defaultOrderServiceExt) Ticket(ctx context.Context, in *TicketReq) (*TicketRsp, error) {
	client := pb.NewOrderServiceExtClient(m.cli.Conn())
	return client.Ticket(ctx, in)
}

// 支付
func (m *defaultOrderServiceExt) PayOrder(ctx context.Context, in *PayOrderReq) (*PayOrderRsp, error) {
	client := pb.NewOrderServiceExtClient(m.cli.Conn())
	return client.PayOrder(ctx, in)
}

// 取消订单
func (m *defaultOrderServiceExt) UndoOrder(ctx context.Context, in *UndoOrderReq) (*UndoOrderRsp, error) {
	client := pb.NewOrderServiceExtClient(m.cli.Conn())
	return client.UndoOrder(ctx, in)
}

//  根据订单号获取电影票的信息
func (m *defaultOrderServiceExt) GetOrderMessage(ctx context.Context, in *GetOrderMessageReq) (*GetOrderMessageRsp, error) {
	client := pb.NewOrderServiceExtClient(m.cli.Conn())
	return client.GetOrderMessage(ctx, in)
}

// 查看所有电影票
func (m *defaultOrderServiceExt) LookOrders(ctx context.Context, in *LookOrdersReq) (*LookOrdersRsp, error) {
	client := pb.NewOrderServiceExtClient(m.cli.Conn())
	return client.LookOrders(ctx, in)
}

// 查看所有看过的电影票
func (m *defaultOrderServiceExt) LookAlreadyOrders(ctx context.Context, in *LookAlreadyOrdersReq) (*LookAlreadyOrdersRsp, error) {
	client := pb.NewOrderServiceExtClient(m.cli.Conn())
	return client.LookAlreadyOrders(ctx, in)
}

//  进行评分
func (m *defaultOrderServiceExt) OrderComment(ctx context.Context, in *OrderCommentReq) (*OrderCommentRsp, error) {
	client := pb.NewOrderServiceExtClient(m.cli.Conn())
	return client.OrderComment(ctx, in)
}
