// Code generated by goctl. DO NOT EDIT!
// Source: user.proto

package userservice

import (
	"context"

	"movie_gozero/rpc/user/pb"

	"github.com/tal-tech/go-zero/zrpc"
)

type (
	LoginAccountRsp      = pb.LoginAccountRsp
	ResetAccountReq      = pb.ResetAccountReq
	WantScoreReq         = pb.WantScoreReq
	WantScoreRsp         = pb.WantScoreRsp
	UpdateUserProfileReq = pb.UpdateUserProfileReq
	UpdateUserProfileRsp = pb.UpdateUserProfileRsp
	LoginAccountReq      = pb.LoginAccountReq
	RegistAccountRsp     = pb.RegistAccountRsp
	ResetAccountRsp      = pb.ResetAccountRsp
	RegistAccountReq     = pb.RegistAccountReq

	UserService interface {
		//  注册用户
		RegistAccount(ctx context.Context, in *RegistAccountReq) (*RegistAccountRsp, error)
		//  用户登录
		LoginAccount(ctx context.Context, in *LoginAccountReq) (*LoginAccountRsp, error)
		//  密码重置
		ResetAccount(ctx context.Context, in *ResetAccountReq) (*ResetAccountRsp, error)
		// 评分
		WantScore(ctx context.Context, in *WantScoreReq) (*WantScoreRsp, error)
		// 修改用户信息
		UpdateUserProfile(ctx context.Context, in *UpdateUserProfileReq) (*UpdateUserProfileRsp, error)
	}

	defaultUserService struct {
		cli zrpc.Client
	}
)

func NewUserService(cli zrpc.Client) UserService {
	return &defaultUserService{
		cli: cli,
	}
}

//  注册用户
func (m *defaultUserService) RegistAccount(ctx context.Context, in *RegistAccountReq) (*RegistAccountRsp, error) {
	client := pb.NewUserServiceClient(m.cli.Conn())
	return client.RegistAccount(ctx, in)
}

//  用户登录
func (m *defaultUserService) LoginAccount(ctx context.Context, in *LoginAccountReq) (*LoginAccountRsp, error) {
	client := pb.NewUserServiceClient(m.cli.Conn())
	return client.LoginAccount(ctx, in)
}

//  密码重置
func (m *defaultUserService) ResetAccount(ctx context.Context, in *ResetAccountReq) (*ResetAccountRsp, error) {
	client := pb.NewUserServiceClient(m.cli.Conn())
	return client.ResetAccount(ctx, in)
}

// 评分
func (m *defaultUserService) WantScore(ctx context.Context, in *WantScoreReq) (*WantScoreRsp, error) {
	client := pb.NewUserServiceClient(m.cli.Conn())
	return client.WantScore(ctx, in)
}

// 修改用户信息
func (m *defaultUserService) UpdateUserProfile(ctx context.Context, in *UpdateUserProfileReq) (*UpdateUserProfileRsp, error) {
	client := pb.NewUserServiceClient(m.cli.Conn())
	return client.UpdateUserProfile(ctx, in)
}
