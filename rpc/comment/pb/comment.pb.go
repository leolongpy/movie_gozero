// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.12.4
// source: comment.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type HotCommentReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MovieId int64 `protobuf:"varint,2,opt,name=movieId,proto3" json:"movieId,omitempty"`
}

func (x *HotCommentReq) Reset() {
	*x = HotCommentReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_comment_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HotCommentReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HotCommentReq) ProtoMessage() {}

func (x *HotCommentReq) ProtoReflect() protoreflect.Message {
	mi := &file_comment_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HotCommentReq.ProtoReflect.Descriptor instead.
func (*HotCommentReq) Descriptor() ([]byte, []int) {
	return file_comment_proto_rawDescGZIP(), []int{0}
}

func (x *HotCommentReq) GetMovieId() int64 {
	if x != nil {
		return x.MovieId
	}
	return 0
}

type HotCommentRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *CommentData `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *HotCommentRsp) Reset() {
	*x = HotCommentRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_comment_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HotCommentRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HotCommentRsp) ProtoMessage() {}

func (x *HotCommentRsp) ProtoReflect() protoreflect.Message {
	mi := &file_comment_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HotCommentRsp.ProtoReflect.Descriptor instead.
func (*HotCommentRsp) Descriptor() ([]byte, []int) {
	return file_comment_proto_rawDescGZIP(), []int{1}
}

func (x *HotCommentRsp) GetData() *CommentData {
	if x != nil {
		return x.Data
	}
	return nil
}

type CommentData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mini *CommentMini `protobuf:"bytes,1,opt,name=mini,proto3" json:"mini,omitempty"`
	Plus *CommentPlus `protobuf:"bytes,2,opt,name=plus,proto3" json:"plus,omitempty"`
}

func (x *CommentData) Reset() {
	*x = CommentData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_comment_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommentData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommentData) ProtoMessage() {}

func (x *CommentData) ProtoReflect() protoreflect.Message {
	mi := &file_comment_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommentData.ProtoReflect.Descriptor instead.
func (*CommentData) Descriptor() ([]byte, []int) {
	return file_comment_proto_rawDescGZIP(), []int{2}
}

func (x *CommentData) GetMini() *CommentMini {
	if x != nil {
		return x.Mini
	}
	return nil
}

func (x *CommentData) GetPlus() *CommentPlus {
	if x != nil {
		return x.Plus
	}
	return nil
}

type CommentMini struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List  []*CommentRecord `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	Total int64            `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *CommentMini) Reset() {
	*x = CommentMini{}
	if protoimpl.UnsafeEnabled {
		mi := &file_comment_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommentMini) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommentMini) ProtoMessage() {}

func (x *CommentMini) ProtoReflect() protoreflect.Message {
	mi := &file_comment_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommentMini.ProtoReflect.Descriptor instead.
func (*CommentMini) Descriptor() ([]byte, []int) {
	return file_comment_proto_rawDescGZIP(), []int{3}
}

func (x *CommentMini) GetList() []*CommentRecord {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *CommentMini) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type CommentPlus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List  []*CommentRecord `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	Total int64            `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *CommentPlus) Reset() {
	*x = CommentPlus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_comment_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommentPlus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommentPlus) ProtoMessage() {}

func (x *CommentPlus) ProtoReflect() protoreflect.Message {
	mi := &file_comment_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommentPlus.ProtoReflect.Descriptor instead.
func (*CommentPlus) Descriptor() ([]byte, []int) {
	return file_comment_proto_rawDescGZIP(), []int{4}
}

func (x *CommentPlus) GetList() []*CommentRecord {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *CommentPlus) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type CommentRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title     string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Content   string `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
	HeadImg   string `protobuf:"bytes,3,opt,name=headImg,proto3" json:"headImg,omitempty"`
	Nickname  string `protobuf:"bytes,4,opt,name=nickname,proto3" json:"nickname,omitempty"`
	CreateAt  string `protobuf:"bytes,5,opt,name=createAt,proto3" json:"createAt,omitempty"`
	UpNum     int64  `protobuf:"varint,6,opt,name=upNum,proto3" json:"upNum,omitempty"`
	CommentID int64  `protobuf:"varint,7,opt,name=commentID,proto3" json:"commentID,omitempty"`
}

func (x *CommentRecord) Reset() {
	*x = CommentRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_comment_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommentRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommentRecord) ProtoMessage() {}

func (x *CommentRecord) ProtoReflect() protoreflect.Message {
	mi := &file_comment_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommentRecord.ProtoReflect.Descriptor instead.
func (*CommentRecord) Descriptor() ([]byte, []int) {
	return file_comment_proto_rawDescGZIP(), []int{5}
}

func (x *CommentRecord) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *CommentRecord) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *CommentRecord) GetHeadImg() string {
	if x != nil {
		return x.HeadImg
	}
	return ""
}

func (x *CommentRecord) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *CommentRecord) GetCreateAt() string {
	if x != nil {
		return x.CreateAt
	}
	return ""
}

func (x *CommentRecord) GetUpNum() int64 {
	if x != nil {
		return x.UpNum
	}
	return 0
}

func (x *CommentRecord) GetCommentID() int64 {
	if x != nil {
		return x.CommentID
	}
	return 0
}

type MakeCommentReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MovieId  int64  `protobuf:"varint,1,opt,name=movieId,proto3" json:"movieId,omitempty"` // 影片id
	Title    string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`      // 标题
	HeadImg  string `protobuf:"bytes,3,opt,name=headImg,proto3" json:"headImg,omitempty"`
	Nickname string `protobuf:"bytes,4,opt,name=nickname,proto3" json:"nickname,omitempty"` // 用户昵称
	UserId   int64  `protobuf:"varint,5,opt,name=userId,proto3" json:"userId,omitempty"`    // 用户id
	Content  string `protobuf:"bytes,6,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *MakeCommentReq) Reset() {
	*x = MakeCommentReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_comment_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MakeCommentReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MakeCommentReq) ProtoMessage() {}

func (x *MakeCommentReq) ProtoReflect() protoreflect.Message {
	mi := &file_comment_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MakeCommentReq.ProtoReflect.Descriptor instead.
func (*MakeCommentReq) Descriptor() ([]byte, []int) {
	return file_comment_proto_rawDescGZIP(), []int{6}
}

func (x *MakeCommentReq) GetMovieId() int64 {
	if x != nil {
		return x.MovieId
	}
	return 0
}

func (x *MakeCommentReq) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *MakeCommentReq) GetHeadImg() string {
	if x != nil {
		return x.HeadImg
	}
	return ""
}

func (x *MakeCommentReq) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *MakeCommentReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *MakeCommentReq) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

type MakeCommentRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MakeCommentRsp) Reset() {
	*x = MakeCommentRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_comment_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MakeCommentRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MakeCommentRsp) ProtoMessage() {}

func (x *MakeCommentRsp) ProtoReflect() protoreflect.Message {
	mi := &file_comment_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MakeCommentRsp.ProtoReflect.Descriptor instead.
func (*MakeCommentRsp) Descriptor() ([]byte, []int) {
	return file_comment_proto_rawDescGZIP(), []int{7}
}

type UpNumCommentReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommentID int64 `protobuf:"varint,1,opt,name=commentID,proto3" json:"commentID,omitempty"`
}

func (x *UpNumCommentReq) Reset() {
	*x = UpNumCommentReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_comment_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpNumCommentReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpNumCommentReq) ProtoMessage() {}

func (x *UpNumCommentReq) ProtoReflect() protoreflect.Message {
	mi := &file_comment_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpNumCommentReq.ProtoReflect.Descriptor instead.
func (*UpNumCommentReq) Descriptor() ([]byte, []int) {
	return file_comment_proto_rawDescGZIP(), []int{8}
}

func (x *UpNumCommentReq) GetCommentID() int64 {
	if x != nil {
		return x.CommentID
	}
	return 0
}

type UpNumCommentRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UpNum int64 `protobuf:"varint,1,opt,name=upNum,proto3" json:"upNum,omitempty"`
}

func (x *UpNumCommentRsp) Reset() {
	*x = UpNumCommentRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_comment_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpNumCommentRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpNumCommentRsp) ProtoMessage() {}

func (x *UpNumCommentRsp) ProtoReflect() protoreflect.Message {
	mi := &file_comment_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpNumCommentRsp.ProtoReflect.Descriptor instead.
func (*UpNumCommentRsp) Descriptor() ([]byte, []int) {
	return file_comment_proto_rawDescGZIP(), []int{9}
}

func (x *UpNumCommentRsp) GetUpNum() int64 {
	if x != nil {
		return x.UpNum
	}
	return 0
}

type MyCommentsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int64 `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
}

func (x *MyCommentsReq) Reset() {
	*x = MyCommentsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_comment_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MyCommentsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MyCommentsReq) ProtoMessage() {}

func (x *MyCommentsReq) ProtoReflect() protoreflect.Message {
	mi := &file_comment_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MyCommentsReq.ProtoReflect.Descriptor instead.
func (*MyCommentsReq) Descriptor() ([]byte, []int) {
	return file_comment_proto_rawDescGZIP(), []int{10}
}

func (x *MyCommentsReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type MyCommentsRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MyComments []*MyComment `protobuf:"bytes,1,rep,name=myComments,proto3" json:"myComments,omitempty"`
}

func (x *MyCommentsRsp) Reset() {
	*x = MyCommentsRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_comment_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MyCommentsRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MyCommentsRsp) ProtoMessage() {}

func (x *MyCommentsRsp) ProtoReflect() protoreflect.Message {
	mi := &file_comment_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MyCommentsRsp.ProtoReflect.Descriptor instead.
func (*MyCommentsRsp) Descriptor() ([]byte, []int) {
	return file_comment_proto_rawDescGZIP(), []int{11}
}

func (x *MyCommentsRsp) GetMyComments() []*MyComment {
	if x != nil {
		return x.MyComments
	}
	return nil
}

type MyComment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FilmImage string `protobuf:"bytes,1,opt,name=filmImage,proto3" json:"filmImage,omitempty"`
	FilmName  string `protobuf:"bytes,2,opt,name=filmName,proto3" json:"filmName,omitempty"`
	Score     string `protobuf:"bytes,3,opt,name=score,proto3" json:"score,omitempty"`
	CommentID int64  `protobuf:"varint,4,opt,name=commentID,proto3" json:"commentID,omitempty"`
	Content   string `protobuf:"bytes,5,opt,name=content,proto3" json:"content,omitempty"`
	UpNum     int64  `protobuf:"varint,6,opt,name=upNum,proto3" json:"upNum,omitempty"`
}

func (x *MyComment) Reset() {
	*x = MyComment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_comment_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MyComment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MyComment) ProtoMessage() {}

func (x *MyComment) ProtoReflect() protoreflect.Message {
	mi := &file_comment_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MyComment.ProtoReflect.Descriptor instead.
func (*MyComment) Descriptor() ([]byte, []int) {
	return file_comment_proto_rawDescGZIP(), []int{12}
}

func (x *MyComment) GetFilmImage() string {
	if x != nil {
		return x.FilmImage
	}
	return ""
}

func (x *MyComment) GetFilmName() string {
	if x != nil {
		return x.FilmName
	}
	return ""
}

func (x *MyComment) GetScore() string {
	if x != nil {
		return x.Score
	}
	return ""
}

func (x *MyComment) GetCommentID() int64 {
	if x != nil {
		return x.CommentID
	}
	return 0
}

func (x *MyComment) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *MyComment) GetUpNum() int64 {
	if x != nil {
		return x.UpNum
	}
	return 0
}

type DeleteCommentReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommentID int64 `protobuf:"varint,1,opt,name=commentID,proto3" json:"commentID,omitempty"`
}

func (x *DeleteCommentReq) Reset() {
	*x = DeleteCommentReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_comment_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCommentReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCommentReq) ProtoMessage() {}

func (x *DeleteCommentReq) ProtoReflect() protoreflect.Message {
	mi := &file_comment_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCommentReq.ProtoReflect.Descriptor instead.
func (*DeleteCommentReq) Descriptor() ([]byte, []int) {
	return file_comment_proto_rawDescGZIP(), []int{13}
}

func (x *DeleteCommentReq) GetCommentID() int64 {
	if x != nil {
		return x.CommentID
	}
	return 0
}

type DeleteCommentRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteCommentRsp) Reset() {
	*x = DeleteCommentRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_comment_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCommentRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCommentRsp) ProtoMessage() {}

func (x *DeleteCommentRsp) ProtoReflect() protoreflect.Message {
	mi := &file_comment_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCommentRsp.ProtoReflect.Descriptor instead.
func (*DeleteCommentRsp) Descriptor() ([]byte, []int) {
	return file_comment_proto_rawDescGZIP(), []int{14}
}

type Movie struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Img               string  `protobuf:"bytes,1,opt,name=img,proto3" json:"img,omitempty"`
	MovieId           int64   `protobuf:"varint,2,opt,name=movieId,proto3" json:"movieId,omitempty"`
	TitleCn           string  `protobuf:"bytes,3,opt,name=titleCn,proto3" json:"titleCn,omitempty"`
	MoviesSupportType string  `protobuf:"bytes,4,opt,name=moviesSupportType,proto3" json:"moviesSupportType,omitempty"`
	FilmDirector      string  `protobuf:"bytes,5,opt,name=filmDirector,proto3" json:"filmDirector,omitempty"`
	Actors            string  `protobuf:"bytes,6,opt,name=actors,proto3" json:"actors,omitempty"`
	FilmDrama         string  `protobuf:"bytes,7,opt,name=filmDrama,proto3" json:"filmDrama,omitempty"`
	RatingFinal       float32 `protobuf:"fixed32,8,opt,name=ratingFinal,proto3" json:"ratingFinal,omitempty"`
}

func (x *Movie) Reset() {
	*x = Movie{}
	if protoimpl.UnsafeEnabled {
		mi := &file_comment_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Movie) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Movie) ProtoMessage() {}

func (x *Movie) ProtoReflect() protoreflect.Message {
	mi := &file_comment_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Movie.ProtoReflect.Descriptor instead.
func (*Movie) Descriptor() ([]byte, []int) {
	return file_comment_proto_rawDescGZIP(), []int{15}
}

func (x *Movie) GetImg() string {
	if x != nil {
		return x.Img
	}
	return ""
}

func (x *Movie) GetMovieId() int64 {
	if x != nil {
		return x.MovieId
	}
	return 0
}

func (x *Movie) GetTitleCn() string {
	if x != nil {
		return x.TitleCn
	}
	return ""
}

func (x *Movie) GetMoviesSupportType() string {
	if x != nil {
		return x.MoviesSupportType
	}
	return ""
}

func (x *Movie) GetFilmDirector() string {
	if x != nil {
		return x.FilmDirector
	}
	return ""
}

func (x *Movie) GetActors() string {
	if x != nil {
		return x.Actors
	}
	return ""
}

func (x *Movie) GetFilmDrama() string {
	if x != nil {
		return x.FilmDrama
	}
	return ""
}

func (x *Movie) GetRatingFinal() float32 {
	if x != nil {
		return x.RatingFinal
	}
	return 0
}

type HotMovie struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActorName     []string `protobuf:"bytes,1,rep,name=actorName,proto3" json:"actorName,omitempty"`         // 演员名字
	CommonSpecial string   `protobuf:"bytes,2,opt,name=commonSpecial,proto3" json:"commonSpecial,omitempty"` // 影片简介
	DirectorName  string   `protobuf:"bytes,3,opt,name=directorName,proto3" json:"directorName,omitempty"`   // 导演名字
	Img           string   `protobuf:"bytes,4,opt,name=img,proto3" json:"img,omitempty"`                     // 影片logo
	Is3D          int64    `protobuf:"varint,5,opt,name=is3D,proto3" json:"is3D,omitempty"`                  // 是否3D
	IsDMAX        int64    `protobuf:"varint,6,opt,name=isDMAX,proto3" json:"isDMAX,omitempty"`              // 是否DMAX
	IsFilter      int64    `protobuf:"varint,7,opt,name=isFilter,proto3" json:"isFilter,omitempty"`          // 是否过滤
	IsHot         int64    `protobuf:"varint,8,opt,name=isHot,proto3" json:"isHot,omitempty"`                // 是否热映
	IsIMAX        int64    `protobuf:"varint,9,opt,name=isIMAX,proto3" json:"isIMAX,omitempty"`              // 是否IMAX
	IsIMAX3D      int64    `protobuf:"varint,10,opt,name=isIMAX3D,proto3" json:"isIMAX3D,omitempty"`         // 是否IMAX3D
	IsNew         int64    `protobuf:"varint,11,opt,name=isNew,proto3" json:"isNew,omitempty"`               // 是否新上映
	Length        int64    `protobuf:"varint,12,opt,name=length,proto3" json:"length,omitempty"`             // 时长
	MovieId       int64    `protobuf:"varint,13,opt,name=movieId,proto3" json:"movieId,omitempty"`           // 电影时长
	RDay          int64    `protobuf:"varint,14,opt,name=rDay,proto3" json:"rDay,omitempty"`                 // 上映日期
	RMonth        int64    `protobuf:"varint,15,opt,name=rMonth,proto3" json:"rMonth,omitempty"`             // 上映月份
	RYear         int64    `protobuf:"varint,16,opt,name=rYear,proto3" json:"rYear,omitempty"`               // 上映年份
	RatingFinal   float32  `protobuf:"fixed32,17,opt,name=ratingFinal,proto3" json:"ratingFinal,omitempty"`  // 最终评分
	T             string   `protobuf:"bytes,18,opt,name=t,proto3" json:"t,omitempty"`                        // 名字
	TitleCn       string   `protobuf:"bytes,19,opt,name=titleCn,proto3" json:"titleCn,omitempty"`            // 中文名字
	TitleEn       string   `protobuf:"bytes,20,opt,name=titleEn,proto3" json:"titleEn,omitempty"`            // 英文名字
	Type          string   `protobuf:"bytes,21,opt,name=type,proto3" json:"type,omitempty"`                  // 影片类型
	WantedCount   int64    `protobuf:"varint,22,opt,name=wantedCount,proto3" json:"wantedCount,omitempty"`   // 想看的人数
}

func (x *HotMovie) Reset() {
	*x = HotMovie{}
	if protoimpl.UnsafeEnabled {
		mi := &file_comment_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HotMovie) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HotMovie) ProtoMessage() {}

func (x *HotMovie) ProtoReflect() protoreflect.Message {
	mi := &file_comment_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HotMovie.ProtoReflect.Descriptor instead.
func (*HotMovie) Descriptor() ([]byte, []int) {
	return file_comment_proto_rawDescGZIP(), []int{16}
}

func (x *HotMovie) GetActorName() []string {
	if x != nil {
		return x.ActorName
	}
	return nil
}

func (x *HotMovie) GetCommonSpecial() string {
	if x != nil {
		return x.CommonSpecial
	}
	return ""
}

func (x *HotMovie) GetDirectorName() string {
	if x != nil {
		return x.DirectorName
	}
	return ""
}

func (x *HotMovie) GetImg() string {
	if x != nil {
		return x.Img
	}
	return ""
}

func (x *HotMovie) GetIs3D() int64 {
	if x != nil {
		return x.Is3D
	}
	return 0
}

func (x *HotMovie) GetIsDMAX() int64 {
	if x != nil {
		return x.IsDMAX
	}
	return 0
}

func (x *HotMovie) GetIsFilter() int64 {
	if x != nil {
		return x.IsFilter
	}
	return 0
}

func (x *HotMovie) GetIsHot() int64 {
	if x != nil {
		return x.IsHot
	}
	return 0
}

func (x *HotMovie) GetIsIMAX() int64 {
	if x != nil {
		return x.IsIMAX
	}
	return 0
}

func (x *HotMovie) GetIsIMAX3D() int64 {
	if x != nil {
		return x.IsIMAX3D
	}
	return 0
}

func (x *HotMovie) GetIsNew() int64 {
	if x != nil {
		return x.IsNew
	}
	return 0
}

func (x *HotMovie) GetLength() int64 {
	if x != nil {
		return x.Length
	}
	return 0
}

func (x *HotMovie) GetMovieId() int64 {
	if x != nil {
		return x.MovieId
	}
	return 0
}

func (x *HotMovie) GetRDay() int64 {
	if x != nil {
		return x.RDay
	}
	return 0
}

func (x *HotMovie) GetRMonth() int64 {
	if x != nil {
		return x.RMonth
	}
	return 0
}

func (x *HotMovie) GetRYear() int64 {
	if x != nil {
		return x.RYear
	}
	return 0
}

func (x *HotMovie) GetRatingFinal() float32 {
	if x != nil {
		return x.RatingFinal
	}
	return 0
}

func (x *HotMovie) GetT() string {
	if x != nil {
		return x.T
	}
	return ""
}

func (x *HotMovie) GetTitleCn() string {
	if x != nil {
		return x.TitleCn
	}
	return ""
}

func (x *HotMovie) GetTitleEn() string {
	if x != nil {
		return x.TitleEn
	}
	return ""
}

func (x *HotMovie) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *HotMovie) GetWantedCount() int64 {
	if x != nil {
		return x.WantedCount
	}
	return 0
}

var File_comment_proto protoreflect.FileDescriptor

var file_comment_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x29, 0x0a, 0x0d, 0x48, 0x6f, 0x74, 0x43,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x6f, 0x76,
	0x69, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6d, 0x6f, 0x76, 0x69,
	0x65, 0x49, 0x64, 0x22, 0x39, 0x0a, 0x0d, 0x48, 0x6f, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x73, 0x70, 0x12, 0x28, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x61,
	0x0a, 0x0b, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x28, 0x0a,
	0x04, 0x6d, 0x69, 0x6e, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x69, 0x6e,
	0x69, 0x52, 0x04, 0x6d, 0x69, 0x6e, 0x69, 0x12, 0x28, 0x0a, 0x04, 0x70, 0x6c, 0x75, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x75, 0x73, 0x52, 0x04, 0x70, 0x6c, 0x75,
	0x73, 0x22, 0x4f, 0x0a, 0x0b, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x69, 0x6e, 0x69,
	0x12, 0x2a, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x22, 0x4f, 0x0a, 0x0b, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x75,
	0x73, 0x12, 0x2a, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x22, 0xc5, 0x01, 0x0a, 0x0d, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x68, 0x65, 0x61, 0x64, 0x49, 0x6d, 0x67,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x68, 0x65, 0x61, 0x64, 0x49, 0x6d, 0x67, 0x12,
	0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x70, 0x4e, 0x75, 0x6d,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x75, 0x70, 0x4e, 0x75, 0x6d, 0x12, 0x1c, 0x0a,
	0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x22, 0xa8, 0x01, 0x0a, 0x0e,
	0x4d, 0x61, 0x6b, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x68, 0x65, 0x61, 0x64, 0x49, 0x6d, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x68, 0x65, 0x61, 0x64, 0x49, 0x6d, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x10, 0x0a, 0x0e, 0x4d, 0x61, 0x6b, 0x65, 0x43, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x73, 0x70, 0x22, 0x2f, 0x0a, 0x0f, 0x55, 0x70, 0x4e, 0x75,
	0x6d, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x22, 0x27, 0x0a, 0x0f, 0x55, 0x70, 0x4e,
	0x75, 0x6d, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05,
	0x75, 0x70, 0x4e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x75, 0x70, 0x4e,
	0x75, 0x6d, 0x22, 0x27, 0x0a, 0x0d, 0x4d, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x43, 0x0a, 0x0d, 0x4d,
	0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x73, 0x70, 0x12, 0x32, 0x0a, 0x0a,
	0x6d, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x4d, 0x79, 0x43, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x6d, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x22, 0xa9, 0x01, 0x0a, 0x09, 0x4d, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1c,
	0x0a, 0x09, 0x66, 0x69, 0x6c, 0x6d, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x66, 0x69, 0x6c, 0x6d, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x66, 0x69, 0x6c, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x66, 0x69, 0x6c, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x70, 0x4e, 0x75, 0x6d, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x75, 0x70, 0x4e, 0x75, 0x6d, 0x22, 0x30, 0x0a, 0x10,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x22, 0x12,
	0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x73, 0x70, 0x22, 0xf7, 0x01, 0x0a, 0x05, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x69, 0x6d, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x69, 0x6d, 0x67, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x43, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x43, 0x6e, 0x12, 0x2c, 0x0a, 0x11, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x73, 0x53, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6d,
	0x6f, 0x76, 0x69, 0x65, 0x73, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x22, 0x0a, 0x0c, 0x66, 0x69, 0x6c, 0x6d, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x69, 0x6c, 0x6d, 0x44, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x1c, 0x0a, 0x09,
	0x66, 0x69, 0x6c, 0x6d, 0x44, 0x72, 0x61, 0x6d, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x66, 0x69, 0x6c, 0x6d, 0x44, 0x72, 0x61, 0x6d, 0x61, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x61,
	0x74, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x0b, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x22, 0xba, 0x04, 0x0a,
	0x08, 0x48, 0x6f, 0x74, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x12, 0x22, 0x0a,
	0x0c, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x6d, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x69, 0x6d, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x73, 0x33, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x04, 0x69, 0x73, 0x33, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x44, 0x4d, 0x41,
	0x58, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x69, 0x73, 0x44, 0x4d, 0x41, 0x58, 0x12,
	0x1a, 0x0a, 0x08, 0x69, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x69, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x69,
	0x73, 0x48, 0x6f, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x69, 0x73, 0x48, 0x6f,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x49, 0x4d, 0x41, 0x58, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x69, 0x73, 0x49, 0x4d, 0x41, 0x58, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x49,
	0x4d, 0x41, 0x58, 0x33, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x69, 0x73, 0x49,
	0x4d, 0x41, 0x58, 0x33, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x73, 0x4e, 0x65, 0x77, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x69, 0x73, 0x4e, 0x65, 0x77, 0x12, 0x16, 0x0a, 0x06, 0x6c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x49, 0x64, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x72, 0x44, 0x61, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x72, 0x44, 0x61,
	0x79, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x72, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x59, 0x65,
	0x61, 0x72, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x72, 0x59, 0x65, 0x61, 0x72, 0x12,
	0x20, 0x0a, 0x0b, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x6e, 0x61,
	0x6c, 0x12, 0x0c, 0x0a, 0x01, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x01, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x43, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x43, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x45, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x45, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x77, 0x61, 0x6e, 0x74, 0x65,
	0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x77, 0x61,
	0x6e, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x32, 0xe5, 0x02, 0x0a, 0x11, 0x43, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x45, 0x78, 0x74, 0x12,
	0x3e, 0x0a, 0x0a, 0x48, 0x6f, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x48, 0x6f, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x48, 0x6f, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12,
	0x41, 0x0a, 0x0b, 0x4d, 0x61, 0x6b, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x17,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x4d, 0x61, 0x6b, 0x65, 0x43, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x4d, 0x61, 0x6b, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x73, 0x70,
	0x22, 0x00, 0x12, 0x44, 0x0a, 0x0c, 0x55, 0x70, 0x4e, 0x75, 0x6d, 0x43, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x4e,
	0x75, 0x6d, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x4e, 0x75, 0x6d, 0x43, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x3e, 0x0a, 0x0a, 0x4d, 0x79, 0x43, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x4d, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x16,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x4d, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x47, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x1a, 0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x73, 0x70, 0x22,
	0x00, 0x42, 0x04, 0x5a, 0x02, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_comment_proto_rawDescOnce sync.Once
	file_comment_proto_rawDescData = file_comment_proto_rawDesc
)

func file_comment_proto_rawDescGZIP() []byte {
	file_comment_proto_rawDescOnce.Do(func() {
		file_comment_proto_rawDescData = protoimpl.X.CompressGZIP(file_comment_proto_rawDescData)
	})
	return file_comment_proto_rawDescData
}

var file_comment_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_comment_proto_goTypes = []interface{}{
	(*HotCommentReq)(nil),    // 0: comment.HotCommentReq
	(*HotCommentRsp)(nil),    // 1: comment.HotCommentRsp
	(*CommentData)(nil),      // 2: comment.CommentData
	(*CommentMini)(nil),      // 3: comment.CommentMini
	(*CommentPlus)(nil),      // 4: comment.CommentPlus
	(*CommentRecord)(nil),    // 5: comment.CommentRecord
	(*MakeCommentReq)(nil),   // 6: comment.MakeCommentReq
	(*MakeCommentRsp)(nil),   // 7: comment.MakeCommentRsp
	(*UpNumCommentReq)(nil),  // 8: comment.UpNumCommentReq
	(*UpNumCommentRsp)(nil),  // 9: comment.UpNumCommentRsp
	(*MyCommentsReq)(nil),    // 10: comment.MyCommentsReq
	(*MyCommentsRsp)(nil),    // 11: comment.MyCommentsRsp
	(*MyComment)(nil),        // 12: comment.MyComment
	(*DeleteCommentReq)(nil), // 13: comment.DeleteCommentReq
	(*DeleteCommentRsp)(nil), // 14: comment.DeleteCommentRsp
	(*Movie)(nil),            // 15: comment.Movie
	(*HotMovie)(nil),         // 16: comment.HotMovie
}
var file_comment_proto_depIdxs = []int32{
	2,  // 0: comment.HotCommentRsp.data:type_name -> comment.CommentData
	3,  // 1: comment.CommentData.mini:type_name -> comment.CommentMini
	4,  // 2: comment.CommentData.plus:type_name -> comment.CommentPlus
	5,  // 3: comment.CommentMini.list:type_name -> comment.CommentRecord
	5,  // 4: comment.CommentPlus.list:type_name -> comment.CommentRecord
	12, // 5: comment.MyCommentsRsp.myComments:type_name -> comment.MyComment
	0,  // 6: comment.CommentServiceExt.HotComment:input_type -> comment.HotCommentReq
	6,  // 7: comment.CommentServiceExt.MakeComment:input_type -> comment.MakeCommentReq
	8,  // 8: comment.CommentServiceExt.UpNumComment:input_type -> comment.UpNumCommentReq
	10, // 9: comment.CommentServiceExt.MyComments:input_type -> comment.MyCommentsReq
	13, // 10: comment.CommentServiceExt.DeleteComment:input_type -> comment.DeleteCommentReq
	1,  // 11: comment.CommentServiceExt.HotComment:output_type -> comment.HotCommentRsp
	7,  // 12: comment.CommentServiceExt.MakeComment:output_type -> comment.MakeCommentRsp
	9,  // 13: comment.CommentServiceExt.UpNumComment:output_type -> comment.UpNumCommentRsp
	11, // 14: comment.CommentServiceExt.MyComments:output_type -> comment.MyCommentsRsp
	14, // 15: comment.CommentServiceExt.DeleteComment:output_type -> comment.DeleteCommentRsp
	11, // [11:16] is the sub-list for method output_type
	6,  // [6:11] is the sub-list for method input_type
	6,  // [6:6] is the sub-list for extension type_name
	6,  // [6:6] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() { file_comment_proto_init() }
func file_comment_proto_init() {
	if File_comment_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_comment_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HotCommentReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_comment_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HotCommentRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_comment_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommentData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_comment_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommentMini); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_comment_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommentPlus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_comment_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommentRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_comment_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MakeCommentReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_comment_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MakeCommentRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_comment_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpNumCommentReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_comment_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpNumCommentRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_comment_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MyCommentsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_comment_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MyCommentsRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_comment_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MyComment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_comment_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCommentReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_comment_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCommentRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_comment_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Movie); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_comment_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HotMovie); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_comment_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_comment_proto_goTypes,
		DependencyIndexes: file_comment_proto_depIdxs,
		MessageInfos:      file_comment_proto_msgTypes,
	}.Build()
	File_comment_proto = out.File
	file_comment_proto_rawDesc = nil
	file_comment_proto_goTypes = nil
	file_comment_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// CommentServiceExtClient is the client API for CommentServiceExt service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CommentServiceExtClient interface {
	// 精彩影评
	HotComment(ctx context.Context, in *HotCommentReq, opts ...grpc.CallOption) (*HotCommentRsp, error)
	// 进行评论
	MakeComment(ctx context.Context, in *MakeCommentReq, opts ...grpc.CallOption) (*MakeCommentRsp, error)
	// 评论up
	UpNumComment(ctx context.Context, in *UpNumCommentReq, opts ...grpc.CallOption) (*UpNumCommentRsp, error)
	// 我的评论
	MyComments(ctx context.Context, in *MyCommentsReq, opts ...grpc.CallOption) (*MyCommentsRsp, error)
	// 删除评论
	DeleteComment(ctx context.Context, in *DeleteCommentReq, opts ...grpc.CallOption) (*DeleteCommentRsp, error)
}

type commentServiceExtClient struct {
	cc grpc.ClientConnInterface
}

func NewCommentServiceExtClient(cc grpc.ClientConnInterface) CommentServiceExtClient {
	return &commentServiceExtClient{cc}
}

func (c *commentServiceExtClient) HotComment(ctx context.Context, in *HotCommentReq, opts ...grpc.CallOption) (*HotCommentRsp, error) {
	out := new(HotCommentRsp)
	err := c.cc.Invoke(ctx, "/comment.CommentServiceExt/HotComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentServiceExtClient) MakeComment(ctx context.Context, in *MakeCommentReq, opts ...grpc.CallOption) (*MakeCommentRsp, error) {
	out := new(MakeCommentRsp)
	err := c.cc.Invoke(ctx, "/comment.CommentServiceExt/MakeComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentServiceExtClient) UpNumComment(ctx context.Context, in *UpNumCommentReq, opts ...grpc.CallOption) (*UpNumCommentRsp, error) {
	out := new(UpNumCommentRsp)
	err := c.cc.Invoke(ctx, "/comment.CommentServiceExt/UpNumComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentServiceExtClient) MyComments(ctx context.Context, in *MyCommentsReq, opts ...grpc.CallOption) (*MyCommentsRsp, error) {
	out := new(MyCommentsRsp)
	err := c.cc.Invoke(ctx, "/comment.CommentServiceExt/MyComments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentServiceExtClient) DeleteComment(ctx context.Context, in *DeleteCommentReq, opts ...grpc.CallOption) (*DeleteCommentRsp, error) {
	out := new(DeleteCommentRsp)
	err := c.cc.Invoke(ctx, "/comment.CommentServiceExt/DeleteComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CommentServiceExtServer is the server API for CommentServiceExt service.
type CommentServiceExtServer interface {
	// 精彩影评
	HotComment(context.Context, *HotCommentReq) (*HotCommentRsp, error)
	// 进行评论
	MakeComment(context.Context, *MakeCommentReq) (*MakeCommentRsp, error)
	// 评论up
	UpNumComment(context.Context, *UpNumCommentReq) (*UpNumCommentRsp, error)
	// 我的评论
	MyComments(context.Context, *MyCommentsReq) (*MyCommentsRsp, error)
	// 删除评论
	DeleteComment(context.Context, *DeleteCommentReq) (*DeleteCommentRsp, error)
}

// UnimplementedCommentServiceExtServer can be embedded to have forward compatible implementations.
type UnimplementedCommentServiceExtServer struct {
}

func (*UnimplementedCommentServiceExtServer) HotComment(context.Context, *HotCommentReq) (*HotCommentRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HotComment not implemented")
}
func (*UnimplementedCommentServiceExtServer) MakeComment(context.Context, *MakeCommentReq) (*MakeCommentRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MakeComment not implemented")
}
func (*UnimplementedCommentServiceExtServer) UpNumComment(context.Context, *UpNumCommentReq) (*UpNumCommentRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpNumComment not implemented")
}
func (*UnimplementedCommentServiceExtServer) MyComments(context.Context, *MyCommentsReq) (*MyCommentsRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MyComments not implemented")
}
func (*UnimplementedCommentServiceExtServer) DeleteComment(context.Context, *DeleteCommentReq) (*DeleteCommentRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteComment not implemented")
}

func RegisterCommentServiceExtServer(s *grpc.Server, srv CommentServiceExtServer) {
	s.RegisterService(&_CommentServiceExt_serviceDesc, srv)
}

func _CommentServiceExt_HotComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HotCommentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServiceExtServer).HotComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comment.CommentServiceExt/HotComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServiceExtServer).HotComment(ctx, req.(*HotCommentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentServiceExt_MakeComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MakeCommentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServiceExtServer).MakeComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comment.CommentServiceExt/MakeComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServiceExtServer).MakeComment(ctx, req.(*MakeCommentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentServiceExt_UpNumComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpNumCommentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServiceExtServer).UpNumComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comment.CommentServiceExt/UpNumComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServiceExtServer).UpNumComment(ctx, req.(*UpNumCommentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentServiceExt_MyComments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MyCommentsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServiceExtServer).MyComments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comment.CommentServiceExt/MyComments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServiceExtServer).MyComments(ctx, req.(*MyCommentsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentServiceExt_DeleteComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCommentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServiceExtServer).DeleteComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comment.CommentServiceExt/DeleteComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServiceExtServer).DeleteComment(ctx, req.(*DeleteCommentReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _CommentServiceExt_serviceDesc = grpc.ServiceDesc{
	ServiceName: "comment.CommentServiceExt",
	HandlerType: (*CommentServiceExtServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HotComment",
			Handler:    _CommentServiceExt_HotComment_Handler,
		},
		{
			MethodName: "MakeComment",
			Handler:    _CommentServiceExt_MakeComment_Handler,
		},
		{
			MethodName: "UpNumComment",
			Handler:    _CommentServiceExt_UpNumComment_Handler,
		},
		{
			MethodName: "MyComments",
			Handler:    _CommentServiceExt_MyComments_Handler,
		},
		{
			MethodName: "DeleteComment",
			Handler:    _CommentServiceExt_DeleteComment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "comment.proto",
}
